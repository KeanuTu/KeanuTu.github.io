<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/02/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F00-UML%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>layout: post<br>title: 设计模式00_UML基础<br>date: 2020-02-24 17:21:54<br>tags:</p>
<ul>
<li>设计模式<br>categories:</li>
<li>设计模式</li>
</ul>
<p>​    用标准的工业化设计语言，对待开发的产品进行建模，<strong>建模的目的就是把所要设计的结构和系统的行为联系起来，并对系统的结构进行可视化控制。</strong></p>
<a id="more"></a>
<h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><p>​    UML（<strong>U</strong>nified <strong>M</strong>odeling <strong>L</strong>anguage）统一建模语言，主要图像是：<code>类图</code>，<code>顺序图</code>，<code>状态图</code>。</p>
<blockquote>
<p>在这里补充一点，如何用markdown画流程图，顺序图（时序图），甘特图</p>
</blockquote>
<h2 id="Markdown画图语法"><a href="#Markdown画图语法" class="headerlink" title="Markdown画图语法"></a>Markdown画图语法</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><h4 id="简易流程图"><a href="#简易流程图" class="headerlink" title="简易流程图"></a>简易流程图</h4><p>流程图的定义仅由graph开始，但是方向的定义不止一种。</p>
<ol>
<li>TB（ top bottom）表示从上到下</li>
<li>BT（bottom top）表示从下到上</li>
<li>RL（right left）表示从右到左</li>
<li>LR（left right）表示从左到右</li>
<li>TD与TB一样表示从上到下</li>
</ol>
<p><strong>节点</strong></p>
<p>有以下几种节点和形状：</p>
<ol>
<li>默认节点 A</li>
<li>文本节点 B[bname]</li>
<li>圆角节点 C(cname)</li>
<li>圆形节点 D((dname))</li>
<li>非对称节点 E&gt;ename]</li>
<li>菱形节点 F{fname}</li>
</ol>
<p><strong>连线</strong></p>
<p>节点间的连线有多种形状，而且可以在连线中加入标签：</p>
<pre class="mermaid">graph TB
    A1-->B1
    A2---B2
    A3--text---B3
    A4--text-->B4
    A5-.-B5
    A6-.->B6
    A7==text==>B7

    subgraph 特殊图
     a1 --> a2
        end</pre>





<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">graph TD	<span class="comment">//横向LR</span></span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=<span class="number">1</span>| D[结果<span class="number">1</span>]</span><br><span class="line">    C --&gt;|a=<span class="number">2</span>| E[结果<span class="number">2</span>]</span><br><span class="line">    F[竖向流程图]</span><br><span class="line">        						mermaid</span><br></pre></td></tr></table></figure>
<pre class="mermaid">graph TD
A[方形] -->B(圆角)
    B --> C{条件a}
    C -->|a=1| D[结果1]
    C -->|a=2| E[结果2]
    G((圆))
    F>非对称节点]</pre>

<pre class="mermaid">graph LR
A[正方形] --> B(圆角)
    B --> C{条件a}
    C --> |a=1| D[结果1]
    C --> |a=2| E[结果2]
    F[横向流程图]</pre>

<h4 id="标准流程图"><a href="#标准流程图" class="headerlink" title="标准流程图"></a>标准流程图</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框（是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line">    							flow</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框（是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框（是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st(right)-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>
<h3 id="UML时序图"><a href="#UML时序图" class="headerlink" title="UML时序图"></a>UML时序图</h3><h4 id="简单时序图"><a href="#简单时序图" class="headerlink" title="简单时序图"></a>简单时序图</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?(请求)</span><br><span class="line">Note right of 对象B: 对B的描述</span><br><span class="line">Note left of 对象A: 对A的描述</span><br><span class="line">对象B-&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗?</span><br><span class="line">								sequence</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?(请求)</span><br><span class="line">Note right of 对象B: 对B的描述</span><br><span class="line">Note left of 对象A: 对A的描述</span><br><span class="line">对象B-&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗?</span><br></pre></td></tr></table></figure>
<h4 id="复杂的时序图"><a href="#复杂的时序图" class="headerlink" title="复杂的时序图"></a>复杂的时序图</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用(添狗)</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗？(请求)</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人找我玩</span><br><span class="line">								sequence</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用(添狗)</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗？(请求)</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人找我玩</span><br></pre></td></tr></table></figure>
<h4 id="标准时序图"><a href="#标准时序图" class="headerlink" title="标准时序图"></a>标准时序图</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%% 时序图例子，-&gt;直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">sequenceDiagram</span><br><span class="line">	participant 张三</span><br><span class="line">	participant 李四</span><br><span class="line">	张三-&gt;王五: 王五你好吗?</span><br><span class="line">	loop 健康检查</span><br><span class="line">		王五-&gt;王五: 与疾病战斗</span><br><span class="line">	end</span><br><span class="line">	Note right of 王五: 合理饮食 &lt;br/&gt;医生...</span><br><span class="line">	李四--&gt;&gt;张三: 很好！</span><br><span class="line">	王五-&gt;李四: 你怎么样？</span><br><span class="line">	李四--&gt;王五: 很好</span><br><span class="line">								mermaid</span><br></pre></td></tr></table></figure>
<pre class="mermaid">%% 时序图例子，->直线，-->虚线，->>实线箭头
sequenceDiagram
    participant 张三
    participant 李四
    张三->王五: 王五你好吗?
    loop 健康检查
        王五->王五: 与疾病战斗
    end
    Note right of 王五: 合理饮食 <br>医生...
    李四-->>张三: 很好！
    王五->李四: 你怎么样？
    李四-->王五: 很好</pre>

<h3 id="甘特图实例"><a href="#甘特图实例" class="headerlink" title="甘特图实例"></a>甘特图实例</h3><p> <strong>甘特图</strong>，也称为条状图(<a href="https://wiki.mbalib.com/wiki/Bar_chart" target="_blank" rel="noopener">Bar chart</a>)  。是在1917年由<a href="https://wiki.mbalib.com/wiki/亨利·甘特" target="_blank" rel="noopener">亨利·甘特</a>开发的，其内在思想简单，基本是一条线条图，横轴表示时间，纵轴表示活动(项目)，线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。 </p>
<pre class="mermaid">%% 甘特图语法示例
    gantt
    dateFormat YYYY-MM-DD
    title 软件开发甘特图

    section 设计
     需求                      :done,    des1, 2014-01-06,2014-01-08
        原型                      :active,  des2, 2014-01-09, 3d
        UI设计                     :         des3, after des2, 5d
    未来任务                     :         des4, after des3, 5d

     section 开发
        学习准备理解需求                      :crit, done, 2014-01-06,24h
        设计框架                             :crit, done, after des2, 2d
        开发                                 :crit, active, 3d
        未来任务                              :crit, 5d
        耍                                   :2d

        section 测试
        功能测试                              :active, a1, after des3, 3d
        压力测试                               :after a1  , 20h
        测试报告                               : 48h</pre>

<table>
<thead>
<tr>
<th style="text-align:left">标签名</th>
<th style="text-align:left">语意</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">标题</td>
</tr>
<tr>
<td style="text-align:left">dateFormat</td>
<td style="text-align:left">日期格式</td>
</tr>
<tr>
<td style="text-align:left">section</td>
<td style="text-align:left">模块</td>
</tr>
<tr>
<td style="text-align:left">Completed</td>
<td style="text-align:left">已经完成</td>
</tr>
<tr>
<td style="text-align:left">Active</td>
<td style="text-align:left">当前正在进行</td>
</tr>
<tr>
<td style="text-align:left">Future</td>
<td style="text-align:left">后续待处理</td>
</tr>
<tr>
<td style="text-align:left">crit</td>
<td style="text-align:left">关键阶段</td>
</tr>
<tr>
<td style="text-align:left">日期缺失</td>
<td style="text-align:left">默认从上一项完成后</td>
</tr>
</tbody>
</table>
<p>+++</p>
<h2 id="UML用例图"><a href="#UML用例图" class="headerlink" title="UML用例图"></a>UML用例图</h2><p>​    用例图（<strong>Use Case Diagram</strong>）：又称用况图，对应于用户视图。</p>
<p>​    在用例图中，使用用例来表示系统的功能需求，<strong><em>用例图用于表示多个外部执行者于系统用例之间以及用例与用例之间的关系。</em></strong><span style="color:red">用例图与用例说明文档（Use Case Specification）</span>是常用的需求建模工具，也称为用例建模</p>
<h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><p>用例用圆括号括起来。</p>
<p>也可以用关键字<code>usecase</code>来定义用例。 还可以用关键字<code>as</code>定义一个别名，这个别名可以在以后定义关系的时候使用。</p>
<blockquote>
<p>@startuml</p>
<p>(First usecase)<br>(Another usecase) as (UC2)<br>usecase UC3<br>usecase (Last\nusecase) as UC4</p>
<p>@enduml</p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuUBISCiiAYvHA2rEJKuiJjNaqd3Coo_9I2s2YoWa5YjeX3eRQIeeS47554ATZU5i3P_4ufAOF2JbG6aJBYw7rBmKe0q0" alt="用例"></p>
<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>角色用两个冒号包裹起来。</p>
<p>也可以用<code>actor</code>关键字来定义角色。 还可以用关键字<code>as</code>来定义一个别名，这个别名可以在以后定义关系的时候使用。</p>
<p>后面我们会看到角色的定义是可选的。</p>
<blockquote>
<p>@startuml</p>
<p>:First Actor:<br>:Another\nactor: as Men2<br>actor Men3<br>actor :Last actor: as Men4</p>
<p>@enduml</p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuUAoSiiiAYvHS4mkoI-ouh9opCiloKWjYibB10ie91Oh-ARc6IaeS845G1nZADFA9n6e4KMT2HUNGsfU2j1W0000" alt="用户"></p>
<h3 id="改变箭头连接方向"><a href="#改变箭头连接方向" class="headerlink" title="改变箭头连接方向"></a>改变箭头连接方向</h3><p> 默认连接（-）是竖直方向的，用<code>--</code>表示，可以用一个横杠或点来表示水平连接。</p>
<p>  还可以通过给箭头添加<code>left</code>, <code>right</code>, <code>up</code>或<code>down</code>等关键字来改变方向。 </p>
<blockquote>
<p>@startuml<br>:user: -left-&gt; (dummyLeft)<br>:user: -right-&gt; (dummyRight)<br>:user: -up-&gt; (dummyUp)<br>:user: -down-&gt; (dummyDown)<br>@enduml</p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuR8gBKujibBGpKbDAz6rKz18AStDhVG1SZGLu795cUaP2CaW80zPjhG0BXLQe0aNJialpuDBk00vcbmEgNb0NWu0" alt></p>
<h3 id="图示方向"><a href="#图示方向" class="headerlink" title="图示方向"></a>图示方向</h3><p> 默认从上往下构建图示。 </p>
<blockquote>
<p>@startuml<br>‘default<br>top to bottom direction<br>user1 –&gt; (Usecase 1)<br>user2 –&gt; (Usecase 2)</p>
<p>@enduml</p>
</blockquote>
<p> 你可以用<code>left to right direction</code>命令改变图示方向。 </p>
<blockquote>
<p>@startuml</p>
<p>left to right direction<br>user1 –&gt; (Usecase 1)<br>user2 –&gt; (Usecase 2)</p>
<p>@enduml</p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuR9ooomgBb5mJ2x9BxBYidBCoo_9I2sAoKi42oWa5YlufkOPAIXmWGL076Ceqyed4QWHHPq9bqDgNWhGM000" alt="方向"></p>
<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>​    类图<strong>（Class Diagram）</strong>:对应于结构视图（4+1view）。</p>
<p>​    <strong><em>类图使用类来描述系统的静态结构，类图包含类和它们之间的关系</em></strong>，它描述系统内所声明的类，但它没有描述系统运行时类的行为。</p>
<h3 id="类的属性表示方法"><a href="#类的属性表示方法" class="headerlink" title="类的属性表示方法"></a>类的属性表示方法</h3><p>​    在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示。如下</p>
<p>这种语法对于类型/名字的顺序是非常灵活的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">@startuml </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dummy</span> &#123;</span></span><br><span class="line">	String data  </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">methods</span><span class="params">()</span> </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> &#123;</span>   </span><br><span class="line">	flightNumber : Integer   </span><br><span class="line">	departureTime : Date </span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/DOqn3i8m34Nd-XH_X2imTQYGM5ZW0WQRDbASeiH1GXLt9q5Yi_N-_syipjchHT0zSYcOgjaR6mqNpo7D47O6Q7YjGM3goofbjmTz_eLZ3FFYsD1JZzzphdRJZ0DEoNLkLqUYpsxAUWscZKtiscPer2JD_mK0" alt></p>
<p>一般用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object &lt;|-- ArrayList</span><br><span class="line"></span><br><span class="line">Object : equals()</span><br><span class="line">ArrayList : Object[] elementData</span><br><span class="line">ArrayList : size()</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为了声明字段(对象属性）或者方法，你可以使用 后接字段名或方法名。</p>
<p>系统检查是否有括号来判断是方法还是字段。</p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuV9FoafDBb6mgT7LLN0iAagizCaiBk622Liff1QM9kOKQsXomIH1WX3Pw5Y5r9pKtDIy4fV4aaGK1SMPLQb0FLmEgNafG5i0" alt></p>
<p><a href="http://plantuml.com/zh/" target="_blank" rel="noopener"><span style="color:red">关于Plant的UML语法和功能</span></a> </p>
<p>打开<a href="http://www.plantuml.com/plantuml" target="_blank" rel="noopener"><span style="color:blue">在线作图网址</span></a>，在上面的代码框里面输入代码。<br>完成后点击 Submit 按钮提交查看预览图，同时在预览图下面的 URL 地址框里面会有生成的 UML 图的 png 地址图，当然你也可以选择生成 SVG 或者 ASCII Art。把这个图片地址复制到 Markdown 就可以使用了。 </p>
<p>如果想修改怎么办？<br>打开<a href="http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000" target="_blank" rel="noopener">在线作图网址</a>，把图片的 url 复制到下面的 url 框里面，点击 Submit ，在上面代码框里面会出现该图片对应的代码，然后修改即可。修改完成后再次生成图片即可。 </p>
<p>采用Plant的UML的原因，方便版本控制</p>
<h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><blockquote>
<p>Father &lt;|– Son</p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuN9BBCb8BRAfqTKDpi_ZSaZDIm6A0W00" alt="继承"></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><blockquote>
<p> abstract class AbstractList </p>
<p>interface List </p>
<p>List &lt;|.. AbstractList </p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/IqmgBYbAJ2vHICv9B2vMS8HoVJABIxWoyqfIYz8IarCLm5mGeM1JewU7eWe0" alt="实现"></p>
<h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>​     关联关系的一种特例，他体现的是一种<strong>contains-a</strong>的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束。 </p>
<blockquote>
<p> <em>Human</em> <em>**– </em>Brain* </p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/yoZDJSnJqDBLLN0gIipC0m00" alt="组合"></p>
<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>​     关联关系的一种特例，他体现的是整体与部分、拥有的关系，即<strong>has-a</strong>的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期。 </p>
<blockquote>
<p> <em>Company</em> <em>o</em>– <em>Human</em> </p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/SyxFBKZCgrJ8rzLLy2ZDJSm30000" alt="聚合"></p>
<h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><pre><code>类与类之间的联接。强依赖关系，表现在代码层面，为*被关联类B以类属性的形式出现在关联类A中。* 
</code></pre><blockquote>
<p>class Water </p>
<p>class Human </p>
<p>Human –&gt; Water </p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/Iyv9B2vM24yiIItYIWQpFKfp4_EumAI2hguTH0u0" alt="关联"></p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a><strong>依赖</strong></h4><pre><code>类与类之间的联接。一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，表现在代码层面，**类B作为参数被类A在某个方法中使用**，例如人和烟草的关系。 
</code></pre><blockquote>
<p>Human ..&gt; Cigarette</p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/yoZDJSnJqDEpKt3EJ4yiIYqfIGK0" alt="依赖"></p>
<h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p> 在作图时，如果遇到了名称相同包名不同的类这时就要用域来进行区分。可以用 <code>namespace</code>，也可以直接用包名： </p>
<blockquote>
<p>class BaseClass</p>
<p>namespace net.dummy #DDDDDD {<br>    .BaseClass &lt;|– Person<br>    Meeting o– Person</p>
<p>​    .BaseClass &lt;|- Meeting</p>
<p>}</p>
<p>(package) net.foo {<br>  net.dummy.Person  &lt;|- Person<br>  .BaseClass &lt;|– Person</p>
<p>  net.dummy.Meeting o– Person<br>}</p>
<p>BaseClass &lt;|– net.unused.Person</p>
<p>class net.unused.Person {</p>
<p>+public void test();<br>}</p>
</blockquote>
<p><img src="http://www.plantuml.com/plantuml/png/TKvB2i8m4Dtd50_SAD9SG5VgLl0ACHabq2J5IGgYlRjjf87M-bR3lA-k5JCEYkauN49uvOWRfGcUeZJ9kITMfmoy17h8eiR-NLMuq8E3pzIPA5f_HvY-5soZL7Jpobi8kQZKosyIigsa_banCIxCwUjcna6UV68oSipGcVqXygmjcdIjhKORh44aZklDJdGV" alt="域"></p>
]]></content>
  </entry>
  <entry>
    <title>GTD学习总结</title>
    <url>/2020/01/22/GTD%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h5 id="引言"><a href="#引言" class="headerlink" title="引言"></a><strong>引言</strong></h5><p>GTD<em>(<strong>G</strong>etting <strong>T</strong>hings <strong>D</strong>one)</em>把你需要做的事列出来，并处理它✨✨✨</p>
<p><strong><em>真正的生产力不应该通过实现的计划目标的数量来衡量，而应该由本质上的有价值的结果来衡量。</em></strong></p>
<a id="more"></a>
<h2 id="GTD使用过程"><a href="#GTD使用过程" class="headerlink" title="GTD使用过程"></a>GTD使用过程</h2><p>学习地址：<a href="https://topbook.cc/course/detail/153" target="_blank" rel="noopener">公众号Topbook回复GTD</a></p>
<p>整个GTD的使用过程，就是对事件进行处理的过程。而它的目的如下：</p>
<ul>
<li><strong>清空大脑</strong>，要把脑中“要做什么”和“怎么做”的混乱中分隔出来</li>
<li><strong>让自己随时都能明确地知道，下一步应该做什么</strong></li>
</ul>
<p>人在短期内只能记住有限数量的事物，且要从长期记忆当中精准地获取信息是非常困难的。人脑记忆区域就像是电脑中的<a href="[https://baike.baidu.com/item/%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8/4099402?fromtitle=RAM%20&amp;fromid=144481&amp;fr=aladdin](https://baike.baidu.com/item/随机存取存储器/4099402?fromtitle=RAM &amp;fromid=144481&amp;fr=aladdin"><strong>RAM</strong></a> )，它不能如你所愿地帮你稳定存储数据，以至于你没办法快速对它们进行优先级排序，这个时候就需要一张纸，或某个软件作为稳定的外部存储器，俗话说就是好记性不如烂笔头。</p>
<p><img src="brain.PNG" alt="人脑辅助记忆"></p>
<p><img src="gtd.png" alt="GTD流程"></p>
<p>GTD将脑中要做的任务整理出来，根据分区流程分别放在七个不同清单中：</p>
<p><img src="gtd分区.PNG" alt="GTD七个分区"></p>
<h3 id="捕获-Capture-明晰-Clarify-组织-Organize"><a href="#捕获-Capture-明晰-Clarify-组织-Organize" class="headerlink" title="捕获(Capture)+明晰(Clarify)+组织(Organize)"></a>捕获(Capture)+明晰(Clarify)+组织(Organize)</h3><p><strong><em><span style="font-size:20">脑中信息收集+分区</span>：</em></strong></p>
<ul>
<li><strong>收集箱（Inbox）</strong>：需要做的事</li>
<li><span style="color:gold"><strong>项目清单</strong>（Plan project）</span>：一步做不完的事</li>
<li><span style="color:red"><strong>可能清单</strong>（Someday/Maybe）</span>：可能要做的事，在脑中有这个意向，但近期没打算要不要做。</li>
<li><span style="color:pink"><strong>等待清单</strong>（Waiting for task）</span>:需要别人帮忙做的事，但是被动的等待不利于自身进步，还需要为这件事多准备一些主动的任务以保证不耽误自己的事情。</li>
<li><span style="color:blue"><strong>执行清单</strong>（@Context task）</span>：没有具体时间，可以一步做完</li>
<li><em><span style="color:green"><strong>回收箱</strong>（Trash）</span></em>：某个任务因不可抗因素，要取消执行的，就可以放进去</li>
<li><strong>参考资料</strong>（References）</li>
<li><strong><span style="color:lightblue">日历/软件</span></strong>：有特定时间的将任务记录在日历/软件中，提前提醒自己去按时完成</li>
</ul>
<h3 id="回顾-Reflect"><a href="#回顾-Reflect" class="headerlink" title="回顾(Reflect)"></a>回顾(Reflect)</h3><p>​    做完清单后，大脑重新确认一遍自己要做的事情，任务分化是否合理可执行。</p>
<h3 id="执行-Engage"><a href="#执行-Engage" class="headerlink" title="执行(Engage)"></a>执行(Engage)</h3><p>​    为了得到想要的结果去做某件事，并且要能拿着结果去验证这件事是否达成预期，在清单中勾选完成。</p>
<p>​    执行清单就是你有明确时间和地点，且可行的任务，需要你得到结果。但在任务众多的情况下，要把握好两个原则:🏂</p>
<p>1、时间有限，人不可能面面俱到；（不应该在消耗你的身体，重视的人际关系，家庭的条件下完成任务，因为人的幸福感是人一生最重要的）</p>
<p>2、尽可能做离你目标更近的事情。（人只有拥有明确的目标，才能拥有有更充实更快乐的人生）</p>
<h2 id="GTD-任务执行的注意事项"><a href="#GTD-任务执行的注意事项" class="headerlink" title="GTD-任务执行的注意事项"></a>GTD-任务执行的注意事项</h2><p>1、能被放进执行清单的，都应该是能一步搞定的。如果时间过长，应该要反思原因，并在有条件的情况下记录。</p>
<p>2、做方案、做计划是每个人的必修课。<strong>”怎么做“是方法和技巧+”为什么“、”怎么来的“才是和计划相关的。</strong></p>
<p>3、<span style="color:red">做好时间预估</span>，分配番茄钟，以0.5个番茄钟为基础</p>
<p>4、为特定的事件预留时间。</p>
<p>5、一次只能处理一件事，别被打断。</p>
<p><img src="gtd事件处理顺序.png" alt="gtd事件处理顺序"></p>
]]></content>
      <categories>
        <category>GTD</category>
      </categories>
      <tags>
        <tag>GTD</tag>
      </tags>
  </entry>
  <entry>
    <title>BootStrap插件</title>
    <url>/2020/01/16/BootStrap%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>​    Bootstrap 自带 12 种 jQuery 插件，扩展了功能，可以给站点添加更多的互动。 </p>
<a id="more"></a>
<h3 id="插件概述"><a href="#插件概述" class="headerlink" title="插件概述"></a>插件概述</h3><p>​    BootStrap除了包含丰富的Web组件之外，如下拉菜单、按钮组、分页等，还包括一些JavaScript的插件。插件为BootStrap的组件赋予了生命。</p>
<p>​    因为BootStrap中的JavaScript插件都是依赖于jQuery库，所以不论是单独导入还是一次性导入之前必须先导入jQuery库。</p>
<h4 id="导入方式"><a href="#导入方式" class="headerlink" title="导入方式"></a>导入方式</h4><p>【一次性导入】</p>
<p>​        BootStrap提供了一个单一的文件，这个文件夹包含了BootSrap的所有JavaScript的插件，即bootstrap.js(压缩版本：bootstrap.min.js)</p>
<p>【单独导入】</p>
<p>​        为方便单独导入特效文件，为BootStrap提供了12种JavaScript插件，他们分别是：</p>
<p>​        ☑ <strong><em>动画过渡</em></strong>（Transitions）:对应的插件文件“transition.js”</p>
<p>　　☑ <strong><em>模态弹窗</em></strong>（Modal）:对应的插件文件“modal.js”</p>
<p>​        ☑ <strong><em>下拉菜单</em></strong>（Dropdown）：对应的插件文件“dropdown.js”</p>
<p>　　☑ <strong><em>滚动侦测</em></strong>（Scrollspy）：对应的插件文件“scrollspy.js”</p>
<p>　　☑ <strong><em>选项卡</em></strong>（Tab）：对应的插件文件“tab.js”</p>
<p>　　☑ <strong><em>提示框</em></strong>（Tooltips）：对应的插件文件“tooltop.js”</p>
<p>　　☑ <strong><em>弹出框</em></strong>（Popover）：对应的插件文件“popover.js”</p>
<p>　　☑ <strong><em>警告框</em></strong>（Alert）：对应的插件文件“alert.js”</p>
<p>　　☑ <strong><em>按钮</em></strong>（Buttons）：对应的插件文件“button.js”</p>
<p>　　☑ <strong><em>折叠/手风琴</em></strong>（Collapse）：对应的插件文件“collapse.js”</p>
<p>　　☑ <strong><em>图片轮播</em></strong>（Carousel）：对应的插件文件“carousel.js”</p>
<p>　　☑ <strong><em>自动定位浮标</em></strong>（Affix）：对应的插件文件“affix.js”</p>
<h4 id="data-属性"><a href="#data-属性" class="headerlink" title="data-*属性"></a>data-*属性</h4><p>​        所有的BootStrap的插件都可以不需要在页面上写脚本调用代码，包括插件函数，都是以<code>data-参数名=&quot;值&quot;</code>的形式出现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"button"</span> <span class="attr">aria-pressed</span>=<span class="string">"false"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">  Single toggle</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​        以上当我点击按钮时会自动加载 <code>.action</code> 样式，再次点击取消样式。而实现这一切要归于以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>)</span><br><span class="line">  .on(<span class="string">'click.bs.button.data-api'</span>, <span class="string">'[data-toggle^="button"]'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $btn = $(e.target)</span><br><span class="line">    <span class="keyword">if</span> (!$btn.hasClass(<span class="string">'btn'</span>)) $btn = $btn.closest(<span class="string">'.btn'</span>)</span><br><span class="line">    Plugin.call($btn, <span class="string">'toggle'</span>)</span><br><span class="line">    e.preventDefault()</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'focus.bs.button.data-api blur.bs.button.data-api'</span>, <span class="string">'[data-toggle^="button"]'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    $(e.target).closest(<span class="string">'.btn'</span>).toggleClass(<span class="string">'focus'</span>, /^focus(<span class="keyword">in</span>)?$/.test(e.type))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>​        这里的 <code>click.bs.button.data-api</code> 带有多级的事件命名空间，虽然不太会有重复的事件名称存在，但是如果你有洁癖不想bootstrap监控这些事件，我们可以直接注销掉，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).off(<span class="string">'.bs'</span>); <span class="comment">// 所有bootstrap监控事件</span></span><br><span class="line">$(<span class="built_in">document</span>).off(<span class="string">'click.bs.button'</span>); <span class="comment">// 只对button插件有效</span></span><br></pre></td></tr></table></figure>
<h4 id="API接口"><a href="#API接口" class="headerlink" title="API接口"></a>API接口</h4><p>​        bootstrap插件都是<strong>单一入口</strong>、<strong>可链接式</strong>。比如我们可以调用一个button插件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).button(<span class="string">'loading'</span>).addClass(<span class="string">'active'</span>)</span><br></pre></td></tr></table></figure>
<p>​        所有的方法都可以接受一个可选的选项对象作为参数，或者一个代表特定方法的字符串，或者不带任何参数（这种情况下，将会初始化插件为默认行为），如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化为默认行为，不带任何参数</span></span><br><span class="line">$(<span class="string">"#myModal"</span>).modal()    </span><br><span class="line"><span class="comment">// 初始化为不支持键盘，带可选的选项对象               </span></span><br><span class="line">$(<span class="string">"#myModal"</span>).modal(&#123; <span class="attr">keyboard</span>: <span class="literal">false</span> &#125;)  </span><br><span class="line"><span class="comment">// 初始化并立即调用 show，带代表特定方法的字符串</span></span><br><span class="line">$(<span class="string">"#myModal"</span>).modal(<span class="string">'show'</span>)</span><br></pre></td></tr></table></figure>
<h4 id="避免命名空间冲突"><a href="#避免命名空间冲突" class="headerlink" title="避免命名空间冲突"></a>避免命名空间冲突</h4><p>​        某些时候Bootstrap插件可能需要与其他UI插件一起使用。在这种情况下，可能会发生命名空间冲突。如果不幸发生了这种情况，你可以通过插件的.noConflict方法恢复其原始值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 $.fn.button 之前所赋的值</span></span><br><span class="line"><span class="keyword">var</span> bootstrapButton = $.fn.button.noConflict() </span><br><span class="line"><span class="comment">// 为 $().bootstrapBtn 赋予 Bootstrap 功能           </span></span><br><span class="line">$.fn.bootstrapBtn = bootstrapButton</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="模态框（Modal）"><a href="#模态框（Modal）" class="headerlink" title="模态框（Modal）"></a>模态框（Modal）</h3><p>​        模态框是覆盖在父窗体上的子窗体。通常，目的是显示来自一个单独的源的内容，可以在不离开父窗体的情况下有一些互动。子窗体可以提供信息、交互等。</p>
<blockquote>
<p>​        使用静态的模态窗口步骤：</p>
<p>​        1、创建一个触发器，可以是按钮或者链接。通过data属性，在控制器元素上设置属性<strong>“data-toggle=modal”</strong>,同时设置data-target=”#id”或href=”#id”来指定要切换的特定模态框。</p>
<p>​        2、用.modal声明一个div为模态窗口，可以设置转换效果如：.fade（淡入淡出），用属性 <strong>aria-hidden=”true”</strong> 用于保持模态窗口不可见。</p>
<p>​        3、modal窗体内部设计：modal-dialog &gt; modal-content &gt; modal-header &gt; modal-title &gt; modal-body &gt; modal-footer; 用data-dismiss属性来关闭modal</p>
</blockquote>
<p>下面是一些可与 modal() 一起使用的有用的方法。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>Options:</strong> .modal(options)</td>
<td style="text-align:left">把内容作为模态框激活。接受一个可选的选项对象。</td>
<td style="text-align:left"><code>$(&#39;#identifier&#39;).modal({ keyboard: false })</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>Toggle:</strong> .modal(‘toggle’)</td>
<td style="text-align:left">手动切换模态框。</td>
<td style="text-align:left"><code>$(&#39;#identifier&#39;).modal(&#39;toggle&#39;)</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>Show:</strong> .modal(‘show’)</td>
<td style="text-align:left">手动打开模态框。</td>
<td style="text-align:left"><code>$(&#39;#identifier&#39;).modal(&#39;show&#39;)</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>Hide:</strong> .modal(‘hide’)</td>
<td style="text-align:left">手动隐藏模态框。</td>
<td style="text-align:left"><code>$(&#39;#identifier&#39;).modal(&#39;hide&#39;)</code></td>
</tr>
</tbody>
</table>
<p>下表列出了模态框中要用到事件。这些事件可在函数中当钩子使用。</p>
<table>
<thead>
<tr>
<th style="text-align:left">事件</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">show.bs.modal</td>
<td style="text-align:left">在调用 show 方法后触发。</td>
<td style="text-align:left"><code>$(&#39;#identifier&#39;).on(&#39;show.bs.modal&#39;, function () {  // 执行一些动作... })</code></td>
</tr>
<tr>
<td style="text-align:left">shown.bs.modal</td>
<td style="text-align:left">当模态框对用户可见时触发（将等待 CSS 过渡效果完成）。</td>
<td style="text-align:left"><code>$(&#39;#identifier&#39;).on(&#39;shown.bs.modal&#39;, function () {  // 执行一些动作... })</code></td>
</tr>
<tr>
<td style="text-align:left">hide.bs.modal</td>
<td style="text-align:left">当调用 hide 实例方法时触发。</td>
<td style="text-align:left"><code>$(&#39;#identifier&#39;).on(&#39;hide.bs.modal&#39;, function () {  // 执行一些动作... })</code></td>
</tr>
<tr>
<td style="text-align:left">hidden.bs.modal</td>
<td style="text-align:left">当模态框完全对用户隐藏时触发。</td>
<td style="text-align:left"><code>$(&#39;#identifier&#39;).on(&#39;hidden.bs.modal&#39;, function () {  // 执行一些动作... })</code></td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 按钮触发模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-lg"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#myModal"</span>&gt;</span>开始演示模态框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>模态框（Modal）标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span>点击关闭按钮检查事件功能。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dialog --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//通过javascript方式关闭</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#myModal'</span>).modal(<span class="string">'hide'</span>)</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#myModal'</span>).on(<span class="string">'hide.bs.modal'</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'嘿，我听说您喜欢模态框...'</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="下拉菜单（Dropdown）"><a href="#下拉菜单（Dropdown）" class="headerlink" title="下拉菜单（Dropdown）"></a>下拉菜单（Dropdown）</h3><pre><code>使用下拉菜单（Dropdown）插件，您可以向任何组件（比如导航栏、标签页、胶囊式导航菜单、按钮等）添加下拉菜单。 
</code></pre><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul>
<li><strong>通过data属性</strong>：向链接和按钮添加data-toggle=”dropdown”来切换下拉菜单</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">data-target</span>=<span class="string">"#"</span>&gt;</span>下拉菜单（Dropdown）触发器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">role</span>=<span class="string">"menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"dLabel"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>通过JavaScript</strong>：通过JavaScript调用下拉菜单切换</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.dropdown-toggle'</span>).dropdown()</span><br></pre></td></tr></table></figure>
<p>在导航栏中实现下拉菜单效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>SVN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">                    Java </span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>jmeter<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>EJB<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Jasper Report<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>分离的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>另一个分离的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图</p>
<p><img src="dropdown.png" alt></p>
<h3 id="轮播（Carousel）"><a href="#轮播（Carousel）" class="headerlink" title="轮播（Carousel）"></a>轮播（Carousel）</h3><pre><code>Bootstrap 轮播（Carousel）插件是一种灵活的响应式的向站点添加滑块的方式。除此之外，内容也是足够灵活的，可以是图像、内嵌框架、视频或者其他您想要放置的任何类型的内容。 
</code></pre><p>源代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myCarousel"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 轮播（Carousel）指标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 轮播（Carousel）项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/wp-content/uploads/2014/07/slide1.png"</span> <span class="attr">alt</span>=<span class="string">"First slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span>标题 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/wp-content/uploads/2014/07/slide2.png"</span> <span class="attr">alt</span>=<span class="string">"Second slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span>标题 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/wp-content/uploads/2014/07/slide3.png"</span> <span class="attr">alt</span>=<span class="string">"Third slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span>标题 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 轮播（Carousel）导航 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/07/1104DC8B-417B-419C-832A-D6B526086B48.png" alt="轮播（Carousel）插件的标题"> </p>
<p>参考链接：</p>
<p>1、<a href="https://www.runoob.com/bootstrap/bootstrap-plugins-overview.html" target="_blank" rel="noopener">菜鸟教程BootStrap3 插件</a></p>
<p>2、<a href="https://www.cnblogs.com/xiaohuochai/p/7128599.html" target="_blank" rel="noopener">BootStrap插件概述</a></p>
<p>3、<a href="https://getbootstrap.net/examples/" target="_blank" rel="noopener">一些bootstrap示例</a></p>
<p>4、<a href="https://www.webmoban.net/" target="_blank" rel="noopener">网页模板</a></p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端框架</tag>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring &amp; Spring MVC &amp; Mybatis</title>
    <url>/2020/01/07/Spring/</url>
    <content><![CDATA[<h3 id="引言🐱‍👓"><a href="#引言🐱‍👓" class="headerlink" title="引言🐱‍👓"></a>引言🐱‍👓</h3><p><strong>Spring</strong></p>
<p>Spring就像是整个项目中装配bean的大工厂，在配置文件中可以指定使用特定的参数去调用实体类的构造方法来实例化对象。也可以称之为项目中的粘合剂。Spring的核心思想是IoC（控制反转），即不再需要程序员去显式地<code>new</code>一个对象，而是让Spring框架帮你来完成这一切。<br> <strong>SpringMVC</strong></p>
<p>SpringMVC在项目中拦截用户请求，它的核心Servlet即DispatcherServlet承担中介或是前台这样的职责，将用户请求通过HandlerMapping去匹配Controller，Controller就是具体对应请求所执行的操作。SpringMVC相当于SSH框架中struts。<br> <strong>mybatis</strong></p>
<p>mybatis是对jdbc的封装，它让数据库底层操作变的透明。mybatis的操作都是围绕一个sqlSessionFactory实例展开的。mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库所需进行的sql语句映射。在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession，再执行sql命令。</p>
<p>页面发送请求给控制器，控制器调用业务层处理逻辑，逻辑层向持久层发送请求，持久层与数据库交互，后将结果返回给业务层，业务层将处理逻辑发送给控制器，控制器再调用视图数据。</p>
<a id="more"></a>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p><strong>Spring</strong>是一个基于<code>IOC</code>和<code>AOP</code>的结构J2EE系统的框架。</p>
<p><code>AOP</code>（Aspect Oriented Program）面向切面编程。</p>
<!--more-->
<p>Spring 所依赖的Jar包</p>
<blockquote>
<p><strong>spring-core</strong>：是Spring的核心工具包<br><strong>spring-cji</strong>：是核心包所需的依赖包，<br><strong>spring-aop</strong>：Spring的面向切面编程，提供AOP（面向切面编程）的实现<br><strong>spring-beans</strong>：Spring IOC的基础实现，包含访问配置文件、创建和管理bean等<br><strong>spring-context</strong>：在基础IOC功能上提供扩展服务，此外还提供许多企业级服务的支持，有邮件服务、任务调度、JNDI定位，EJB集成、远程访问、缓存以及多种视图层框架的支持<br><strong>spring-expression</strong>：spring表达式语言，就像EL表达式一样的东西<br><strong>commons-logging</strong>：这个是只是一个日志包，不用理会 </p>
</blockquote>
<h3 id="Spring模块介绍"><a href="#Spring模块介绍" class="headerlink" title="Spring模块介绍"></a>Spring模块介绍</h3><ul>
<li>Core Container(核心容器)：spring-core, spring-beans, spring-context, springcontext-support, and spring-expression<ul>
<li>spring-core, spring-beans： 提供框架的基本部分，包括IoC和依赖项注入特性</li>
<li>spring-context：为core,bean模块提供坚实基础</li>
<li>spring-context-support：整合支持第三方库到spring中，包括：caching缓存,mailing,scheduling调度,template engines模板</li>
<li>spring-expression：提供在运行时查询和操作对象图的强大的表达式语言</li>
</ul>
</li>
<li>AOP and Instrumentation：切面编程<ul>
<li>spring-aop：</li>
<li>spring-aspects：</li>
<li>spring-instrument：</li>
</ul>
</li>
<li>Messaging<ul>
<li>spring-messaging：</li>
</ul>
</li>
<li>Data Access/Integration<ul>
<li>spring-jdbc：</li>
<li>spring-tx：</li>
<li>spring-orm：</li>
<li>spring-oxm：</li>
<li>spring-jms：</li>
</ul>
</li>
<li>Web<ul>
<li>spring-web, spring-webmvc, spring-websocket, and springwebmvc-portlet modules.</li>
</ul>
</li>
<li>Test<ul>
<li>spring-test</li>
</ul>
</li>
</ul>
<h3 id="IOC-DI"><a href="#IOC-DI" class="headerlink" title="IOC/DI"></a>IOC/DI</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>IOC</code>（<em>Inversion Of Control</em>）反转控制是Spring的基础，简单来说就是将通过new构造方法创建对象，变成交由Spring创建。</p>
<p><code>DI</code>（<em>Dependency Inject</em>）依赖注入，是拿到对象的属性，已经被注入好相关的值，直接使用即可。</p>
<p> <strong><em>控制反转是目的、依赖注入是手段，它提供一种机制，将需要依赖（低层模块）对象的引用传递给被依赖（高层模块）对象 。</em></strong></p>
<p>+++</p>
<h4 id="bean的种类"><a href="#bean的种类" class="headerlink" title="bean的种类"></a>bean的种类</h4><blockquote>
<p><strong>普通的bean</strong>：<bean id class="A">，spring直接创建A的实例并返回。</bean></p>
<p><strong>FactoryBean</strong>：是一个特殊的Bean，具有工厂生产对象的能力，只能生成特定的对象。bean必须思想FactoryBean接口，此接口提供方法getObject()用于返回特定的bean </p>
<p>​        <bean id class="FB">先创建FB实例，使用调用getObject（）方法，并返回方法的返回值            ==》FB fb=new FB();        return fb.getObject(); </bean></p>
</blockquote>
<hr>
<h4 id="属性依赖注入"><a href="#属性依赖注入" class="headerlink" title="属性依赖注入"></a>属性依赖注入</h4><h5 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a><strong>setter注入</strong></h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"personid"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span>&gt;</span><br><span class="line"></span><br><span class="line">​		&lt;property name="pname" value=""&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">​		&lt;property name=<span class="string">"age"</span>&gt;</span><br><span class="line"></span><br><span class="line">​				&lt;value&gt;123&lt;/value&gt;</span><br><span class="line"></span><br><span class="line">​		&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h5 id="p命名空间"><a href="#p命名空间" class="headerlink" title="p命名空间"></a>p命名空间</h5><blockquote>
<p>对”setter“方法注入进行简化，替换<property name="属性名">,而是在<bean p:属性名="普通值" p:属性名-ref="引用值"></bean></property></p>
<p>p命名空间使用前提是必须添加命名空间，引用约束：xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/p&quot;</a></p>
</blockquote>
<h5 id="spEL"><a href="#spEL" class="headerlink" title="spEL"></a>spEL</h5><blockquote>
<p>对<property>进行统一编程，所有的内容都使用value</property></p>
<property name value="#{表达式}">

<p>#{123}、#{‘Jack&amp;Rose’}：数字、字符串</p>
<p>#{beanId}：另一个bean引用</p>
<p>#{beanId.propName}：操作数据</p>
<p>#{beanId.toString}：执行方法</p>
<p>#{T(类).字段|方法}：静态字段或方法</p>
</property></blockquote>
<h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><blockquote>
<p>集合的注入都是给<property>添加子标签</property></p>
<p>​                    数组：<array></array></p>
<p>​                    List：<list></list></p>
<p>​                    Set：<set></set></p>
<p>​                    properties：<props></props></p>
<p>普通数据：<value></value></p>
<p>引用数据：<ref></ref></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bean的属性"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span>（<span class="tag">&lt;<span class="name">list</span>&gt;</span><span class="tag">&lt;<span class="name">set</span>&gt;</span>同理）</span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bean的属性"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bean的属性"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"XXX"</span> &gt;</span>XXX<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="装配bean基于注解"><a href="#装配bean基于注解" class="headerlink" title="装配bean基于注解"></a>装配bean基于注解</h4><blockquote>
<p> 注解：就是一个类，取代@注解名称 </p>
<p>开发中：使用注解，取代xml配置文件 </p>
<p>需要引入dtd（命名空间的声明） </p>
<hr>
<p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;            </p>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemalocation="http://www.springframework.org/schema/beans                                          http://www.springframework.org/schema/beans/spring-beans.xsd                                          http://www.springframework.org/schema/context                                          http://www.springframework.org/schema/context/spring-context.xsd"><br><br> <!-- 组件扫描，扫描含有注解的类 --><br><br>&lt;context:component-scan base-package=”bean层包名”&gt;&lt;/context:component-scan&gt;<br><br></beans> 

<hr>
</blockquote>
<p>1、<strong>@component</strong>取代<code>&lt;bean class=&quot;&quot;&gt;</code></p>
<p>​            @component(“id”)取代<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></p>
<p>2、web开发，提供了3个<strong>@component注解衍生注解</strong>（功能一样）</p>
<p>​                @Repository：dao层</p>
<p>​                @Service：service层</p>
<p>​                @Controller：web层</p>
<hr>
<h4 id="Spring-IOC实例"><a href="#Spring-IOC实例" class="headerlink" title="Spring IOC实例"></a>Spring IOC实例</h4><p>​    1.导入相关jar包（以Maven形式展现）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    2.bean层类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    3.新建一个Spring配置文件（applicationContext（spring）.xml）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 该文件中产生的所有对象，被Spring放入了一个称之为springIOC容器的地方 --&gt;</span><br><span class="line">&lt;!-- id：唯一标识符 <span class="class"><span class="keyword">class</span>：<span class="title">JavaBean</span>的<span class="title">class</span>对象 --&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">bean</span> <span class="title">class</span></span>=“bean.Category<span class="string">" id="</span>category<span class="string">" name="</span>c<span class="string">"&gt;</span></span><br><span class="line"><span class="string">	&lt;property name="</span>name<span class="string">" value="</span><span class="number">1</span><span class="string">"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="string">&lt;/bean&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    4.测试类中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Category c =(Category)context.getBean(<span class="string">"c"</span>); System.out.println(c.getName());</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="aop术语"><a href="#aop术语" class="headerlink" title="aop术语"></a>aop术语</h4><blockquote>
<p>​        1.target：目标类，需要被代理的类</p>
<p>​        2.joinpoint：连接点，所谓链接点是☞那些可能被拦截的方法</p>
<p>​        3.advice：通知/增强，增强代码。例如after、before</p>
<p>​        4.pointcut：切入点，已经被加强的连接点，例如add user()</p>
<p>​        5.weaving：织入，指把增强advice应用到目标对象target来创建新的代理对象的过程</p>
<p>​        6.proxy：代理类</p>
<p>​        7.aspect：切面，是切入点pointcut和通知advice的结合</p>
</blockquote>
<h4 id="手动代理例子"><a href="#手动代理例子" class="headerlink" title="手动代理例子"></a>手动代理例子</h4><p><strong>UserService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Myaspect</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myaspect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------befor"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>MybeanFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mport java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title">creatservice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	 <span class="comment">//1.目标类</span></span><br><span class="line">         UserService userService=<span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        </span><br><span class="line">         <span class="comment">//2.切面类</span></span><br><span class="line">         Myaspect myaspect = <span class="keyword">new</span> Myaspect();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.代理类:将目标类（切入点）和切面类（通知）结合--》切面</span></span><br><span class="line">        UserService proxyService=(UserService) Proxy.newProxyInstance(</span><br><span class="line">            	<span class="comment">/**</span></span><br><span class="line"><span class="comment">            	*参数1.loader，类加载器，动态代理类运行时创建，任何类都需要类加载器将其加载到内存</span></span><br><span class="line"><span class="comment">            	*一般情况：当前类：class.getClassLoader();</span></span><br><span class="line"><span class="comment">                *    目标类实例：getClass().getClassLoader();</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                MybeanFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),</span></span><br><span class="line"><span class="class">            	/**</span></span><br><span class="line">            	*参数2.class[] interfaces 代理类需要实现的所有接口</span><br><span class="line">             	*方式<span class="number">1</span>.目标类实例：getClass().getInterfaces();   </span><br><span class="line">                注意：只能获得自己的接口，不能获得父类元素的接口</span><br><span class="line">             	*方式<span class="number">2</span>.<span class="keyword">new</span> Class[]&#123;UserService<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">             	*例如：<span class="title">jdbc</span>驱动--》<span class="title">DriverManager</span>   获得接口<span class="title">Connection</span></span></span><br><span class="line"><span class="class">            	*/</span></span><br><span class="line"><span class="class">                <span class="title">userService</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(),</span></span><br><span class="line"><span class="class">            	/**</span></span><br><span class="line"><span class="class">            	*参数3.<span class="title">InvocationHandler</span>  处理类，接口，必须进行实现类，一般采用匿名内部类</span></span><br><span class="line"><span class="class">                *提供<span class="title">invoke</span>方法，代理类的每一个方法执行时，都将调用一次<span class="title">invoke</span></span></span><br><span class="line"><span class="class">                *	参数31：<span class="title">Object</span> <span class="title">proxy</span>：代理对象</span></span><br><span class="line"><span class="class">                *	参数32：<span class="title">Method</span> <span class="title">method</span>：代理对象当前执行的方法的描述对象（反射）</span></span><br><span class="line">                *	参数33：Object[] args：方法实际参数</span><br><span class="line">            	*/</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                        myaspect.after();</span><br><span class="line">                        Object object=method.invoke(userService);</span><br><span class="line">                        myaspect.before();</span><br><span class="line">                        <span class="keyword">return</span> object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                );</span><br><span class="line">        <span class="keyword">return</span> proxyService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>test</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService u=MybeanFactory.creatservice();</span><br><span class="line">        u.add();</span><br><span class="line">        u.delete();</span><br><span class="line">        u.find();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">------after</span><br><span class="line">add---------</span><br><span class="line">------befor</span><br><span class="line">------after</span><br><span class="line">delete---------</span><br><span class="line">------befor</span><br><span class="line">------after</span><br><span class="line">find---------</span><br><span class="line">------befor</span><br></pre></td></tr></table></figure>
<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​    Spring Web MVC是一种基于Java的实现Web MVC设计模式的请求驱动类型的轻量级Web框架。即使用MVC架构模式的思想，将web层进行职责解耦，基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发。</p>
<h3 id="MVC三元组的概念"><a href="#MVC三元组的概念" class="headerlink" title="MVC三元组的概念"></a>MVC三元组的概念</h3><p>​    Model（模型）：组件等价于实体层+业务逻辑层+持久层</p>
<p>​    View（视图）：负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
<p>​    Controller（控制器）：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图。</p>
<h3 id="SpringMVC框架请求处理流程"><a href="#SpringMVC框架请求处理流程" class="headerlink" title="SpringMVC框架请求处理流程"></a>SpringMVC框架请求处理流程</h3><p><img src="springMVC.png" alt="SpringMVC请求处理流程"></p>
<h3 id="SpringMVC示例"><a href="#SpringMVC示例" class="headerlink" title="SpringMVC示例"></a>SpringMVC示例</h3><p>Step 01：导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javaee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Step 02：创建控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest        请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse       响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView mv=<span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        mv.addObject(<span class="string">"user"</span>,<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">        mv.setViewName(<span class="string">"/jsp/index.jsp"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Step 03：创建大配置文件（applicationContext-mvc.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将Controller注入到容器中   id就是浏览器请求地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/firstController"</span> <span class="attr">class</span>=<span class="string">"com.springmvc.controller.FirstController"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Step 04：中央调度器（web.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--中央调度器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--初始化配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:appliocationContext-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制初始化时机--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--制造拦截器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Step 05：index.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> language=<span class="string">"java"</span> pageEncoding=<span class="string">"UTF-8"</span> contentType=<span class="string">"text/html; UTF-8"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">$&#123;user&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p>​    <code>mybatis</code>是对jdbc的封装，它让数据库底层操作变的透明。<code>mybatis</code>的操作都是围绕一个<code>sqlSessionFactory</code>实例展开的。mybatis通过配置文件关联到各实体类的<strong>Mapper</strong>文件，<em>Mapper文件中配置了每个类对数据库所需进行的sql语句映射。</em>在每次与数据库交互时，通过<code>sqlSessionFactory</code>拿到一个<code>sqlSession</code>，再执行sql命令。</p>
<p><strong>mybatis-config.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">      <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 引入jdbc.properties配置文件，获取连接数据库信息，推荐 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 连接数据库信息也可以直接写这里，如以下写法，不推荐 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;properties&gt;       &lt;property name="jdbc.driverClassName" value="com.mysql.jdbc.Driver"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbc.url" value="jdbc:mysql://localhost:3306/db_mybatis"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbc.username" value="root"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbc.password" value="123456"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/properties&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 取别名，在StudentMapper.xml的parameterType属性中就不用写全类名 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 方式一，不推荐 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;typeAliases&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="Student" type="com.java1234.model.Student"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/typeAliases&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 方式二，推荐，扫描此包下所有实体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zhu.entity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 读取映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper resource="com/zhu/mappers/StudentMapper.xml" /&gt; 不推荐--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper class="com.zhu.mappers.StudentMapper"/&gt; 不推荐--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 推荐，扫描此包下所有映射文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zhu.mappers"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><p>​    CRUD是指计算处理时的<strong>增加（<span style="color:blue">C</span></strong>reate）<strong>、读取（<span style="color:blue">R</span></strong>etrieve）<strong>、更新（<span style="color:blue">U</span></strong>pdate）和<strong>删除（<span style="color:blue">D</span></strong>elete）首字母的缩写，crud主要被用在描述软件系统中数据库或持久层的基本操作功能。</p>
<p>​    对于具体的数据库表操作建立一个xml配置文件，提供CRUD对应的sql语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">	<span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--parameterType指定输入参数类型，mybatis 通过 ognl 从输入对象中获取参数值拼接在 sql 中。--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"实体类包路径"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add+表名"</span> <span class="attr">parameterType</span>=<span class="string">"属性值数据类型"</span>&gt;</span></span><br><span class="line">        	insert into 表名(属性值) values(#&#123;name&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"get+表名"</span> <span class="attr">parameterType</span>=<span class="string">"属性值数据类型"</span>&gt;</span></span><br><span class="line">        	select * from 表名 where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete+表名"</span> <span class="attr">parameterType</span>=<span class="string">"属性值数据类型"</span>&gt;</span></span><br><span class="line">        	delete from 表名(属性值) where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update+表名"</span> <span class="attr">parameterType</span>=<span class="string">"属性值数据类型"</span>&gt;</span></span><br><span class="line">        	update 表名 set name=#&#123;name&#125; where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="更多查询"><a href="#更多查询" class="headerlink" title="更多查询"></a>更多查询</h3><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>mysql写法：</p>
<blockquote>
<p>select * from 表名 where name like concat(‘%’,#{0},’%’)</p>
</blockquote>
<p>其中含义是指，具体匹配变量由后面输入。</p>
<p>oracle写法：</p>
<blockquote>
<p>select * from 表名 where name like ‘%’||#{0}||’%’</p>
</blockquote>
<p>调用查询：<strong><em>sqlSession.selectList(“id”,”parm”)</em></strong></p>
<p>selectOne 查询一条记录</p>
<p>selectList 查询一条或多条记录，返回一个List集合</p>
<h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><p>​    使用and，or，！逻辑连接词来并列查询。</p>
<p>​    具体使用：</p>
<blockquote>
<p>Map&lt;String,Object&gt; params = new HashMap&lt;&gt;();</p>
<p>params.put(“p1”,value);</p>
<p>params.put(“p2”,value);</p>
<p>List<ptype> list = sqlsession.selectList(“sql Id”,params);</ptype></p>
</blockquote>
<h4 id="多表关联查询"><a href="#多表关联查询" class="headerlink" title="多表关联查询"></a>多表关联查询</h4><h5 id="一对一关联查询"><a href="#一对一关联查询" class="headerlink" title="一对一关联查询"></a>一对一关联查询</h5><p>给student类增加一个address属性，一个学生对应一个地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String sheng;</span><br><span class="line">    <span class="keyword">private</span> String shi;</span><br><span class="line">    <span class="keyword">private</span> String qu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据student的id查询学生，查询结果带有地址信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findStudentWithAddress</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AddressMapper.xml</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">"findById"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"Address"</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> t_address <span class="keyword">where</span> id=<span class="meta">#&#123;id&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>
<p>StudentMapper.xml:<br>因为student新增了一个Address类型的属性，查询结果对应了student和Address两个类，属于复合类型，因此要定义resultMap来接收。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Student"</span> <span class="attr">id</span>=<span class="string">"StudentResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">--property表示实体类中的属性名，column是数据库中对应的字段名--</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"address"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">"addressId"</span></span></span><br><span class="line"><span class="tag">   				 <span class="attr">select</span>=<span class="string">"com.zhu.mappers.AddressMapper.findById"</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在select标签中引用这个resultMap:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentWithAddress"</span> <span class="attr">resultMap</span>=<span class="string">"StudentResult"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">     select * from t_student t1,t_address t2 where t1.addressId=t2.id and t1.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="一对多关联查询"><a href="#一对多关联查询" class="headerlink" title="一对多关联查询"></a>一对多关联查询</h5><p>一对多，多个学生属于一个年纪，即学生为n，年纪为1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findByGradeId</span><span class="params">(Integer gradeId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一对一的联系—StudentMapper.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Student"</span> <span class="attr">id</span>=<span class="string">"StudentResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property="grade"表示学生的grade属性，column="groupId"表示外键，select指查询年纪方法的全类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assiation</span> <span class="attr">id</span>=<span class="string">"findByGradeId"</span> <span class="attr">resultMap</span>=<span class="string">"StudentResult"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">assiation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByGradeId"</span> <span class="attr">resultMap</span>=<span class="string">"StudentResult"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">    select * from t_student </span><br><span class="line">        where gradeId=#&#123;gradeId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GradeMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一对多的联系—GradeMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Grade"</span> <span class="attr">id</span>=<span class="string">"GradeResult"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"gradeName"</span> <span class="attr">column</span>=<span class="string">"gradeName"</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--property="students"表示grade的student属性，column="id"，此ID是学生ID--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"com.zhu.mappers.StudentMapper.findByGradeId"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">用法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">if</td>
<td style="text-align:center"><code>&lt;if test=&quot;name!=null&quot;&gt;</code><br>拼接字符串<code>&lt;/if&gt;</code><br>用于多条件查询</td>
</tr>
<tr>
<td style="text-align:center">where</td>
<td style="text-align:center"><code>&lt;where&gt;</code>标签会进行自动判断<br>如果任何条件都不成立，那么就在sql语句里就不会出现where关键字<br>如果有任何条件成立，会自动去掉多出来的 and 或者 or。<br></td>
</tr>
<tr>
<td style="text-align:center">choose&gt;when</td>
<td style="text-align:center">用于表示if&gt;else作用</td>
</tr>
<tr>
<td style="text-align:center">foreach</td>
<td style="text-align:center">foreach标签常用于in这样的语法中（表示限定范围内）</td>
</tr>
<tr>
<td style="text-align:center">bind</td>
<td style="text-align:center">先进行字符拼接，后面用其别名就行</td>
</tr>
</tbody>
</table>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>mybatis也可以把sql语句以注解形式写在dao层的接口方法上：</p>
<h4 id="注解版的CRUD"><a href="#注解版的CRUD" class="headerlink" title="注解版的CRUD"></a>注解版的CRUD</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="meta">@Insert</span>(<span class="string">"insert into t_student values(null,#&#123;name&#125;,#&#123;age&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"> <span class="meta">@Update</span>(<span class="string">"update t_student set name=#&#123;name&#125;,age=#&#123;age&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from t_student where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_student where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_student"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="meta">@Result</span>(id=<span class="keyword">true</span>,column=<span class="string">"id"</span>,property=<span class="string">"id"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column=<span class="string">"name"</span>,property=<span class="string">"name"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column=<span class="string">"age"</span>,property=<span class="string">"age"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findStudents</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="注解版关联查询"><a href="#注解版关联查询" class="headerlink" title="注解版关联查询"></a>注解版关联查询</h4><h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h5><p> studentMapper.java </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from t_student where gradeId=#&#123;gradeId&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="meta">@Result</span>(id=<span class="keyword">true</span>,column=<span class="string">"id"</span>,property=<span class="string">"id"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column=<span class="string">"name"</span>,property=<span class="string">"name"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column=<span class="string">"age"</span>,property=<span class="string">"age"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column=<span class="string">"addressId"</span>,property=<span class="string">"address"</span>,one=<span class="meta">@One</span>(select=<span class="string">"com.zhu.mappers.AddressMapper.findById"</span>))</span><br><span class="line">            &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">selectStudentByGradeId</span><span class="params">(<span class="keyword">int</span> gradeId)</span></span>;</span><br></pre></td></tr></table></figure>
<h5 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h5><p>gradeMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GradeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_grade where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="meta">@Result</span>(id=<span class="keyword">true</span>,column=<span class="string">"id"</span>,property=<span class="string">"id"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column=<span class="string">"gradeName"</span>,property=<span class="string">"gradeName"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column=<span class="string">"id"</span>,property=<span class="string">"students"</span>,many=<span class="meta">@Many</span>(select=<span class="string">"com.java1234.mappers.StudentMapper.selectStudentByGradeId"</span>))</span><br><span class="line">            &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="构造器版CRUD"><a href="#构造器版CRUD" class="headerlink" title="构造器版CRUD"></a>构造器版CRUD</h3><p>sql语句构造器，就是要把sql语句写在一个类中，然后在接口方法上引用这个类（作用是方便维护），请看下面的代码：</p>
<p><strong>1、构造器类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDynaSqlProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertStudent</span><span class="params">(<span class="keyword">final</span> Student student)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                INSERT_INTO(<span class="string">"t_student"</span>);</span><br><span class="line">                <span class="keyword">if</span>(student.getName()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    VALUES(<span class="string">"name"</span>, <span class="string">"#&#123;name&#125;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(student.getAge()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    VALUES(<span class="string">"age"</span>, <span class="string">"#&#123;age&#125;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateStudent</span><span class="params">(<span class="keyword">final</span> Student student)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                UPDATE(<span class="string">"t_student"</span>);</span><br><span class="line">                <span class="keyword">if</span>(student.getName()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    SET(<span class="string">"name=#&#123;name&#125;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(student.getAge()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    SET(<span class="string">"age=#&#123;age&#125;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                WHERE(<span class="string">"id=#&#123;id&#125;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                DELETE_FROM(<span class="string">"t_student"</span>);</span><br><span class="line">                WHERE(<span class="string">"id=#&#123;id&#125;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStudentById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                SELECT(<span class="string">"*"</span>);</span><br><span class="line">                FROM(<span class="string">"t_student"</span>);</span><br><span class="line">                WHERE(<span class="string">"id=#&#123;id&#125;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findStudents</span><span class="params">(<span class="keyword">final</span> Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                SELECT(<span class="string">"*"</span>);</span><br><span class="line">                FROM(<span class="string">"t_student"</span>);</span><br><span class="line">                StringBuffer sb=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">                <span class="keyword">if</span>(map.get(<span class="string">"name"</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    sb.append(<span class="string">" and name like '"</span>+map.get(<span class="string">"name"</span>)+<span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(map.get(<span class="string">"age"</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    sb.append(<span class="string">" and age="</span>+map.get(<span class="string">"age"</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!sb.toString().equals(<span class="string">""</span>))&#123;</span><br><span class="line">                    WHERE(sb.toString().replaceFirst(<span class="string">"and"</span>, <span class="string">""</span>));                   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2、在接口方法上引用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InsertProvider</span>(type=StudentDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"insertStudent"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@UpdateProvider</span>(type=StudentDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"updateStudent"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@DeleteProvider</span>(type=StudentDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"deleteStudent"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SelectProvider</span>(type=StudentDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"getStudentById"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SelectProvider</span>(type=StudentDynaSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"findStudents"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findStudents</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
        <category>Mybatis</category>
        <category>Spring MVC</category>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>elipse调试Java程序技巧</title>
    <url>/2019/12/30/elipse%E8%B0%83%E8%AF%95Java%E7%A8%8B%E5%BA%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p><code>eclipse</code>调试技巧总结</p>
<a id="more"></a>
<h4 id="0、提要"><a href="#0、提要" class="headerlink" title="0、提要"></a>0、提要</h4><ul>
<li>不要使用System.out.println作为调试工具</li>
<li>启用所有组件的详细的日志记录级别</li>
<li>使用一个日志分析器来阅读日志  </li>
</ul>
<p><strong>eclipse调试快捷键</strong></p>
<blockquote>
<p>F5    跳进当前执行的方法中（Step Into）</p>
<p>F6    跳过该行继续执行（Step Over）</p>
<p>F7    从方法中跳出继续执行（Step Return）</p>
<p>F8    全部运行通过，从调试状态中恢复（Resume）</p>
<p>Ctrl+R    运行当前选中行（Run to Line）</p>
</blockquote>
<hr>
<h4 id="1、逻辑结构"><a href="#1、逻辑结构" class="headerlink" title="1、逻辑结构"></a>1、逻辑结构</h4><p>​    逻辑结构主要用来展示map之类的collection数据结构存储的值的，它只展示存储值的逻辑部分，而屏蔽了数据结构详细的内部结构，更方便我们查看map之类collection结构里存储的值，推荐使用。</p>
<p>​    这个按钮就是展示逻辑结构的按钮，下面两个图，上图是不展示逻辑结构，下图是展示逻辑结构，很明显，下图的结构可读性更强，可以专注于debug的变量。<img src="逻辑结构.png" alt></p>
<hr>
<h4 id="2、条件断点或条件debug"><a href="#2、条件断点或条件debug" class="headerlink" title="2、条件断点或条件debug"></a>2、条件断点或条件debug</h4><p>​    想象一下我们平时如何添加断点，通常的做法是双击行号的左边。在debug视图中，<code>BreakPoint View</code>将所有断点都列出来，但是我们可以添加一个<code>boolean</code>类型的条件来决定断点是否被跳过。如果条件为真，在断点处程序将停止，否则断点被跳过，程序继续执行。</p>
<p><img src="2.1.png" alt></p>
<p>​    条件debug用在需要满足某种条件才会触发断点的场景，比如只有id是12345这条记录会有问题，那就当id等于12345时才触发断点，其他都放过。</p>
<p>​    右击断点选择断点属性，就能看到这样一个配置框，右边的文本区块可以填写条件代码，比如id==12345</p>
<p><img src="2.2.png" alt></p>
<hr>
<h4 id="3、异常断点"><a href="#3、异常断点" class="headerlink" title="3、异常断点"></a>3、异常断点</h4><p>​    异常断点只要用在debug某种异常的时候，可以配置当这个异常出现后才触发断点，不需要debug去寻找异常。</p>
<p>​    点击这个红圈就能弹出异常断点的窗口，会列出你系统里的所有异常类，然后选择需要断点的异常就OK</p>
<p><img src="3.1.jpg" alt></p>
<p><img src="3.2.png" alt></p>
<hr>
<h4 id="4、观察点"><a href="#4、观察点" class="headerlink" title="4、观察点"></a>4、观察点</h4><p>​    他允许当一个选定的属性被访问或者被更改的时候程序执行暂停，并进行debug。最简单的办法是在类中声明成员变量的语句行号左边双击，就可以加入一个观察点。  </p>
<p><img src="4.1.png" alt></p>
<hr>
<h4 id="5、查看变量"><a href="#5、查看变量" class="headerlink" title="5、查看变量"></a>5、查看变量</h4><p>​    在选中的变量上使用<code>Ctrl+Shift+D</code> 或者 <code>Ctrl+Shift+I</code>可以查看变量值，另外我们还可以在Expressions View中添加监视。</p>
<hr>
<h4 id="6、改变变量值"><a href="#6、改变变量值" class="headerlink" title="6、改变变量值"></a>6、改变变量值</h4><p>​    我们可以在Debug的时候改变其中变量的值。在Variables View中可以按下图所示操作。</p>
<p><img src="6.1.png" alt></p>
<hr>
<h4 id="7、在Main方法中停止"><a href="#7、在Main方法中停止" class="headerlink" title="7、在Main方法中停止"></a>7、在Main方法中停止</h4><p>​    在<code>Run/Debug</code>设置中，我们可以按如下图所示的启用这个特性。程序将会在main方法的第一行停住</p>
<p><img src="7.1.png" alt></p>
<hr>
<h4 id="8、环境变量"><a href="#8、环境变量" class="headerlink" title="8、环境变量"></a>8、环境变量</h4><p>我们可以很方便的在<code>Edit Conriguration</code>对话框中添加环境变量</p>
<p><img src="8.png" alt></p>
<hr>
<h4 id="9、单步过滤"><a href="#9、单步过滤" class="headerlink" title="9、单步过滤"></a>9、单步过滤</h4><p>单步过滤的场景是我们在使用F5来跟到某个方法内部的时候，经常会跟到一些我们确定不需要看的方法内部。</p>
<p><code>this.getTradeDetail(uid, itemStr.subString(0,5))</code></p>
<p>比如这行代码，想F5进入<code>getTradeDetail</code>内部，会首先执行<code>itemStr.subString</code>方法，会先进入<code>subString</code>方法，而这方法是JDK的String方法，确定没问题，不需要关心，<strong>单步过滤就是跳过这些我们想忽略的方法直接到目标方法内部的一种debug技巧。</strong></p>
<p>在<strong>Window &gt; PreferencesJava &gt; Debug &gt; Step Filtering</strong> 设置过滤器, 可以选择需要过滤掉的包和类。同时要确保你在debug视图中启用了单步过滤，如下图。这样在使用单步调试的时候，就会使用到这个过滤功能。</p>
<p>上图是过滤器配置，典型的就是把JDK的一些类和包配置过滤。下图是要在debug时候开启单步过滤，否则不生效。</p>
<p><img src="9.png" alt></p>
<hr>
<h4 id="10、跳出帧Drop-to-frame"><a href="#10、跳出帧Drop-to-frame" class="headerlink" title="10、跳出帧Drop to frame"></a>10、跳出帧Drop to frame</h4><p>跳到帧是一种重入技巧，在debug时，eclipse可以直接跳到调用栈中指定的任意桢，并且使JVM在此处重新运行。这使你可以重新运行你的部分代码，而不需要为了调试之前的代码而重新来一次。</p>
<p><strong>要注意的是</strong>：已经被修改的变量不会被重置，它们会保留当时的值。</p>
<p><em>Drop to frame就是说，可以重新跳到当前方法的开始处重新执行，并且所有上下文变量的值也回到那个时候。</em>不一定是当前方法，可以点击当前调用栈中的任何一个frame跳到那里（除了最开始的那个frame）。主要用途是所有变量状态快速恢复到方法开始时候的样子重新执行一遍，即可以一遍又一遍地在那个你关注的上下文中进行多次调试（结合改变变量值等其它功能），而不用重来一遍调试到哪里了。当然，原来执行过程中产生的副作用是不可逆的（比如你往数据库中插入了一条记录）。</p>
<p><img src="10.1.png" alt></p>
<p>使用方式：选择调用栈中的一桢，点击按钮“跳到桢”</p>
<p><img src="10.2.png" alt></p>
<hr>
<h4 id="11、Inspect"><a href="#11、Inspect" class="headerlink" title="11、Inspect"></a>11、Inspect</h4><p>inspect用来查看某个表达式的值，对于变量值debug很容查看，但是对于一个表达式的值就不容易查看，还是这句：</p>
<p><code>this.getTradeDetail(uid, itemStr.subString(0,5))</code></p>
<p>想看<code>getTradeDetail</code>的值，就没法想看变量值一样（虽然这个很有可能是赋值给一个变量…），要看这种表达式值，就需要inspect，具体做法是选中这行表达式，然后右击-&gt;inspect,或者更方便的快捷键组合：<code>ctrl+shift+I</code>,会弹出如下的展示表达式结果的框：</p>
<p><img src="11.png" alt></p>
<hr>
<h4 id="12、expressions"><a href="#12、expressions" class="headerlink" title="12、expressions"></a>12、expressions</h4><p>expressions窗口也是用来看变量或者表达式的值的，在<code>windows-&gt;show viewz</code>中打开expression窗口，然后在里面添加你想观察的表达式，比如还是这句：</p>
<p><code>this.getTradeDetail(uid, itemStr.subString(0,5))</code></p>
<p>然后debug的时候，就能看到被添加的表达式结果了，另外也能根据需要改value的值。</p>
<hr>
<h4 id="13、display"><a href="#13、display" class="headerlink" title="13、display"></a>13、display</h4><p>display也是用来观察和修改变量or表达式的，这个应该用的人比较多，在<code>windows-&gt;show view</code>中打开display窗口，可以在display窗口里写表达式，然后右击选择display运行查看结果或者<code>ctrl+shift+D</code>快捷键组合，表达式可以是程序中一行代码或者你自己写的一个赋值语句来改变变量值之类的。</p>
<p><img src="13.gif" alt></p>
<hr>
<h4 id="14、远程debug"><a href="#14、远程debug" class="headerlink" title="14、远程debug"></a>14、远程debug</h4><p>远程debug可以用来调试远程服务器上的代码，保证你本地代码和远程部署的代码是一致，就可以通过这种方式debug服务器代码，这个是java web开发的一大利器，否则定位服务器问题简直是灾难。</p>
<p>远程debug需要服务器端启动jvm的时候做一些开启和端口的配置，具体的配置网上很多，搜一下即可。然后在本地的debug configuration中双击添加一个<code>remote java application</code>，填写远程主机的host和配置的debug端口，就可以开始debug了，如下图：</p>
<p><img src="14.png" alt></p>
]]></content>
      <categories>
        <category>eclipse</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>在线商城项目</title>
    <url>/2019/12/28/%E5%9C%A8%E7%BA%BF%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p><code>Servlet</code>+<code>JSP</code>+<code>JavaBean</code>+<code>MySQL</code>的在线商城项目</p>
<a id="more"></a>
<blockquote>
<p><strong>在线商城系统</strong>，是一个基于 Java 为后台的 B/S 系统。包括<strong><em>前台购买功能</em></strong>和<strong><em>后台管理功能</em></strong>。<em>游客</em>可以浏览商品，<em>普通顾客</em>可以进入前台购买界面购买商品，<em>系统管理人员</em>可以进入后台管理界面进行管理操作。</p>
<p>在<strong>前台购买界面</strong>，首先会按分类显示商品信息，包括商品的名称、品牌、图片以及价格等基本信息。游客只能浏览商品信息，只有登录系统成为普通用户才可购买商品。游客通过输入用户名和密码登录系统成为普通用户。普通用户可以选择将商品加入购物车，可以返回继续添加商品。选择完要购买的商品后，进入购物车界面点击购买按钮，系统会将购物车内的商品以及用户信息生成一个订单，普通用户还可以进入订单界面查看订单是否发货。</p>
<p>在<strong>后台管理页面</strong>，系统管理员可以分别对分类、商品和用户订单进行管理。其中分类管理包含添加分类以及查看分类，管理员通过填写分类名称和分类描述创建新分类。商品管理包含添加商品以及查看商品，管理员通过填写商品名称、品牌、售价、商品描述以及上传图片和选择分类创建新商品。订单管理包括查看未发货订单、查看已发货订单和确认发货。未发货订单被确认发货后，会变成已发货订单</p>
</blockquote>
<h3 id="0、知识概要"><a href="#0、知识概要" class="headerlink" title="0、知识概要"></a>0、知识概要</h3><p><a href=" https://www.runoob.com/servlet/servlet-intro.html" target="_blank" rel="noopener"><strong>Servlet:</strong></a> 主要功能在于<code>交互式地浏览</code>和<code>修改数据</code>，生成动态 Web 内容。 </p>
<p><a href="https://www.runoob.com/jsp/jsp-intro.html " target="_blank" rel="noopener"><strong>JSP:</strong></a> 一种<code>动态页面技术</code>，它的主要目的是将表示逻辑从 Servlet 中分离出来 。</p>
<p><strong><a href="http://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">JSTL:</a></strong> 是一个 JSP 标签集合，它封装了 JSP 应用的通用核心功能 </p>
<p>详情可以下载：<a href="j2ee学习笔记.7z">J2EE知识点总结</a></p>
<h4 id="通过登录-amp-注册模块设计理解JSP-Servlet-MySQL相互协同工作"><a href="#通过登录-amp-注册模块设计理解JSP-Servlet-MySQL相互协同工作" class="headerlink" title="通过登录&amp;注册模块设计理解JSP+Servlet+MySQL相互协同工作"></a>通过登录&amp;注册模块设计理解JSP+Servlet+MySQL相互协同工作</h4><h5 id="1、项目结构"><a href="#1、项目结构" class="headerlink" title="1、项目结构"></a>1、项目结构</h5><p><img src="Login包结构.PNG"></p>
<p><strong><em>MVC</em></strong><code>(Model-View-Controller)</code> 设计模式：</p>
<blockquote>
<p><strong>Model对象：</strong>负责存储数据以及定义如何操作这些数据。</p>
<p><strong>View对象：</strong>负责展示而且允许用户编辑来自应用程序的Model对象，View对象用来构建用户界面，与用户交互。</p>
<p><strong>Controller对象：</strong>是Model对象与View对象的中间人，负责传递数据，监听各种事件，管理其他对象的生命周期等。</p>
</blockquote>
<p><img src="MVC.png" alt="MVC"></p>
<p><em>bean</em>层主要负责实体，一般是数据库表的实体并设置geter/seter方法。</p>
<p><em>dao</em>层主要负责定义每个数据表的具体操作函数，例如增删改查子类。</p>
<p><em>servlet</em>层主要负责页面交互控制，比如用户点击登录，通过web.xml定义的映射关系，定位到<code>LoginServlet</code>进行处理，而<code>Loginservlet</code>内部调用<em>dao</em>层的查找函数对数据库进行查询，验证登录是否成功，若成功页面跳转至首页，若不成功页面提示用户输入不正确，返回重新登录。</p>
<p><em>utils</em>层主要负责定义一些工具类，比如数据连接工具类<code>DBUtils</code>,其中通过解析<code>db.properties</code>数据配置文件的类方法<code>getConnection()</code>获取一个数据连接。</p>
<p>前面这些相当于Controller和Model层，而<strong>webContent</strong>目录下的.jsp文件则主要用于页面展示，即View层。</p>
<h5 id="2、项目模块具体代码"><a href="#2、项目模块具体代码" class="headerlink" title="2、项目模块具体代码"></a>2、项目模块具体代码</h5><p>bean层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: Users.java </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Package</span> bean </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 登录的用户类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Keanu </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dao层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> bean.Users;</span><br><span class="line"><span class="keyword">import</span> utils.DBUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Connection connection = DBUtil.getConnection();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//插入</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insertNewUser</span><span class="params">(Users user)</span> </span>&#123;</span><br><span class="line">		String sql =<span class="string">"insert into tb_user(name,password) values(?,?)"</span>;</span><br><span class="line">		<span class="keyword">try</span>(PreparedStatement preparedStatement =(PreparedStatement) connection.prepareStatement(sql)) &#123;</span><br><span class="line">			preparedStatement.setString(<span class="number">1</span>, user.getName());</span><br><span class="line">			preparedStatement.setString(<span class="number">2</span>, user.getPassword());</span><br><span class="line">			<span class="keyword">return</span> preparedStatement.executeUpdate()&gt;<span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查询所有</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">selectAllUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">		String sql =<span class="string">"select name,password from tb_user"</span>;</span><br><span class="line">		 List&lt;Users&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	        <span class="keyword">try</span> (PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement(sql);ResultSet resultSet = (ResultSet) preparedStatement.executeQuery()) &#123;</span><br><span class="line">		            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">		                Users user = <span class="keyword">new</span> Users();</span><br><span class="line">		                user.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">		                user.setPassword(resultSet.getString(<span class="string">"password"</span>));</span><br><span class="line">		                list.add(user);</span><br><span class="line">		            &#125;</span><br><span class="line">		            <span class="keyword">return</span> list;</span><br><span class="line">	        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">	        	e.printStackTrace();</span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//更改</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUserByName</span><span class="params">(Users user)</span> </span>&#123;</span><br><span class="line">		String sql = <span class="string">"UPDATE tb_user SET password=? where name=?"</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement(sql);</span><br><span class="line">			preparedStatement.setString(<span class="number">1</span>, user.getPassword());</span><br><span class="line">			preparedStatement.setString(<span class="number">2</span>, user.getName());</span><br><span class="line">			<span class="keyword">return</span> preparedStatement.executeUpdate()&gt;<span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		String sql = <span class="string">"DELETE FROM tb_user where name=?"</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement(sql);</span><br><span class="line">			preparedStatement.setString(<span class="number">1</span>,name);</span><br><span class="line">			<span class="keyword">return</span> preparedStatement.executeUpdate()&gt;<span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//查询是否存在单个对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String username,String password)</span> </span>&#123;</span><br><span class="line">		String sql = <span class="string">"SELECT count(*) FROM user WHERE username=? and password=?"</span>;</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ps = connection.prepareStatement(sql);</span><br><span class="line">			ps.setString(<span class="number">1</span>, username);</span><br><span class="line">			ps.setString(<span class="number">2</span>, password);</span><br><span class="line">			rs = ps.executeQuery();</span><br><span class="line">			<span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">				<span class="keyword">int</span> count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span>(count == <span class="number">1</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>servlet层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.Users;</span><br><span class="line"><span class="keyword">import</span> dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> utils.DBUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LoginServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//获取request对象参数</span></span><br><span class="line">		String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">		String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取session对象</span></span><br><span class="line">		HttpSession session = request.getSession();</span><br><span class="line">		</span><br><span class="line">		UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">		<span class="keyword">if</span>(dao.check(username,password)) &#123;</span><br><span class="line">			System.out.println(<span class="string">"用户名和密码正确"</span>);</span><br><span class="line">			Users user= <span class="keyword">new</span> Users();</span><br><span class="line">			user.setName(username);</span><br><span class="line">			user.setPassword(password);</span><br><span class="line">			<span class="comment">//将用户名保存再session对象中</span></span><br><span class="line">			session.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">			response.sendRedirect(request.getContextPath()+<span class="string">"/listProduct"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//客户端跳转</span></span><br><span class="line">			response.sendRedirect(<span class="string">"login.jsp"</span>);</span><br><span class="line">			System.out.println(<span class="string">"用户名和密码错误"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>login.jsp</em></strong>(采用BootStrap框架使得页面样式美化)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;登录页&lt;/title&gt;</span><br><span class="line">	&lt;script src="static/js/jquery/2.0.0/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"static/css/bootstrap/3.3.6/bootstrap.min.css"</span>&gt;</span><br><span class="line">    &lt;script src="static/js/bootstrap/3.3.6/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"shortcut icon"</span> href=<span class="string">"static/mistletoe.ico"</span>&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form action=<span class="string">"login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"table table-bordered"</span> style=<span class="string">"width:500px;margin:10px auto;"</span>&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">        &lt;th colspan="2" style="text-align:center;" &gt;欢迎登录&lt;/th&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td style="text-align:center"&gt;用户名：&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;input type="text" class="from-control" name="username" value=""&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td style="text-align:center"&gt;密&amp;nbsp;码：&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;input type="password" class="from-control" name="password" value=""&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">        	&lt;td colspan="2" style="text-align:center"&gt;&lt;button type="submit"&gt;登录&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">        	&lt;td colspan="2" style="text-align:center"&gt;&lt;p&gt;还没有账号？&lt;a href="registe.jsp"&gt;立即注册&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>登录处理<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3、项目具体效果"><a href="#3、项目具体效果" class="headerlink" title="3、项目具体效果"></a>3、项目具体效果</h4><p>跟上面没有太大关系，但是原理相同</p>
<p><strong>前台首页</strong></p>
<p><img src="前台首页.PNG"><br></p>
<p><strong>购物车页</strong></p>
<p><img src="购物车.png"><br></p>
<p><strong>订单页</strong></p>
<p><img src="订单页.png"><br></p>
<p><strong>订单详情页</strong></p>
<p><img src="订单详情页.png" alt="订单详情页"></p>
<p>后台管理员</p>
<iframe height="1500" width="800" src="后台页面2.gif"></iframe>]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>BootStrap</title>
    <url>/2019/12/11/BootStrap/</url>
    <content><![CDATA[<p> <code>BootStrap</code> 是Twitter的工程师开发的前端框架，可以非常方便的设计出好看的页面效果。 </p>
<a id="more"></a>
<p><a href="https://v3.bootcss.com/getting-started/#download" target="_blank" rel="noopener">BootStrap3中文文档</a></p>
<h3 id="BootStrap介绍"><a href="#BootStrap介绍" class="headerlink" title="BootStrap介绍"></a>BootStrap介绍</h3><h4 id="Bootstrap包含内容"><a href="#Bootstrap包含内容" class="headerlink" title="Bootstrap包含内容"></a>Bootstrap包含内容</h4><blockquote>
<p>基本结构：Bootstrap 提供了一个带有网格系统、链接样式、背景的基本结构。<br>CSS 3.0：Bootstrap 自带以下特性：全局的 CSS设置、定义基本的 HTML  5元素样式、可扩展的 class，以及一个先进的网格系统。<br>组件：Bootstrap 包含了十几个可重用的组件，用于创建图像、下拉菜单、导航、警告框、弹出框等等。<br>JavaScript 插件：Bootstrap包含了十几个自定义的jQuery 插件。您可以直接包含所有的插件，也可以逐个包含这些插件。<br>定制：您可以定制Bootstrap的组件、LESS 变量和jQuery 插件来得到您自己的版本。<br>——百度百科</p>
</blockquote>
<h4 id="BootStrap的常见问题"><a href="#BootStrap的常见问题" class="headerlink" title="BootStrap的常见问题"></a>BootStrap的常见问题</h4><p>Q1：什么是响应式布局？</p>
<p>A：让一个网站可以兼容不同分辨率的设备，给用户更好的视觉体验。</p>
<blockquote>
<p><em>比如</em>：</p>
<p>手机浏览器是把页面放在一个虚拟的”窗口”（viewport）中</p>
<p>通常这个虚拟的”窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分。</p>
</blockquote>
<p>Q2：响应式的优点和缺点？</p>
<p>A： 优点：解决了设备只见的差异化展示</p>
<p>​        缺点：兼容性代码多，工作量大，加载速度受影响</p>
<p>Q3：为什么要使用BootStrap?</p>
<p>A：移动设备优先：自 Bootstrap 3 起，框架包含了贯穿于整个库的移动设备优先的样式。<br>浏览器支持：所有的主流浏览器都支持 Bootstrap。</p>
<p>容易上手：只要您具备 HTML 和 CSS 的基础知识，您就可以开始学习 Bootstrap。<br>响应式设计：Bootstrap 的响应式 CSS 能够自适应于台式机、平板电脑和手机。 </p>
<hr>
<h4 id="BootStrap包的内容"><a href="#BootStrap包的内容" class="headerlink" title="BootStrap包的内容"></a>BootStrap包的内容</h4><table>
<thead>
<tr>
<th style="text-align:center">文件名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>bootstrap.css</em></td>
<td style="text-align:center">是完整的<strong>bootstrap样式表</strong>，未经过压缩，可供开发调试用</td>
</tr>
<tr>
<td style="text-align:center"><em>bootstrap-responsive.css</em></td>
<td style="text-align:center">这个是在对bootstrap框架应用了<strong>响应式布局</strong>之后所需的CSS样式表，如果你的网站不需要响应式设计，就不需要应用这个CSS</td>
</tr>
<tr>
<td style="text-align:center"><em>bootstrap.js</em></td>
<td style="text-align:center">这个是bootstrap的所有js指令集合</td>
</tr>
</tbody>
</table>
<p>min版本是用在部署上，其主要是将其中不必要的空格子类东西删除。</p>
<hr>
<h4 id="使用bootstrap的必要条件"><a href="#使用bootstrap的必要条件" class="headerlink" title="使用bootstrap的必要条件"></a>使用bootstrap的必要条件</h4><p>国内推荐使用 Staticfile CDN 上的库：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt; </span><br><span class="line">	&lt;link href=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;  </span><br><span class="line"></span><br><span class="line">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt; </span><br><span class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt; </span></span><br><span class="line"><span class="regexp">	&lt;script src="https:/</span><span class="regexp">/cdn.staticfile.org/</span>twitter-bootstrap/<span class="number">3.3</span><span class="number">.7</span>/js/bootstrap.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过导入文件的形式时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">导入bootstrap</span><br><span class="line">    &lt;link href=<span class="string">"../css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">导入jquery，确保下载对应版本的jQuery文件，来保证Bootstrap相关组件运行正常。</span><br><span class="line">	&lt;script src=<span class="string">"../js/jquery-3.1.1.js"</span> /&gt;</span><br><span class="line">导入js文件</span><br><span class="line">	&lt;script src=<span class="string">"../js/bootstrap.min.js"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>文件目录结构：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bootstrap<span class="number">-3.3</span><span class="number">.7</span>-dist/</span><br><span class="line">├── css  <span class="comment">// CSS文件</span></span><br><span class="line">│   ├── bootstrap-theme.css  <span class="comment">// Bootstrap主题样式文件</span></span><br><span class="line">│   ├── bootstrap-theme.css.map</span><br><span class="line">│   ├── bootstrap-theme.min.css  <span class="comment">// 主题相关样式压缩文件</span></span><br><span class="line">│   ├── bootstrap-theme.min.css.map</span><br><span class="line">│   ├── bootstrap.css</span><br><span class="line">│   ├── bootstrap.css.map</span><br><span class="line">│   ├── bootstrap.min.css  <span class="comment">// 核心CSS样式压缩文件</span></span><br><span class="line">│   └── bootstrap.min.css.map</span><br><span class="line">├── fonts  <span class="comment">// 字体文件</span></span><br><span class="line">│   ├── glyphicons-halflings-regular.eot</span><br><span class="line">│   ├── glyphicons-halflings-regular.svg</span><br><span class="line">│   ├── glyphicons-halflings-regular.ttf</span><br><span class="line">│   ├── glyphicons-halflings-regular.woff</span><br><span class="line">│   └── glyphicons-halflings-regular.woff2</span><br><span class="line">└── js  <span class="comment">// JS文件</span></span><br><span class="line">    ├── bootstrap.js</span><br><span class="line">    ├── bootstrap.min.js  <span class="comment">// 核心JS压缩文件</span></span><br><span class="line">    └── npm.js</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="BootStrap全局样式"><a href="#BootStrap全局样式" class="headerlink" title="BootStrap全局样式"></a>BootStrap全局样式</h3><p>排版、按钮、表格、表单、图片等我们常用的HTML元素，BootStrap都提供了全局样式，我们只要在基本的HTML元素上设置class就能够应用</p>
<h4 id="标题相关"><a href="#标题相关" class="headerlink" title="标题相关"></a>标题相关</h4><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题36px<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题30px<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题24px<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题18px<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题14px<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题12px<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--除了使用h标签，Bootstrap内置了相应的全局样式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内联标签应用标题样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span>一级标题36px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h2"</span>&gt;</span>二级标题30px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h3"</span>&gt;</span>三级标题24px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h4"</span>&gt;</span>四级标题18px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h5"</span>&gt;</span>五级标题14px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h6"</span>&gt;</span>六级标题12px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一级标题中嵌入小标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;<span class="name">small</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本对齐--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>文本左对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>文本居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>文本右对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="表格样式"><a href="#表格样式" class="headerlink" title="表格样式"></a>表格样式</h4><table>
<thead>
<tr>
<th>Class</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>table-striped</td>
<td>条纹状表格</td>
</tr>
<tr>
<td>table-bordered</td>
<td>带边框的表格</td>
</tr>
<tr>
<td>table-hover</td>
<td>鼠标悬停变色的表格</td>
</tr>
<tr>
<td>table-condensed</td>
<td>紧缩型表格</td>
</tr>
<tr>
<td>table-responsive</td>
<td>响应式表格</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover table-bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span>悬停，边框表格布局<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮编<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tanmay<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bangalore<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>560001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Sachin<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mumbai<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>400003<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Uma<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Pune<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>411027<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="元素状态"><a href="#元素状态" class="headerlink" title="元素状态"></a>元素状态</h4><table>
<thead>
<tr>
<th>Class</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>active</td>
<td>鼠标悬停在行或单元格上时说设置的颜色</td>
</tr>
<tr>
<td>primary</td>
<td>标识为首选项（深蓝色）</td>
</tr>
<tr>
<td>success</td>
<td>标识成功或积极的动作（绿色）</td>
</tr>
<tr>
<td>info</td>
<td>标识普通的提示信息或动作（浅蓝色）</td>
</tr>
<tr>
<td>warning</td>
<td>标识警告或需要用户注意（橙色）</td>
</tr>
<tr>
<td>danger</td>
<td>标识危险或潜在的带来负面影响的动作（红色）</td>
</tr>
</tbody>
</table>
<p>颜色应该与其代表的作用相对应，使用方法<code>元素名-对应作用</code>；比如文本颜色：text-success，背景颜色：bg-info</p>
<hr>
<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><h5 id="常用表单"><a href="#常用表单" class="headerlink" title="常用表单"></a><strong>常用表单</strong></h5><blockquote>
<p> 单独的表单控件会被自动赋予一些全局样式。所有设置了 .form-control 类的 <input>、<textarea> 和 </textarea><select> 元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 <strong>.form-group</strong> 中可以获得最好的排列。 </select></p>
</blockquote>
<table>
<thead>
<tr>
<th>Class</th>
<th>控件</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入框</td>
<td><code>text</code>、<code>password</code>、<code>datetime</code>、<code>month</code>、<code>time</code>、<code>week</code>、<code>number</code>、<code>email</code>、<code>url</code> 和 <code>color</code>。</td>
</tr>
<tr>
<td>文本域</td>
<td>无，但有需要改变的<code>rows</code>属性</td>
</tr>
<tr>
<td>单选框</td>
<td><code>radio</code></td>
</tr>
<tr>
<td>多选框</td>
<td><code>checkbox</code></td>
</tr>
<tr>
<td>下拉列表</td>
<td>无，组合标签select&gt;option</td>
</tr>
<tr>
<td>添加图标</td>
<td>只需设置相应的 .has-feedback 类并添加正确的图标<code>glyphicon</code> <strong>glyphicon-cloud</strong> <code>form-control-feedback</code>即可。<br>可选图标样式：<a href="https://v3.bootcss.com/components/" target="_blank" rel="noopener">https://v3.bootcss.com/components/</a></td>
</tr>
<tr>
<td>常用属性</td>
<td>只读状态：添加 readonly 属性<br>禁用状态：添加 disabled 属性<br>自动获取焦点：添加 autofocus</td>
</tr>
<tr>
<td>控件大小</td>
<td>控件高度：控件名-lg或控件名-sm<br>控件宽度：.col-lg-数字</td>
</tr>
</tbody>
</table>
<h5 id="输入框组"><a href="#输入框组" class="headerlink" title="输入框组"></a>输入框组</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"twitterhandle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="input-group.png" alt></p>
<h5 id="表单样式"><a href="#表单样式" class="headerlink" title="表单样式"></a><strong>表单样式</strong></h5><ul>
<li><h6 id="垂直表单"><a href="#垂直表单" class="headerlink" title="垂直表单"></a>垂直表单</h6><p>基本的表单结构是 Bootstrap 自带的，个别的表单控件自动接收一些全局样式。创建基本表单的步骤：<br>（1）向父元素<code>&lt;form&gt;</code>添加 role=”form”。<br>（2）把标签和控件放在一个带有 class .form-group 的<code>&lt;div&gt;</code>中。这是获取最佳间距所必需的。<br>（3）向所有的文本元素<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和<code>&lt;select&gt;</code>添加 class .form-control。 </p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> 请打勾</span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 效果图：<img src="https://upload-images.jianshu.io/upload_images/1500770-dd39f4787fab9581.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img"> </p>
<ul>
<li><h6 id="内联表单"><a href="#内联表单" class="headerlink" title="内联表单"></a>内联表单</h6><p>（1）如果需要创建一个表单，它的所有元素是内联的，向左对齐的，标签是并排的，可以向 <code>&lt;form&gt;</code>标签添加 class .form-inline。<br>（2）默认情况下，Bootstrap 中的 input、select 和 textarea 有 100% 宽度。在使用内联表单时，您需要在表单控件上设置一个宽度。<br>（3）使用 class .sr-only，您可以隐藏内联表单的标签 </p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"width:200px"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ----</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ----</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> 记住密码</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1500770-c57a1fafcc6b7299.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img"> </p>
<ul>
<li><h6 id="水平表单"><a href="#水平表单" class="headerlink" title="水平表单"></a>水平表单</h6></li>
</ul>
<p>水平表单与其他表单不仅标记的数量上不同，而且表单的呈现形式也不同。如需创建一个水平布局的表单，请按下面的几个步骤进行：<br>（1）向父 <code>&lt;form&gt;</code>元素添加 class .form-horizontal。<br>（2）把标签和控件放在一个带有 class .form-group 的 <code>&lt;div&gt;</code> 中。<br>（3）向标签添加 class .control-label。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label col-sm-1"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label col-sm-1"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ----</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label col-sm-1 sr-only"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> 请打勾</span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ----</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-7 col-sm-6"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 效果图：<img src="3.png" alt="img"> </p>
<hr>
<h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><h5 id="按钮形式"><a href="#按钮形式" class="headerlink" title="按钮形式"></a>按钮形式</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>默认Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>（首选项）Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>（成功）Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>（一般信息）Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>（警告）Warning<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>（危险）Danger<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-link"</span>&gt;</span>（链接）Link<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="btn-style.png" alt="按钮样式"></p>
<h5 id="按钮大小"><a href="#按钮大小" class="headerlink" title="按钮大小"></a>按钮大小</h5><p>btn-xs（超小尺寸）&lt; btn-sm（小按钮）&lt; btn &lt; btn-lg（大按钮）</p>
<h5 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h5><p><strong>btn-group</strong>: 该 class 用于形成基本的按钮组。在 <strong>.btn-group</strong> 中放置一系列带有 class <strong>.btn</strong> 的按钮。 </p>
<p><strong>btn-toolbar</strong>: 该 class 有助于把几组<code>&lt;div class=&quot;btn-group&quot;&gt;</code>结合到一个 <code>&lt;div class=&quot;btn-toolbar&quot;&gt;</code> 中，一般获得更复杂的组件。 </p>
<p><strong>按钮组大小</strong>:btn-group-* (lg &gt; xs &gt; sm)</p>
<p><strong>垂直按钮组</strong>: btn-group-vertical </p>
<hr>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span> <span class="attr">alt</span>=<span class="string">"Responsive image"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>图片形状</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--圆角--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--圆形--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-circle"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--带外边距的图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="image-style.png" alt></p>
<hr>
<h4 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h4><h5 id="关闭按钮"><a href="#关闭按钮" class="headerlink" title="关闭按钮"></a>关闭按钮</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aria-hidden="true" 主要是帮助残障人士（如失明）使用识读设备（自动读取内容并自动播放出来），播放到带此属性的内容时会自动跳过，以免残障人士混淆！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;times;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="下拉三角"><a href="#下拉三角" class="headerlink" title="下拉三角"></a>下拉三角</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="元素快速浮动"><a href="#元素快速浮动" class="headerlink" title="元素快速浮动"></a>元素快速浮动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;pull-left&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;pull-right&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h5 id="内容块居中"><a href="#内容块居中" class="headerlink" title="内容块居中"></a>内容块居中</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-block"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"show"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h4><table>
<thead>
<tr>
<th style="text-align:left">类</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.dropdown</td>
<td style="text-align:left">指定下拉菜单，下拉菜单都包裹在 .dropdown 里</td>
<td style="text-align:left"><a href="https://www.runoob.com/try/try.php?filename=trybs_ref_comp_dropdown-menu" target="_blank" rel="noopener">尝试一下</a></td>
</tr>
<tr>
<td style="text-align:left">.dropdown-menu</td>
<td style="text-align:left">创建下拉菜单</td>
<td style="text-align:left"><a href="https://www.runoob.com/try/try.php?filename=trybs_ref_comp_dropdown-menu" target="_blank" rel="noopener">尝试一下</a></td>
</tr>
<tr>
<td style="text-align:left">.dropdown-menu-right</td>
<td style="text-align:left">下拉菜单右对齐</td>
<td style="text-align:left"><a href="https://www.runoob.com/try/try.php?filename=trybs_ref_comp_dropdown-menu-right" target="_blank" rel="noopener">尝试一下</a></td>
</tr>
<tr>
<td style="text-align:left">.dropdown-header</td>
<td style="text-align:left">下拉菜单中添加标题</td>
<td style="text-align:left"><a href="https://www.runoob.com/try/try.php?filename=trybs_ref_comp_dropdown-header" target="_blank" rel="noopener">尝试一下</a></td>
</tr>
<tr>
<td style="text-align:left">.dropup</td>
<td style="text-align:left">指定向上弹出的下拉菜单</td>
<td style="text-align:left"><a href="https://www.runoob.com/try/try.php?filename=trybs_ref_comp_dropup" target="_blank" rel="noopener">尝试一下</a></td>
</tr>
<tr>
<td style="text-align:left">.disabled</td>
<td style="text-align:left">下拉菜单中的禁用项</td>
<td style="text-align:left"><a href="https://www.runoob.com/try/try.php?filename=trybs_ref_comp_dropdown_disabled" target="_blank" rel="noopener">尝试一下</a></td>
</tr>
<tr>
<td style="text-align:left">.divider</td>
<td style="text-align:left">下拉菜单中的分割线</td>
<td style="text-align:left"><a href="https://www.runoob.com/try/try.php?filename=trybs_ref_comp_dropdown_divider" target="_blank" rel="noopener">尝试一下</a></td>
</tr>
</tbody>
</table>
<h3 id="BootStrap导航栏"><a href="#BootStrap导航栏" class="headerlink" title="BootStrap导航栏"></a>BootStrap导航栏</h3><h4 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h4><p>创建一个默认的导航栏的步骤如下：</p>
<ul>
<li>向<code>&lt;nav&gt;</code> 标签添加 class <strong>.navbar、.navbar-default</strong>。</li>
<li>向上面的元素添加 <strong>role=”navigation”</strong>，有助于增加可访问性。</li>
<li>向 <code>&lt;div&gt;</code> 元素添加一个标题 class <strong>.navbar-header</strong>，内部包含了带有 class <strong>navbar-brand</strong> 的 <code>&lt;a&gt;</code>元素。这会让文本看起来更大一号。</li>
<li>为了向导航栏添加链接，只需要简单地添加带有 class <strong>.nav、.navbar-nav</strong> 的无序列表即可。</li>
</ul>
<hr>
<blockquote>
<p>导航块浮动：navbar-left/navbar-right</p>
</blockquote>
<blockquote>
<p>固定到顶部/底部：navbar-fixed-top/bottom</p>
</blockquote>
<blockquote>
<p>静止固定在页面上端：navbar-static-top</p>
</blockquote>
<hr>
<h4 id="导航元素"><a href="#导航元素" class="headerlink" title="导航元素"></a>导航元素</h4><h6 id="标签式导航"><a href="#标签式导航" class="headerlink" title="标签式导航"></a>标签式导航</h6><p>创建一个标签式的导航菜单：</p>
<ul>
<li>以一个带有 class <strong>.nav</strong> 的无序列表开始。</li>
<li>添加 class <strong>.nav-tabs</strong>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>标签式的导航菜单<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>SVN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>VB.Net<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="nav-tabs.png" alt></p>
<h6 id="胶囊式导航"><a href="#胶囊式导航" class="headerlink" title="胶囊式导航"></a>胶囊式导航</h6><p> 只需要使用 class <strong>.nav-pills</strong> 代替 <strong>.nav-tabs</strong> 即可 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>基本的胶囊式导航菜单<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>SVN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>VB.Net<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="nav-pills.png" alt></p>
<h6 id="导航样式"><a href="#导航样式" class="headerlink" title="导航样式"></a>导航样式</h6><table>
<thead>
<tr>
<th>Class</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>.nav-stacked</td>
<td>垂直方向重叠</td>
</tr>
<tr>
<td>.nav-justified</td>
<td>两端对齐的标签页</td>
</tr>
<tr>
<td>.disabled</td>
<td>禁用的标签页</td>
</tr>
<tr>
<td>.tab-pane</td>
<td>与 .tab-content 和 data-toggle=”tab” (data-toggle=”pill”)一同使用, <strong>设置标签页对应的内容随标签的切换而更改</strong></td>
</tr>
</tbody>
</table>
<hr>
<h4 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h4><p> 面包屑导航（<strong>Breadcrumbs</strong>）是一种基于网站层次信息的显示方式。以博客为例，面包屑导航可以显示发布日期、类别或标签。它们表示当前页面在导航层次结构内的位置。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2013<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>十一月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="breadcrumb.png" alt></p>
<hr>
<h3 id="BootStrap分页"><a href="#BootStrap分页" class="headerlink" title="BootStrap分页"></a>BootStrap分页</h3><h4 id="分页（Pagination）"><a href="#分页（Pagination）" class="headerlink" title="分页（Pagination）"></a>分页（Pagination）</h4><p> 分页（Pagination），是一种无序列表，Bootstrap 像处理其他界面元素一样处理分页。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页大小pagination-*--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--选中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--禁止选中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="pagination.png" alt></p>
<h4 id="翻页（Pager）"><a href="#翻页（Pager）" class="headerlink" title="翻页（Pager）"></a>翻页（Pager）</h4><p>如果您想要创建一个简单的分页链接为用户提供导航，可通过翻页来实现。与分页链接一样，翻页也是无序列表。默认情况下，链接是居中显示。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="symbol">&amp;larr;</span> Older<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Newer <span class="symbol">&amp;rarr;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p> <img src="Pager.png" alt></p>
<hr>
<h3 id="BootStrap徽章"><a href="#BootStrap徽章" class="headerlink" title="BootStrap徽章"></a>BootStrap徽章</h3><p> 徽章（Badges）主要用于突出显示新的或未读的项。如需使用徽章，只需要把 <strong><code>&lt;span class=&quot;badge&quot;&gt;</code></strong> 添加到链接、Bootstrap 导航等这些元素上即可。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Mailbox <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="badge.png" alt></p>
<hr>
<h3 id="BootStrap网格系统"><a href="#BootStrap网格系统" class="headerlink" title="BootStrap网格系统"></a>BootStrap网格系统</h3><p> Bootstrap 提供了一套响应式、移动设备优先的流式网格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。 </p>
<p>在网页设计中的网格用于组织内容，让网站易于浏览，并降低用户端负载。</p>
<h4 id="移动设备优先策略"><a href="#移动设备优先策略" class="headerlink" title="移动设备优先策略"></a>移动设备优先策略</h4><ul>
<li>内容<ul>
<li>决定什么是最重要的。</li>
</ul>
</li>
<li>布局<ul>
<li>优先设计更小的宽度。</li>
<li>基础的 CSS 是移动设备优先，媒体查询是针对于平板电脑、台式电脑。</li>
</ul>
</li>
<li>渐进增强<ul>
<li>随着屏幕大小的增加而添加元素。</li>
</ul>
</li>
</ul>
<p>响应式网格系统随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p>
<h4 id="网格系统（Grid-System）的工作原理"><a href="#网格系统（Grid-System）的工作原理" class="headerlink" title="网格系统（Grid System）的工作原理"></a>网格系统（Grid System）的工作原理</h4><p>网格系统通过一系列包含内容的行和列来创建页面布局。</p>
<ul>
<li>行必须放置在.container class内，以便于获得适当的对齐（alignment）和内边距（padding）。</li>
<li>使用行来创建列的水平组。</li>
<li>内容放在列内，且唯有列可以是行的直接元素。</li>
<li>列通过内边距（padding）来创建列内容之间的间隙。该内边距是通过.rows上的外边距（margin）取负，标识第一列与最后一列的行偏移值</li>
</ul>
<h4 id="基本的网格系统"><a href="#基本的网格系统" class="headerlink" title="基本的网格系统"></a>基本的网格系统</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--一个row代表一行--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--col-*-*用来把12列的行进行划分--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-*-*"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-*-*"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">超小设备手机（&lt;768px）</th>
<th style="text-align:left">小型设备平板电脑（≥768px）</th>
<th style="text-align:left">中型设备台式电脑（≥992px）</th>
<th>大型设备台式电脑（≥1200px）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">网格行为</td>
<td style="text-align:left">一直是水平的</td>
<td style="text-align:left">以折叠开始，断点以上是水平的</td>
<td style="text-align:left">以折叠开始，断点以上是水平的</td>
<td>以折叠开始，断点以上是水平的</td>
</tr>
<tr>
<td style="text-align:left">最大容器宽度</td>
<td style="text-align:left">None (auto)</td>
<td style="text-align:left">750px</td>
<td style="text-align:left">970px</td>
<td>1170px</td>
</tr>
<tr>
<td style="text-align:left">Class 前缀</td>
<td style="text-align:left"><strong>.col-xs-</strong></td>
<td style="text-align:left"><strong>.col-sm-</strong></td>
<td style="text-align:left"><strong>.col-md-</strong></td>
<td><strong>.col-lg-</strong></td>
</tr>
</tbody>
</table>
<h4 id="偏移列"><a href="#偏移列" class="headerlink" title="偏移列"></a>偏移列</h4><p>偏移是一个用于更专业的布局的有用功能。它们可用来给列腾出更多的空间。例如，<strong>.col-xs-*</strong> 类不支持偏移，但是它们可以简单地通过使用一个空的单元格来实现该效果。</p>
<p>为了在大屏幕显示器上使用偏移，请使用 <strong>.col-md-offset-*</strong> 类。这些类会把一个列的左外边距（margin）增加 <strong>*</strong> 列，其中 <strong>*</strong> 范围是从 <strong>1</strong> 到 <strong>11</strong>。</p>
<p>比如我们要将一个占6列的单元格居中，我们就可以设置<code>col-同列大小名-3</code>实现居中</p>
<hr>
<h3 id="BootStrap缩略图"><a href="#BootStrap缩略图" class="headerlink" title="BootStrap缩略图"></a>BootStrap缩略图</h3><p>大多数站点都需要在网格中布局图像、视频、文本等。Bootstrap 通过缩略图为此提供了一种简便的方式。使用 Bootstrap 创建缩略图的步骤如下：</p>
<ul>
<li>在图像周围添加带有 class <strong>.thumbnail</strong> 的 <code>&lt;a&gt;</code>/或者<code>&lt;div&gt;</code> 标签。</li>
<li>这会添加四个像素的内边距（padding）和一个灰色的边框。</li>
<li>当鼠标悬停在图像上时，会动画显示出图像的轮廓。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处做了响应式布局--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6 col-md-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">alt</span>=<span class="string">"通用的占位符缩略图"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6 col-md-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">alt</span>=<span class="string">"通用的占位符缩略图"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6 col-md-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">alt</span>=<span class="string">"通用的占位符缩略图"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6 col-md-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">alt</span>=<span class="string">"通用的占位符缩略图"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h3 id="BootStrap进度条"><a href="#BootStrap进度条" class="headerlink" title="BootStrap进度条"></a>BootStrap进度条</h3><h4 id="默认的进度条"><a href="#默认的进度条" class="headerlink" title="默认的进度条"></a>默认的进度条</h4><p>创建一个基本的进度条的步骤如下：</p>
<ul>
<li>添加一个带有class .progress的div</li>
<li>接着在这个div内，添加一个带有.progress-bar的空的div</li>
<li>在空的div标签上添加一个带有百分比表示的宽度style属性，例如style=”width:60%”;表示进度条在60%的位置。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aria-*用于盲人的辅助阅读，表示当前的进度条状态--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">role</span>=<span class="string">"progressbar"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">aria-valuenow</span>=<span class="string">"40"</span> <span class="attr">aria-valuemin</span>=<span class="string">"0"</span> <span class="attr">aria-valuemax</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"width: 40%;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>40% 完成<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="条纹样式的进度条"><a href="#条纹样式的进度条" class="headerlink" title="条纹样式的进度条"></a>条纹样式的进度条</h4><p>创建一个条纹的进度条的步骤如下：</p>
<ul>
<li>添加一个带有 class <strong>.progress</strong> 和 <strong>.progress-striped</strong> 的 <div>。</div></li>
<li>接着，在上面的 <div> 内，添加一个带有 class <strong>.progress-bar</strong> 和 class <strong>progress-bar-*</strong> 的空的 <div>。其中，* 可以是 <strong>success、info、warning、danger</strong>。</div></div></li>
<li>添加一个带有百分比表示的宽度的 style 属性，例如 style=”60%”; 表示进度条在 60% 的位置。</li>
</ul>
<p>效果图：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/06/stripedprogressbar_demo.jpg" alt="条纹的进度条"> </p>
<p>注意的一个progress代表一个进度条！！！</p>
]]></content>
      <categories>
        <category>前端框架</category>
        <category>BootStrap</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>前端框架</tag>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架</title>
    <url>/2019/12/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><strong><code>JSON</code>、<code>Ajax</code>和<code>Jquery</code>相关知识总结；</strong></p>
<a id="more"></a>
<h2 id="1、JSON"><a href="#1、JSON" class="headerlink" title="1、JSON"></a>1、JSON</h2><p>JavaScript对象表示方法（ <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation ）是一种存储数据的方式。</p>
<p> JSON对象由 <strong>名称/值对</strong>组成 名称和值之间用<em>冒号:隔开</em>，名称必须用<strong>双引号”</strong> 包含起来<br>值可以是任意<code>Javascript</code>数据类型，字符串，布尔，数字 ，数组甚至是对象<br>不同的<strong>名称/值对</strong>之间用 逗号 <strong>,</strong> 隔开 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">var</span> stu = [						<span class="comment">//创建JSON对象</span></span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>, <span class="string">"age"</span>:<span class="string">"12"</span>&#125;,	</span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>, <span class="string">"age"</span>:<span class="string">"12"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"王五"</span>, <span class="string">"age"</span>:<span class="string">"12"</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">	stu[<span class="number">2</span>].name;			<span class="comment">//访问JSON数组对象-&gt;王五</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>JSON</strong>格式字符串转为<strong>JSON</strong>对象：<code>eval(&quot;(&quot;+str+&quot;)&quot;);</code></p>
<p>JSON对象转换为字符串：<code>JSON.stringify(JsonObj);</code></p>
<hr>
<h2 id="2、AJAX"><a href="#2、AJAX" class="headerlink" title="2、AJAX"></a>2、AJAX</h2><p> 通过AJAX (<strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML) 实现异步刷新 </p>
<p> AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。 </p>
<p><strong><em>AJAX使用步骤：</em></strong></p>
<blockquote>
<p><strong>1）创建对象       var xhr = new XMLHttpRequest()</strong></p>
<p><strong>2）配置对象        xhr.open( 参数一，参数二 , 参数三 )</strong>   </p>
<p>​                          <strong>a、参数一：请求方式（GET|POST）</strong>  </p>
<p>​                         <strong>b、参数二：地址（url 文件在服务器上的位置 ）</strong></p>
<p>​                          <strong>c、参数三：是否为异步（true|false）—–默认为true</strong></p>
<p> <strong>3）发送请求         xhr.send( )</strong></p>
<p><strong>4）监听请求回调</strong>     </p>
<p>​           <strong>事件 :</strong>  </p>
<p>​             <strong>(1)xhr.onreadystatechange = function( ){ }</strong></p>
<p>​             <strong>(2)xhr.onload = function( ){ }</strong></p>
<p>​             <strong>(3)xhr.onprogress = function( ){ }</strong></p>
<p><strong>5) 处理响应消息</strong></p>
<p>​    <strong>服务器响应字符串和XML形式的–&gt;responseText/responseXML</strong></p>
</blockquote>
<font color="red">注：onreadystatechange事件</font>

<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onreadystatechange</td>
<td style="text-align:left">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td>
</tr>
<tr>
<td style="text-align:left">readyState</td>
<td style="text-align:left">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。<br>0: 请求未初始化<br>1: 服务器连接已建立<br>2: 请求已接收<br>3: 请求处理中<br>4: 请求已完成，且响应已就绪</td>
</tr>
<tr>
<td style="text-align:left">status</td>
<td style="text-align:left">200: “OK” 404: 未找到页面</td>
</tr>
</tbody>
</table>
<p><strong>AJAX实例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> xmlhttp;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">            <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">		xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;	<span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">	    xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">                 <span class="keyword">var</span> str = xmlhttp.responseText;</span><br><span class="line">                 alert(str);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/url"</span>,<span class="literal">true</span>);</span><br><span class="line">	xmlhttp.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ajax的目标：<strong>无刷新加载页面</strong></p>
<p>​     1）发送请求  </p>
<p>​     2）服务器返回内容有两种：</p>
<p>​         （a）html页面  </p>
<p>​         （b）数据（在页面内发送的请求服务器当场返回的是数据）（ json ）</p>
<p><strong>在浏览器地址栏输入url按下Enter键后会发生什么？</strong><font color="red">（面试题）</font><br>       1）域名解析 —–把域名解析成ip地址 （DNS域名解析系统）</p>
<p>​       2）把ip地址发送到网络供应端，去找相对应的主机服务器</p>
<p>​       3）TCP的三次握手，简历连接</p>
<p>​       4）开始发送请求，取回入口文件</p>
<p>​       5）开始解析入口文件，并取回需要的资源</p>
<p>​       6）进行后续操作</p>
<hr>
<h2 id="3、JQuery"><a href="#3、JQuery" class="headerlink" title="3、JQuery"></a>3、JQuery</h2><p> JQuery是一个<code>Javascript</code>的框架，是对<code>Javascript</code>的一种封装。 </p>
<p>详细知识参考链接：[JQuery笔记详细版]: <a href="https://blog.csdn.net/qq_37957971/article/details/82812002" target="_blank" rel="noopener">https://blog.csdn.net/qq_37957971/article/details/82812002</a> </p>
<p>使用JQuery需要导入一个第三方 Javascript库 <a href="jquery.min.js">jquery.min.js </a>(点击下载)</p>
<p>以下是jQuery的相关信息：</p>
<ul>
<li>官网：<a href="http://jquery.com/" target="_blank" rel="noopener">http://jquery.com/</a></li>
<li>官网API文档：<a href="http://api.jquery.com/" target="_blank" rel="noopener">http://api.jquery.com/</a></li>
<li>中文汉化API文档：<a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="noopener">http://www.css88.com/jqapi-1.9/</a></li>
</ul>
<p><strong>JQuery的两大特点：</strong></p>
<p> （1）<strong>链式编程</strong>：比如<code>.show()</code>和<code>.html()</code>可以连写成<code>.show().html()</code>。 </p>
<p> （2）<strong>隐式迭代</strong>：隐式 对应的是 显式。隐式迭代的意思是：在方法的内部会为匹配到的所有元素进行循环遍历，执行相应的方法；而不用我们再进行循环，简化我们的操作，方便我们调用。 </p>
<p>使用<code>JQuery</code>的步骤：</p>
<p><img src="JQuery.png" alt="JQuery使用"></p>
<hr>
<h5 id="入口函数（重点）"><a href="#入口函数（重点）" class="headerlink" title="入口函数（重点）"></a>入口函数（重点）</h5><p>原生<code>JS</code>的入口函数指的是:<code>window.onload = function(){};</code>如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//原生 js 的入口函数。页面上所有内容加载完毕，才执行。</span></span><br><span class="line"> <span class="comment">//不仅要等文本加载完毕，而且要等图片也要加载完毕，才执行函数。</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JQuery的入口函数，写法：</p>
<p>写法一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.文档加载完毕，图片不加载的时候，就可以执行这个函数。</span></span><br><span class="line">     $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         alert(<span class="number">1</span>);</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure>
<p>写法二：（写法一的简洁版）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.文档加载完毕，图片不加载的时候，就可以执行这个函数。</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>写法三：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.文档加载完毕，图片也加载完毕的时候，在执行这个函数。</span></span><br><span class="line">$(<span class="built_in">window</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<font color="red">注：$ == JQuery，$表示函数</font>

<h5 id="js中的DOM对象-和-jQuery对象-比较（重点，难点）"><a href="#js中的DOM对象-和-jQuery对象-比较（重点，难点）" class="headerlink" title="js中的DOM对象 和 jQuery对象 比较（重点，难点）"></a>js中的DOM对象 和 jQuery对象 比较（重点，难点）</h5><h5 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h5><p>通过 jQuery 获取的元素是一个<strong>数组</strong>，数组中包含着原生JS中的DOM对象。举例：</p>
<p>针对下面这样一个div结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过原生 js 获取这些元素节点的方式是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);           <span class="comment">//通过 id 获取单个元素</span></span><br><span class="line"><span class="keyword">var</span> boxArr = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>);  <span class="comment">//通过 class 获取的是数组</span></span><br><span class="line"><span class="keyword">var</span> divArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);    <span class="comment">//通过标签获取的是数组</span></span><br></pre></td></tr></table></figure>
<p>通过 jQuery 获取这些元素节点的方式是：<strong>（获取的都是数组）</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取的是数组，里面包含着原生 JS 中的DOM对象。</span></span><br><span class="line"><span class="keyword">var</span> jqBox1 = $(<span class="string">"#box"</span>);</span><br><span class="line"><span class="keyword">var</span> jqBox2 = $(<span class="string">".box"</span>);</span><br><span class="line"><span class="keyword">var</span> jqBox3 = $(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure>
<p><em>两者互相转换：</em></p>
<p>1、DOM对象转为JQuery对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(JS对象)</span><br></pre></td></tr></table></figure>
<p>2、JQuery对象转为DOM对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">JQuery对象[index];	<span class="comment">//方法一，推荐</span></span><br><span class="line">JQuery对象.get(index);<span class="comment">//方法二</span></span><br></pre></td></tr></table></figure>
<p>+++</p>
<h5 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h5><h6 id="1、JQuery基本选择器"><a href="#1、JQuery基本选择器" class="headerlink" title="1、JQuery基本选择器"></a>1、JQuery基本选择器</h6><p><img src="base_Selector.png" alt="基本选择器"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;基本选择器&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="jquery.min.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//入口函数</span></span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//以三种方式获取jquery对象</span></span><br><span class="line">            <span class="keyword">var</span> jqBox1 = $(<span class="string">"#box"</span>);</span><br><span class="line">            <span class="keyword">var</span> jqBox2 = $(<span class="string">".box"</span>);</span><br><span class="line">            <span class="keyword">var</span> jqBox3 = $(<span class="string">"div"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//操作标签选择器</span></span><br><span class="line">            jqBox3.css(<span class="string">"width"</span>,<span class="number">100</span>);</span><br><span class="line">            jqBox3.css(<span class="string">"height"</span>,<span class="number">100</span>);</span><br><span class="line">            jqBox3.css(<span class="string">"backgroundColor"</span>,<span class="string">"pink"</span>);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//操作类选择器(隐式迭代，不用一个一个设置)</span></span><br><span class="line">             jqBox2.css(<span class="string">"background"</span>, <span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//操作id选择器</span></span><br><span class="line">            jqBox1.css(<span class="string">"background"</span>, <span class="string">"yellow"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="box"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"box"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="box"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="2、层级选择器"><a href="#2、层级选择器" class="headerlink" title="2、层级选择器"></a>2、层级选择器</h6><p><img src="class_Selector.png" alt="层级选择器"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="jquery-1.11.1.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//获取ul中的li设置为粉色</span></span><br><span class="line">            <span class="comment">//后代：儿孙重孙曾孙玄孙....</span></span><br><span class="line">            <span class="keyword">var</span> jqLi = $(<span class="string">"ul li"</span>);</span><br><span class="line">            jqLi.css(<span class="string">"margin"</span>, <span class="number">5</span>);</span><br><span class="line">            jqLi.css(<span class="string">"background"</span>, <span class="string">"pink"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//子代：亲儿子</span></span><br><span class="line">            <span class="keyword">var</span> jqOtherLi = $(<span class="string">"ul&gt;li"</span>);</span><br><span class="line">            jqOtherLi.css(<span class="string">"background"</span>, <span class="string">"red"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">111</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;222&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">333</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ol&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;aaa&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;bbb&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;ccc&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<h6 id="3、基本过滤器"><a href="#3、基本过滤器" class="headerlink" title="3、基本过滤器"></a>3、基本过滤器</h6><p><img src="filter.png" alt="基本过滤器"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"jquery-1.11.1.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        $(document).ready(function () &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ :odd</span></span><br><span class="line"><span class="regexp">            $("li:odd").css("background", "red");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ :even</span></span><br><span class="line"><span class="regexp">            $("li:even").css("background", "green");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ :eq(index)</span></span><br><span class="line"><span class="regexp">            $("ul li:eq(3)").css("font-size", "30px");  /</span><span class="regexp">/设置第四个li的字体</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ :lt(index)</span></span><br><span class="line"><span class="regexp">            $("li:lt(6)").css("font-size", "30px");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ :gt(index)</span></span><br><span class="line"><span class="regexp">            $(".ulList1 li:gt(7)").css("font-size", "40px");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ :first</span></span><br><span class="line"><span class="regexp">            $(".ulList li:first").css("font-size", "40px");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ :last</span></span><br><span class="line"><span class="regexp">            $("li:last").css("font-size", "40px");</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="4、属性选择器"><a href="#4、属性选择器" class="headerlink" title="4、属性选择器"></a>4、属性选择器</h6><p><img src="Atrr_Selector.png" alt="属性选择器"></p>
<h6 id="5、筛选选择器"><a href="#5、筛选选择器" class="headerlink" title="5、筛选选择器"></a>5、筛选选择器</h6><p><img src="Chose_Selector.png" alt="筛选选择器"></p>
<h6 id="实例一：鼠标悬停时，弹出下拉菜单"><a href="#实例一：鼠标悬停时，弹出下拉菜单" class="headerlink" title="实例一：鼠标悬停时，弹出下拉菜单"></a>实例一：鼠标悬停时，弹出下拉菜单</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        * &#123;</span></span><br><span class="line"><span class="string">            margin: 0;</span></span><br><span class="line"><span class="string">            padding: 0;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ul &#123;</span></span><br><span class="line"><span class="string">            list-style: none;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .wrap &#123;</span></span><br><span class="line"><span class="string">            width: 330px;</span></span><br><span class="line"><span class="string">            height: 30px;</span></span><br><span class="line"><span class="string">            margin: 100px auto 0;</span></span><br><span class="line"><span class="string">            padding-left: 10px;</span></span><br><span class="line"><span class="string">            background-color: pink;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .wrap li &#123;</span></span><br><span class="line"><span class="string">            background-color: lightblue;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .wrap &gt; ul &gt; li &#123;</span></span><br><span class="line"><span class="string">            float: left;</span></span><br><span class="line"><span class="string">            margin-right: 10px;</span></span><br><span class="line"><span class="string">            position: relative;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .wrap a &#123;</span></span><br><span class="line"><span class="string">            display: block;</span></span><br><span class="line"><span class="string">            height: 30px;</span></span><br><span class="line"><span class="string">            width: 100px;</span></span><br><span class="line"><span class="string">            text-decoration: none;</span></span><br><span class="line"><span class="string">            color: #000;</span></span><br><span class="line"><span class="string">            line-height: 30px;</span></span><br><span class="line"><span class="string">            text-align: center;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .wrap li ul &#123;</span></span><br><span class="line"><span class="string">            position: absolute;</span></span><br><span class="line"><span class="string">            top: 30px;</span></span><br><span class="line"><span class="string">            display: none;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        //入口函数</span></span><br><span class="line"><span class="string">        $(document).ready(function () &#123;</span></span><br><span class="line"><span class="string">            //需求：鼠标放入一级li中，让他里面的ul显示。移开隐藏。</span></span><br><span class="line"><span class="string">            var jqli = $("</span>.wrap&gt;ul&gt;li<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            //绑定事件</span></span><br><span class="line"><span class="string">            jqli.mouseenter(function () &#123;</span></span><br><span class="line"><span class="string">                //这个位置用到了this.</span></span><br><span class="line"><span class="string">                // console.log(this);  //打印结果是js中的dom对象。注意：jquery对象绑定的事件中，this指js中的dom对象。【重要】</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                //让this中的ul显示出来。</span></span><br><span class="line"><span class="string">//                原生 js 的做法是：this.children[1].style.display = "</span>block<span class="string">";</span></span><br><span class="line"><span class="string">                //把js的dom对象包装为jquery对象，然后用jquery方法操作</span></span><br><span class="line"><span class="string">                $(this).children("</span>ul<span class="string">").show();</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            //绑定事件：鼠标移开时，隐藏下拉菜单</span></span><br><span class="line"><span class="string">            jqli.mouseleave(function () &#123;</span></span><br><span class="line"><span class="string">                $(this).children("</span>ul<span class="string">").hide();</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>wrap<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;一级菜单1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;二级菜单1&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;二级菜单2&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;二级菜单3&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;一级菜单1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;二级菜单1&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;二级菜单2&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;二级菜单3&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;一级菜单1&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;二级菜单1&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;二级菜单2&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;a href="</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>);<span class="string">"&gt;二级菜单3&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>可实现两级菜单，水平式布局。</p>
<iframe height="200" width="100" src="前端框架\01.gif">  


<h6 id="举例二：鼠标悬停时变色"><a href="#举例二：鼠标悬停时变色" class="headerlink" title="举例二：鼠标悬停时变色"></a>举例二：鼠标悬停时变色</h6><p>完整版代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="jquery.min.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//需求；隔行变色；鼠标悬停时，还要变色。</span></span><br><span class="line">            <span class="keyword">var</span> jqli1 = $(<span class="string">"li:odd"</span>);</span><br><span class="line">            <span class="keyword">var</span> jqli2 = $(<span class="string">"li:even"</span>);</span><br><span class="line">            jqli1.css(<span class="string">"background"</span>, <span class="string">"#cccccc"</span>);</span><br><span class="line">            jqli2.css(<span class="string">"background"</span>, <span class="string">"white"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//鼠标悬停时变色</span></span><br><span class="line">            <span class="keyword">var</span> color = <span class="string">""</span>;</span><br><span class="line">            $(<span class="string">"li"</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                color = $(<span class="keyword">this</span>).css(<span class="string">"background"</span>);  <span class="comment">//先把之前的颜色保存下来，鼠标离开时还原</span></span><br><span class="line">                $(<span class="keyword">this</span>).css(<span class="string">"background"</span>, <span class="string">"green"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//鼠标离开时，恢复为原来的颜色</span></span><br><span class="line">            $(<span class="string">"li"</span>).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).css(<span class="string">"background"</span>, color);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;生命壹号，永不止步&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;生命壹号，永不止步&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;生命壹号，永不止步&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;生命壹号，永不止步&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;生命壹号，永不止步&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;生命壹号，永不止步&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<p><iframe height="300" width="100" scrolling="no" overflow="hidden" src="前端框架/02.gif"></iframe></p>
<h6 id="举例三：突出显示"><a href="#举例三：突出显示" class="headerlink" title="举例三：突出显示"></a>举例三：突出显示</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        * &#123;</span></span><br><span class="line"><span class="string">            margin: 0;</span></span><br><span class="line"><span class="string">            padding: 0;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ul &#123;</span></span><br><span class="line"><span class="string">            list-style: none;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        body &#123;</span></span><br><span class="line"><span class="string">            background: #000;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .wrap &#123;</span></span><br><span class="line"><span class="string">            margin: 100px auto 0;</span></span><br><span class="line"><span class="string">            width: 630px;</span></span><br><span class="line"><span class="string">            height: 394px;</span></span><br><span class="line"><span class="string">            padding: 10px 0 0 10px;</span></span><br><span class="line"><span class="string">            background: #000;</span></span><br><span class="line"><span class="string">            overflow: hidden;</span></span><br><span class="line"><span class="string">            border: 1px solid #fff;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .wrap li &#123;</span></span><br><span class="line"><span class="string">            float: left;</span></span><br><span class="line"><span class="string">            margin: 0 10px 10px 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .wrap img &#123;</span></span><br><span class="line"><span class="string">            display: block;</span></span><br><span class="line"><span class="string">            border: 0;</span></span><br><span class="line"><span class="string">            width: 200px;</span></span><br><span class="line"><span class="string">            height: 180px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        jQuery(window).ready(function () &#123;</span></span><br><span class="line"><span class="string">            //需求：鼠标放入li中，其他的li半透明，当前盒子的opacity值为1</span></span><br><span class="line"><span class="string">            $("</span>.wrap<span class="string">").find("</span>li<span class="string">").mouseenter(function () &#123;</span></span><br><span class="line"><span class="string">                //链式编程</span></span><br><span class="line"><span class="string">                $(this).css("</span>opacity<span class="string">", 1).siblings("</span>li<span class="string">").css("</span>opacity<span class="string">", 0.4);</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            //离开wrap的时候所有的li的全部opacity值为1；</span></span><br><span class="line"><span class="string">            $("</span>.wrap<span class="string">").mouseleave(function () &#123;</span></span><br><span class="line"><span class="string">                $(this).children().children("</span>li<span class="string">").css("</span>opacity<span class="string">", 1);</span></span><br><span class="line"><span class="string">//                $("</span>.wrap li<span class="string">").css("</span>opacity<span class="string">",1);</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>wrap<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/01.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/02.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/</span><span class="number">03.</span>jpg<span class="string">" alt="</span><span class="string">"/&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/04.jpg" alt=""/&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/05.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/</span><span class="number">06.</span>jpg<span class="string">" alt="</span><span class="string">"/&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<iframe height="300" width="100" overflow="hidden" scrolling="no" src="前端框架/03.gif">

<h6 id="举例四：手风琴效果"><a href="#举例四：手风琴效果" class="headerlink" title="举例四：手风琴效果"></a>举例四：手风琴效果</h6><p><iframe height="400" width="50" overflow="hidden" scrolling="no" src="前端框架/04.gif"></iframe><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        * &#123;padding: 0;margin: 0;&#125;</span></span><br><span class="line"><span class="string">        ul &#123; list-style-type: none;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .parentWrap &#123;</span></span><br><span class="line"><span class="string">            width: 200px;</span></span><br><span class="line"><span class="string">            text-align:center;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .menuGroup &#123;</span></span><br><span class="line"><span class="string">            border:1px solid #999;</span></span><br><span class="line"><span class="string">            background-color:#e0ecff;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .groupTitle &#123;</span></span><br><span class="line"><span class="string">            display:block;</span></span><br><span class="line"><span class="string">            height:20px;</span></span><br><span class="line"><span class="string">            line-height:20px;</span></span><br><span class="line"><span class="string">            font-size: 16px;</span></span><br><span class="line"><span class="string">            border-bottom:1px solid #ccc;</span></span><br><span class="line"><span class="string">            cursor:pointer;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .menuGroup &gt; div &#123;</span></span><br><span class="line"><span class="string">            height: 200px;</span></span><br><span class="line"><span class="string">            background-color:#fff;</span></span><br><span class="line"><span class="string">            display:none;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        $(function () &#123;</span></span><br><span class="line"><span class="string">            //需求：鼠标点击span，让他下面的div显示出来。让其他的div隐藏。</span></span><br><span class="line"><span class="string">            $("</span>.parentWrap span<span class="string">").click(function () &#123;</span></span><br><span class="line"><span class="string">//                $(this).next().show();</span></span><br><span class="line"><span class="string">//                //让其他的隐藏</span></span><br><span class="line"><span class="string">//                //点击的span的父亲li，的所有的兄弟元素li，的孩子元素div全部隐藏。</span></span><br><span class="line"><span class="string">//                $(this).parent("</span>li<span class="string">").siblings("</span>li<span class="string">").children("</span>div<span class="string">").hide();</span></span><br><span class="line"><span class="string">                //连式编程</span></span><br><span class="line"><span class="string">                $(this).next().show().parent("</span>li<span class="string">").siblings("</span>li<span class="string">").find("</span>div<span class="string">").hide();</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;ul class="</span>parentWrap<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;li class="</span>menuGroup<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;span class="</span>groupTitle<span class="string">"&gt;标题1&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;我是弹出来的div1&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class="</span>menuGroup<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;span class="</span>groupTitle<span class="string">"&gt;标题2&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;我是弹出来的div2&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class="</span>menuGroup<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;span class="</span>groupTitle<span class="string">"&gt;标题3&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;我是弹出来的div3&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class="</span>menuGroup<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;span class="</span>groupTitle<span class="string">"&gt;标题4&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;我是弹出来的div4&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>JQuery思维导图总结：</p>
<p><img src="JQuery-01.png" alt="JQuery思维导图"></p>
<p>xmind文件下载：<a href="JQuery.xmind" style=" text-decoration:none "><font color="lightGreen">点击下载</font></a></p>
<p>参考博文链接： </p>
<p><a href="https://blog.csdn.net/qq_37957971/article/details/82812002" target="_blank" rel="noopener">https://blog.csdn.net/qq_37957971/article/details/82812002</a> </p>
</iframe></iframe>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JQuery</tag>
        <tag>Ajax</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2019/12/04/%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86-02/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p><code>网页</code>和<code>用户</code>之间的交互，网页的动态效果。</p>
<a id="more"></a>
<h2 id="一、JavaScrip总结"><a href="#一、JavaScrip总结" class="headerlink" title="一、JavaScrip总结"></a>一、JavaScrip总结</h2><p>[TOC]</p>
<p>完整的JavaScript由<code>语言基础，BOM和DOM</code>组成。</p>
<blockquote>
<p>●ES语法：ECMAScript.主要版本ES5和ES6</p>
<p>●DOM：文档对象模型（Document Object Model），是W3C组织推荐的处理可扩展标志语言的标准编程接口。</p>
<p>●BOM：浏览器对象模型（Browser Object Model），提供了独立于内容的、可以与浏览器窗口进行互动的对象结构；且由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。</p>
</blockquote>
<h3 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h3><h4 id="1-1-引用方式"><a href="#1-1-引用方式" class="headerlink" title="1.1 引用方式"></a>1.1 引用方式</h4><p>​    <strong>1) 行间式：存在于行间事件中</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body id=<span class="string">"body"</span>onload=<span class="string">"body.style.backgroundColor='#Off'"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    <strong>2) 内联式：存在于页面Script标签中</strong> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params"></span>):</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    <strong>3) 外联式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="1-2-变量声明"><a href="#1-2-变量声明" class="headerlink" title="1.2 变量声明"></a>1.2 变量声明</h4><blockquote>
<h5 id="变量名的定义"><a href="#变量名的定义" class="headerlink" title="变量名的定义"></a>变量名的定义</h5><ol>
<li>JavaScript的变量名可以使用_，数字，字母，$组成，不能以数字开头。</li>
<li>声明变量使用 var 变量名; 的格式来进行声明</li>
</ol>
</blockquote>
<p>注意：</p>
<p>变量名是区分大小写的。</p>
<p>推荐使用驼峰式命名规则。</p>
<p>保留字不能用做<strong><em>变量名</em></strong>。</p>
<p>补充：</p>
<p><em>ES6新增const用来声明常量。一旦声明，其值就不能改变。</em></p>
<p>ECMA6 中添加了新的关键字，可以命令局部作用域</p>
<hr>
<p> <code>JavaScript</code>不区分整型和浮点型，就只有一种数字类型 。还有一种<strong>NaN</strong>，表示不是一个数字<em>（Not a Number）</em>，NaN表示当前转换的对象不是一个数字，但是他是数值类型 </p>
<hr>
<h4 id="1-3-字符串操作"><a href="#1-3-字符串操作" class="headerlink" title="1.3 字符串操作"></a>1.3 字符串操作</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>.length</strong></td>
<td>返回长度</td>
</tr>
<tr>
<td>.trim()</td>
<td>移除空白</td>
</tr>
<tr>
<td>.trimLeft()</td>
<td>移除左边的空白</td>
</tr>
<tr>
<td>.trimRight()</td>
<td>移除右边的空白</td>
</tr>
<tr>
<td>.charAt(n)</td>
<td>返回第n个字符</td>
</tr>
<tr>
<td><strong>.concat(value, …)</strong></td>
<td>拼接（一般用+来进行字符串）</td>
</tr>
<tr>
<td>.indexOf(substring, start)</td>
<td>子序列位置</td>
</tr>
<tr>
<td>.substring(from, to)</td>
<td>根据索引获取子序列</td>
</tr>
<tr>
<td><strong>.slice(start, end)</strong></td>
<td>切片</td>
</tr>
<tr>
<td>.toLowerCase()</td>
<td>小写</td>
</tr>
<tr>
<td>.toUpperCase()</td>
<td>大写</td>
</tr>
<tr>
<td><strong>.split(delimiter, limit)</strong></td>
<td>分割</td>
</tr>
</tbody>
</table>
<p>slice和substring的特点：</p>
<blockquote>
<p> <strong>string.slice(start, stop)和string.substring(start, stop)：</strong> </p>
<p> 两者的相同点：  </p>
<p> 如果start等于end，返回空字符串 </p>
<p> 如果stop参数省略，则取到字符串末 </p>
<p> 如果某个参数超过string的长度，<strong>这个参数会被替换为string的长度</strong></p>
<p> <strong>substirng()的特点：</strong> 如果 start &gt; stop ，start和stop将被交换 如果参数是负数或者不是数字，将会被0替换 </p>
<p> <strong>silce()的特点：</strong> </p>
<p> 如果 start &gt; stop 不会交换两者 </p>
<p> 如果start小于0，则切割从字符串末尾往前数的第abs(start)个的字符开始(包括该位置的字符) </p>
<p> 如果stop小于0，则切割在从字符串末尾往前数的第abs(stop)个字符结束(不包含该位置字符) </p>
</blockquote>
<p><strong>null和undefined区别：</strong></p>
<ul>
<li>null表示值是空，一般在需要指定或清空一个变量时才会使用，如 name=null;</li>
<li>undefined表示当声明一个变量但未初始化时，该变量的默认值是undefined。还有就是函数无明确的返回值时，返回的也是undefined。</li>
</ul>
<p>null表示变量的值是空(null可以手动清空一个变量的值，使得该变量变为object类型，值为null)，undefined则表示只声明了变量，但还没有赋值</p>
<p> <code>Number</code>转换为字符串的时候有<font color="lightGreen"><strong>默认模式</strong></font>和<font color="lightblue"><strong>基模式</strong></font>两种 </p>
<blockquote>
<p>//默认模式：十进制</p>
<p>str.toString();</p>
<p>//基模式：二进制，八进制和十六进制</p>
<p>str.toString(2);        //8|16</p>
</blockquote>
<hr>
<h4 id="1-4-数组操作"><a href="#1-4-数组操作" class="headerlink" title="1.4 数组操作"></a>1.4 数组操作</h4><p> 数组对象的作用是：使用单独的变量名来存储<strong>一系列</strong>的值。 </p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.length</td>
<td>数组的大小</td>
</tr>
<tr>
<td><strong>.push(ele)</strong></td>
<td>尾部追加元素</td>
</tr>
<tr>
<td><strong>.pop()</strong></td>
<td>获取尾部的元素</td>
</tr>
<tr>
<td>.unshift(ele)</td>
<td>头部插入元素</td>
</tr>
<tr>
<td>.shift()</td>
<td>头部移除元素</td>
</tr>
<tr>
<td>.slice(start, end)</td>
<td>切片</td>
</tr>
<tr>
<td>.reverse()</td>
<td>反转</td>
</tr>
<tr>
<td>.join(seq)</td>
<td>将数组元素连接成字符串</td>
</tr>
<tr>
<td>.concat(val, …)</td>
<td>连接数组</td>
</tr>
<tr>
<td><strong>.sort()</strong>0</td>
<td>排序</td>
</tr>
<tr>
<td><strong>.forEach()</strong></td>
<td>将数组的每个元素传递给回调函数</td>
</tr>
<tr>
<td>.splice()</td>
<td>删除元素，并向数组添加新元素。</td>
</tr>
<tr>
<td>.map()</td>
<td>返回一个数组元素调用函数处理后的值的新数组</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="1-5-查看数据类型"><a href="#1-5-查看数据类型" class="headerlink" title="1.5 查看数据类型"></a>1.5 查看数据类型</h4><p>typeof是一个一元运算符（就像++，–，！，- 等一元运算符），不是一个函数，也不是一个语句。</p>
<p>对变量或值调用 typeof 运算符将返回下列值之一：</p>
<ul>
<li>undefined - 如果变量是 Undefined 类型的</li>
<li>boolean - 如果变量是 Boolean 类型的</li>
<li>number - 如果变量是 Number 类型的</li>
<li>string - 如果变量是 String 类型的</li>
<li>object - 如果变量是一种引用类型或 Null 类型的</li>
</ul>
<p>:balance_scale:<strong>字符串转换为数字</strong>：内置函数parseInt()和parseFloat()，但是只会转换字符串中数字部分，出现非数字部分终止转换。</p>
<p><code>Number()</code>和<code>parseInt()</code>的区别：Number()转换包含非数字时，会返回NaN。</p>
<p>:gem:<strong>转换为Boolean</strong>：内置函数Boolean()</p>
<blockquote>
<p> 当转换字符串时：<br> <strong>非空即为true</strong><br> 当转换数字时：<br> <strong>非0即为true</strong><br> 当转换对象时：<br> <strong>非null即为true</strong> </p>
</blockquote>
<hr>
<h4 id="1-6-内置对象和方法"><a href="#1-6-内置对象和方法" class="headerlink" title="1.6 内置对象和方法"></a>1.6 内置对象和方法</h4><p> <code>JavaScript</code>的对象（Object）本质上是键值对的集合<code>（Hash结构）</code>，但是只能用字符串作为键。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="string">"name"</span>: <span class="string">"MLXG"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">"age"</span>]);</span><br><span class="line">&gt;&gt;&gt;‘MLXG’</span><br><span class="line">&gt;&gt;&gt;<span class="number">18</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="string">"name"</span>: <span class="string">"UZI"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt;name uzi</span><br><span class="line">&gt;&gt;&gt;age <span class="number">18</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>Date对象</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1：不指定参数</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d1.toLocaleString());</span><br><span class="line"><span class="comment">//方法2：参数为日期字符串</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2004/3/20 11:12"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d2.toLocaleString());</span><br><span class="line"><span class="keyword">var</span> d3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"04/03/20 11:12"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d3.toLocaleString());</span><br><span class="line"><span class="comment">//方法3：参数为毫秒数</span></span><br><span class="line"><span class="keyword">var</span> d3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">5000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d3.toLocaleString());</span><br><span class="line"><span class="built_in">console</span>.log(d3.toUTCString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法4：参数为年月日小时分钟秒毫秒</span></span><br><span class="line"><span class="keyword">var</span> d4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2004</span>,<span class="number">2</span>,<span class="number">20</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">300</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d4.toLocaleString());  <span class="comment">//毫秒并不直接显示</span></span><br></pre></td></tr></table></figure>
<p>Date对象的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="comment">//getDate()                 获取日</span></span><br><span class="line"><span class="comment">//getDay ()                 获取星期</span></span><br><span class="line"><span class="comment">//getMonth ()               获取月（0-11）</span></span><br><span class="line"><span class="comment">//getFullYear ()            获取完整年份</span></span><br><span class="line"><span class="comment">//getYear ()                获取年</span></span><br><span class="line"><span class="comment">//getHours ()               获取小时</span></span><br><span class="line"><span class="comment">//getMinutes ()             获取分钟</span></span><br><span class="line"><span class="comment">//getSeconds ()             获取秒</span></span><br><span class="line"><span class="comment">//getMilliseconds ()        获取毫秒</span></span><br><span class="line"><span class="comment">//getTime ()                返回累计毫秒数</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>JSON对象</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'&#123;"name": "Faker","age":18&#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="string">"name"</span>: <span class="string">"Faker"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="comment">//JSON字符串转换成对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(str1);		<span class="comment">//loads</span></span><br><span class="line"><span class="comment">//对象转换成JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj1);	<span class="comment">//dumps</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>正则表达式</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义正则表达式两种方式</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^[a-zA-Z]&#123;5,11&#125;"</span>);</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[a-zA-Z]&#123;5,11&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正则校验数据</span></span><br><span class="line">reg1.test(<span class="string">'tjjs13'</span>);</span><br><span class="line">reg2.test(<span class="string">'thyd32'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第一个注意事项，正则表达式中不能有空格*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局匹配</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">'egondsb dsb dsb'</span>;</span><br><span class="line">s1.match(<span class="regexp">/s/</span>)</span><br><span class="line">s1.match(<span class="regexp">/s/g</span>)</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9]&#123;5,9&#125;$/g</span></span><br><span class="line">reg2.test(<span class="string">'egondsb'</span>);</span><br><span class="line">reg2.test(<span class="string">'egondsb'</span>);</span><br><span class="line">reg2.lastIndex;</span><br><span class="line"><span class="comment">/*第二个注意事项，全局匹配时有一个lastIndex属性*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验时不传参数,默认匹配undefined</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9]&#123;5,9&#125;$/</span></span><br><span class="line">reg2.test();</span><br><span class="line">reg2.test(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/undefined/</span>;</span><br><span class="line">reg3.test();</span><br><span class="line"></span><br><span class="line"><span class="built_in">RegExp</span></span><br></pre></td></tr></table></figure>
<p>:jack_o_lantern::jack_o_lantern::jack_o_lantern:</p>
<hr>
<h4 id="1-7-JavaScript自定义对象"><a href="#1-7-JavaScript自定义对象" class="headerlink" title="1.7 JavaScript自定义对象"></a>1.7 JavaScript自定义对象</h4><h5 id="1-7-1-通过new-Object创建对象"><a href="#1-7-1-通过new-Object创建对象" class="headerlink" title="1.7.1 通过new Object创建对象"></a>1.7.1 通过new Object创建对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="built_in">Object</span>构造函数模式&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">方式一: <span class="built_in">Object</span>构造函数模式</span><br><span class="line">  * 套路: 先创建空<span class="built_in">Object</span>对象, 再动态添加属性/方法</span><br><span class="line">  * 适用场景: 起始时不确定对象内部数据</span><br><span class="line">  * 问题: 语句太多</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    一个人: name:"Tom", age: 12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 先创建空Object对象</span></span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    p = &#123;&#125; <span class="comment">//此时内部数据是不确定的</span></span><br><span class="line">    <span class="comment">// 再动态添加属性/方法</span></span><br><span class="line">    p.name = <span class="string">'Tom'</span></span><br><span class="line">    p.age = <span class="number">12</span></span><br><span class="line">    p.setName = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="built_in">console</span>.log(p.name, p.age)</span><br><span class="line">    p.setName(<span class="string">'Bob'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(p.name, p.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="1-7-2-工厂模式：通过function设计一个对象"><a href="#1-7-2-工厂模式：通过function设计一个对象" class="headerlink" title="1.7.2 工厂模式：通过function设计一个对象"></a>1.7.2 工厂模式：通过function设计一个对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">方式三: 工厂模式</span><br><span class="line">  * 套路: 通过工厂函数动态创建对象并返回</span><br><span class="line">  * 适用场景: 需要创建多个对象</span><br><span class="line">  * 问题: 对象没有一个具体的类型, 都是<span class="built_in">Object</span>类型</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age</span>) </span>&#123; <span class="comment">//返回一个对象的函数===&gt;工厂函数</span></span><br><span class="line">        <span class="keyword">var</span> obj = &#123;</span><br><span class="line">            name: name,</span><br><span class="line">            age: age,</span><br><span class="line">            setName: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.name = name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建2个人</span></span><br><span class="line">    <span class="keyword">var</span> p1 = createPerson(<span class="string">'Tom'</span>, <span class="number">12</span>)</span><br><span class="line">    <span class="keyword">var</span> p2 = createPerson(<span class="string">'Bob'</span>, <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// p1/p2是Object类型</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;</span><br><span class="line">            name: name,</span><br><span class="line">            price: price</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s = createStudent(<span class="string">'张三'</span>, <span class="number">12000</span>)</span><br><span class="line">    <span class="comment">// s也是Object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="1-7-3-为已存在的对象，增加新的方法"><a href="#1-7-3-为已存在的对象，增加新的方法" class="headerlink" title="1.7.3 为已存在的对象，增加新的方法"></a><strong>1.7.3 为已存在的对象，增加新的方法</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">方式三: 自定义构造函数模式</span><br><span class="line">  * 套路: 自定义构造函数, 通过<span class="keyword">new</span>创建对象</span><br><span class="line">  * 适用场景: 需要创建多个类型确定的对象</span><br><span class="line">  * 问题: 每个对象都有相同的数据, 浪费内存</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">createPerson.prototype.newP = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="keyword">this</span>.name + <span class="string">"改写后的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种形式</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="1-7-4-对象字面量"><a href="#1-7-4-对象字面量" class="headerlink" title="1.7.4 对象字面量"></a>1.7.4 对象字面量</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;对象字面量&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">方式四: 对象字面量模式</span><br><span class="line">  * 套路: 使用&#123;&#125;创建对象, 同时指定属性/方法</span><br><span class="line">  * 适用场景: 起始时对象内部数据是确定的</span><br><span class="line">  * 问题: 如果创建多个对象, 有重复代码</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> p = &#123;</span><br><span class="line">        name: <span class="string">'Tom'</span>,</span><br><span class="line">        age: <span class="number">12</span>,</span><br><span class="line">        setName: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="built_in">console</span>.log(p.name, p.age)</span><br><span class="line">    p.setName(<span class="string">'JACK'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(p.name, p.age)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p2 = &#123;  <span class="comment">//如果创建多个对象代码很重复</span></span><br><span class="line">        name: <span class="string">'Bob'</span>,</span><br><span class="line">        age: <span class="number">13</span>,</span><br><span class="line">        setName: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、BOM"><a href="#2、BOM" class="headerlink" title="2、BOM"></a>2、BOM</h3><p><code>BOM</code>即浏览器对象模型<strong>（Browser Object Model）</strong></p>
<p>浏览器对象包括：</p>
<h4 id="2-1-Window-窗口"><a href="#2-1-Window-窗口" class="headerlink" title="2.1 Window(窗口)"></a>2.1 Window(窗口)</h4><p> 所有浏览器都支持 window 对象。它表示浏览器窗口。</p>
<p> <em>如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。</em> </p>
<blockquote>
<p>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。</p>
<p>全局变量是 window 对象的属性。全局函数是window对象的方法</p>
</blockquote>
<ul>
<li>window.innerHeight - 浏览器窗口的内部高度</li>
<li>window.innerWidth - 浏览器窗口的内部宽度</li>
<li>window.open() - 打开新窗口</li>
<li>window.close() - 关闭当前窗口</li>
</ul>
<hr>
<h4 id="2-2-Navigator-浏览器"><a href="#2-2-Navigator-浏览器" class="headerlink" title="2.2 Navigator(浏览器)"></a>2.2 Navigator(浏览器)</h4><p> 浏览器对象，通过这个对象可以判定用户所使用的浏览器，包含了浏览器相关信息。 </p>
<blockquote>
<p> navigator.appName　　// Web浏览器全称 navigator.appVersion　　// Web浏览器厂商和版本的详细字符串 navigator.userAgent　　// 客户端绝大部分信息 navigator.platform　　　// 浏览器运行所在的操作</p>
</blockquote>
<hr>
<h4 id="2-3-Screen-客户端屏幕"><a href="#2-3-Screen-客户端屏幕" class="headerlink" title="2.3 Screen(客户端屏幕)"></a>2.3 Screen(客户端屏幕)</h4><p> screen对象表示用户的屏幕相关信息</p>
<blockquote>
<p>screen.width;            //用户的屏幕分辨率 </p>
<p>screen.availWidth;    //可用区域大小    </p>
</blockquote>
<hr>
<h4 id="2-4-History-访问历史"><a href="#2-4-History-访问历史" class="headerlink" title="2.4 History(访问历史)"></a>2.4 History(访问历史)</h4><p> history用于记录访问历史 </p>
<blockquote>
<p>history.forward()  // 前进一页 </p>
<p>history.back()  // 后退一页 </p>
<p>history.go(-2)    //上上一页</p>
</blockquote>
<hr>
<h4 id="2-5-Location-浏览器地址"><a href="#2-5-Location-浏览器地址" class="headerlink" title="2.5 Location(浏览器地址)"></a>2.5 Location(浏览器地址)</h4><p> window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。 </p>
<blockquote>
<p>location.href  获取URL </p>
<p>location.href=”URL” // 跳转到指定页面</p>
<p>location.reload() 重新加载页面 </p>
</blockquote>
<p>:seat::seat::seat::seat::seat:</p>
<h4 id="2-6-弹出框"><a href="#2-6-弹出框" class="headerlink" title="2.6  弹出框"></a>2.6  弹出框</h4><p> 浏览器上常见的弹出框有警告框，确认框，提示框 这些都是通过调用window的方法实现的。 </p>
<table>
<thead>
<tr>
<th style="text-align:center">关键字</th>
<th style="text-align:center">简介</th>
<th style="text-align:center">用法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">alert</td>
<td style="text-align:center">警告框</td>
<td style="text-align:center">常用于消息提示，比如注册成功等等</td>
</tr>
<tr>
<td style="text-align:center">confirm</td>
<td style="text-align:center">确认框</td>
<td style="text-align:center">常用于危险性操作的确认提示。 比如删除一条记录的时候，弹出确认框</td>
</tr>
</tbody>
</table>
<h4 id="2-7-计时器"><a href="#2-7-计时器" class="headerlink" title="2.7 计时器"></a>2.7 计时器</h4><table>
<thead>
<tr>
<th style="text-align:left">关键字</th>
<th style="text-align:left">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">setTimeout</td>
<td style="text-align:left">只执行一次</td>
</tr>
<tr>
<td style="text-align:left">setInterval</td>
<td style="text-align:left">不停地重复执行函数s，etInterval(函数名, 重复执行的时间间隔毫秒数 );</td>
</tr>
<tr>
<td style="text-align:left">clearInterval</td>
<td style="text-align:left">终止重复执行</td>
</tr>
<tr>
<td style="text-align:left">document.write()</td>
<td style="text-align:left">不要在setInterval调用的函数中使用document.write();</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="3、DOM"><a href="#3、DOM" class="headerlink" title="3、DOM"></a>3、DOM</h3><p><code>DOM</code><strong><em>(Document Object Model)</em></strong>是一套对文档的内容进行抽象和概念化的方法。</p>
<p>当网页被加载时，浏览器会创建页面的文档对象模型，HTML DOM模型被构造为对象的树。</p>
<p><strong>HTML文档树</strong></p>
<p><img src="https://i.loli.net/2019/06/03/5cf4fbd1b638422724.png" alt="文档树"></p>
<p>DOM标准规定HTML文档中的<em>每个成分都是一个节点(node)</em>：</p>
<ul>
<li>文档节点(<strong>document对象</strong>)：代表整个文档</li>
<li>元素节点(<strong>element 对象</strong>)：代表一个元素（标签）</li>
<li>文本节点(<strong>text对象</strong>)：代表元素（标签）中的文本</li>
<li>属性节点(<strong>attribute对象</strong>)：代表一个属性，元素（标签）才有属性</li>
<li>注释是注释节点(comment对象)</li>
</ul>
<p><img src="DOM.png" alt="DOM"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端总结</title>
    <url>/2019/12/02/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>前端部分的<font color="blue">HTML+CSS</font>总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="一、HTML部分："><a href="#一、HTML部分：" class="headerlink" title="一、HTML部分："></a>一、HTML部分：</h2><p> <code>HTML</code>是（<strong><em>Hyper Text Markup Language</em></strong>）超文本标记语言 的缩写</p>
<h3 id="1、基本元素"><a href="#1、基本元素" class="headerlink" title="1、基本元素"></a>1、基本元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>tag_01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>一号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>带强调意义的粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>带强调意义的斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>预格式，是保证标记里面内容格式不变<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">		public class HelloWorld &#123;</span><br><span class="line">    	public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println("Hello World");</span><br><span class="line">    		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">del</span>&gt;</span>删除效果<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<font color="gold">页面展示</font>

<p><img src="tag.png" alt="tag_01"></p>
<hr>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>tag_02<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>图片标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://how2j.cn/example.gif"</span> <span class="attr">alt</span>=<span class="string">"替换图片文字"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--alt表示当图片不存在时的，替换文字--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"页面跳转的地址"</span>&gt;</span>超链接显示文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>表格相关知识<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--border表示表格带边框--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--单元格宽度的绝对值，同列的会自动继承--&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--align表示设置表格内文本内容位置--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50px"</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>2,3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> &gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--bgcolor设置背景色--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"pink"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--合并三列--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>a,b,c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>无序1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>无序2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>有序1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>有序2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--div布局器，配合CSS实现页面布局--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是第二个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是第二个Span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">		div是块元素，即自动换行</span><br><span class="line">		常见的块元素还有h1,table,p</span><br><span class="line">		span是内联元素，即不会换行</span><br><span class="line">		常见的内联元素还有img,a,b,strong</span><br><span class="line">	<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>字体<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"green"</span>&gt;</span>绿色默认大小字体<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">size</span>=<span class="string">"+2"</span>&gt;</span>红色大2号字体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>内敛框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://how2j.cn"</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<font color="gold">页面展示</font>

<p><img src="tag_02.png" alt="tag_02"></p>
<hr>
<h3 id="2、表单元素"><a href="#2、表单元素" class="headerlink" title="2、表单元素"></a>2、表单元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>表单元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--formb表单用于向服务器提交数据--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">		文本框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		密码框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>--------------------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 若没有分组，就会出现多选的情况,分组即name相同 --&gt;</span></span><br><span class="line">		单选框：单选1 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r1"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span>单选2 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>--------------------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		复选框：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 一般要加上Value值不然，表单提交后得不到所选项 --&gt;</span></span><br><span class="line">		复选1<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"复选1"</span>&gt;</span></span><br><span class="line">		复选2<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"复选2"</span>&gt;</span></span><br><span class="line">		复选3<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"复选3"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>--------------------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		下拉列表框：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- select的size属性可以设置多个复选项合并 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- select的multiple="multiple"可以多选 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">select</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>--------------------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		文本域：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span>天天向上，好好学习，早日过六级</span><br><span class="line">		<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>--------------------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		普通按钮：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		提交按钮：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		重置按钮:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- button标签，内容可以为文字或图片 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://how2j.cn/example.gif"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>:kissing_smiling_eyes:<font color="pink">页面展示</font></p>
<p><img src="form.png" alt="form"></p>
<hr>
<h2 id="二、CSS语法"><a href="#二、CSS语法" class="headerlink" title="二、CSS语法"></a>二、CSS语法</h2><h3 id="1、CSS思维导图"><a href="#1、CSS思维导图" class="headerlink" title="1、CSS思维导图"></a>1、CSS思维导图</h3><p><img src="2、CSS.png" alt="CSS"></p>
<h3 id="2、CSS应用例子"><a href="#2、CSS应用例子" class="headerlink" title="2、CSS应用例子"></a>2、CSS应用例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS-Demo.01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">	body&#123;</span><br><span class="line">    font-family:"宋体";</span><br><span class="line">    font-size:13px;</span><br><span class="line">    color:#666666;</span><br><span class="line">    width:643px;</span><br><span class="line">    &#125;</span><br><span class="line">    .bold&#123;</span><br><span class="line">    	font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">    div.topdiv&#123;</span><br><span class="line">    	border-bottom-style: solid;</span><br><span class="line">    	border-bottom-color: silver;</span><br><span class="line">    	border-bottom-width: 1;</span><br><span class="line">    	padding-bottom: 10px;</span><br><span class="line">    	margin-bottom: 15px;</span><br><span class="line">    &#125;</span><br><span class="line">    .floatright&#123;</span><br><span class="line">    	float:right;</span><br><span class="line">    &#125;</span><br><span class="line">    .floatleft&#123;</span><br><span class="line">    	float:left;</span><br><span class="line">    &#125;</span><br><span class="line">    a&#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    color:#336699;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     div#thirdDiv span&#123;</span><br><span class="line">        color:darkgray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div.clearLeft&#123;</span><br><span class="line">		clear:left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topdiv"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"margin-right: 5px"</span> <span class="attr">src</span>=<span class="string">"img/1.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>最新动态<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"floatright"</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.png"</span> <span class="attr">style</span>=<span class="string">"margin-right: 5px"</span> <span class="attr">class</span>=<span class="string">"floatright"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"floatleft"</span> <span class="attr">style</span>=<span class="string">"margin-right: 15px"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/4.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"background-image: url(img/5.png);padding: 5px"</span>&gt;</span>6551<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"floatleft show1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 5px"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span>&gt;</span>热门回答，来自 机械<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关注话题<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.png"</span> <span class="attr">class</span>=<span class="string">"floatright"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>人类史上令人叹为观止的极限精度制造成果有哪些？<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Vicent Fu<span class="tag">&lt;/<span class="name">b</span>&gt;</span>, Materials Science,PhD<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/6.png"</span> <span class="attr">class</span>=<span class="string">"floatleft"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">"floatleft text"</span> <span class="attr">style</span>=<span class="string">"line-height:170%;margin-left:15px;width:367px"</span>&gt;</span></span><br><span class="line">		说到精度，就不得不提在材料学中最重要的一个方面：表征。要项研究一种材料性能，握在手里把玩时远远不够的，就算你拿出放大镜离近了看，也只能看到表面的一些坑坑洼洼，而为了知晓一种材料的纤维结构，科学家至少要下到纳米级（放大千倍），如果要获得更深...</span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>显示全部 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      	<span class="symbol">&amp;nbsp;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"thirdDiv"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/7.png"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span>&gt;</span>关注问题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/8.png"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span>&gt;</span>867条评论<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/9.png"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span>&gt;</span>作者保留权利<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearLeft"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 清除浮动 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bottom"</span> <span class="attr">style</span>=<span class="string">"margin-top:20px;border-top-style:solid;border-top-width:1px;border-top-color:#ddd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<font color="red">页面展示</font>

<p><img src="CSS_Demo01.png" alt="CSS"></p>
<blockquote>
<p>后面还需继续总结，前端太厉害了—</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Jsoup</title>
    <url>/2019/11/03/Jsoup/</url>
    <content><![CDATA[<p><code>Jsoup</code>是一款Java的HTML解析器,主要用来对HTML解析。</p>
<a id="more"></a>
<p>:artificial_satellite:<a href=" https://www.open-open.com/jsoup/ " style="text-decoration= none " target="_blank" rel="noopener"><font color="red">官方中文文档</font></a></p>
<hr>
<p>:cowboy_hat_face:<strong>个人总结思维导图</strong></p>
<p><img src="E:\Hexo\source\_posts\网络爬虫.png" alt="网络爬虫"></p>
<hr>
<p>:open_mouth:EG.</p>
<h2 id="爬取腾讯首页全部图片"><a href="#爬取腾讯首页全部图片" class="headerlink" title="爬取腾讯首页全部图片"></a>爬取腾讯首页全部图片</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Connection;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">meizi</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载图片到指定目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgUrl   图片URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downImages</span><span class="params">(String filePath, String imgUrl)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若指定文件夹没有，则先创建</span></span><br><span class="line">        File dir = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 截取图片文件名</span></span><br><span class="line">        String fileName = imgUrl.substring(imgUrl.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>, imgUrl.length());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件名里面可能有中文或者空格，所以这里要进行处理。但空格又会被URLEncoder转义为加号</span></span><br><span class="line">            String urlTail = URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="comment">// 因此要将加号转化为UTF-8格式的%20</span></span><br><span class="line">            imgUrl = imgUrl.substring(<span class="number">0</span>, imgUrl.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>) + urlTail.replaceAll(<span class="string">"\\+"</span>, <span class="string">"\\%20"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 写出的路径</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath + File.separator + fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取图片URL</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(imgUrl);</span><br><span class="line">            <span class="comment">// 获得连接</span></span><br><span class="line">            URLConnection connection = url.openConnection();</span><br><span class="line">            <span class="comment">// 设置10秒的相应时间</span></span><br><span class="line">            connection.setConnectTimeout(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">            <span class="comment">// 获得输入流</span></span><br><span class="line">            InputStream in = connection.getInputStream();</span><br><span class="line">            <span class="comment">// 获得输出流</span></span><br><span class="line">            BufferedOutputStream out = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">            <span class="comment">// 构建缓冲区</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> size;</span><br><span class="line">            <span class="comment">// 写入到文件</span></span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != (size = in.read(buf))) &#123;</span><br><span class="line">                out.write(buf, <span class="number">0</span>, size);</span><br><span class="line">            &#125;</span><br><span class="line">            out.close();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 利用Jsoup获得连接</span></span><br><span class="line">        Connection connect = Jsoup.connect(<span class="string">"http://www.qq.com"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到Document对象</span></span><br><span class="line">            Document document = connect.get();</span><br><span class="line">            <span class="comment">// 查找所有img标签</span></span><br><span class="line">            Elements imgs = document.getElementsByTag(<span class="string">"img"</span>);</span><br><span class="line">            System.out.println(<span class="string">"共检测到下列图片URL："</span>);</span><br><span class="line">            System.out.println(<span class="string">"开始下载"</span>);</span><br><span class="line">            <span class="comment">// 遍历img标签并获得src的属性</span></span><br><span class="line">            <span class="keyword">for</span> (Element element : imgs) &#123;</span><br><span class="line">                <span class="comment">//获取每个img标签URL "abs:"表示绝对路径</span></span><br><span class="line">                String imgSrc = element.attr(<span class="string">"abs:src"</span>);</span><br><span class="line">                <span class="comment">// 打印URL</span></span><br><span class="line">                System.out.println(imgSrc);</span><br><span class="line">                <span class="comment">//下载图片到本地</span></span><br><span class="line">                meizi.downImages(<span class="string">"d:/img"</span>, imgSrc);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"下载完成"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>WebMagic</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>WebMagic</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2019/10/30/Maven/</url>
    <content><![CDATA[<p><code>Maven</code>是专门用于构建和管理Java相关项目的工具。</p>
<a id="more"></a>
<p>一、Maven下载和配置</p>
<p>官方下载： <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a> </p>
<p>Maven的主要用途是：</p>
<blockquote>
<p>1、相同的项目结构</p>
<p>​    <em>1) 有一个pom.xml用于维护当前项目都用了那些jar包</em></p>
<p>​    <em>2)所有的java代码都放在src/main/java下面</em></p>
<p>​    <em>3)所有的测试代码都放在src/test/java下面</em></p>
<p>2、统一维护jar包</p>
<p>​    所有的jar包都放在”<a href="https://how2j.cn/k/maven/maven-repositories/1330.html" target="_blank" rel="noopener">仓库</a>“ 里，然后哪个项目需要用到这个jar包，只需要给出jar包的名称和版本号就行了。 这样<strong>jar包就实现了共享</strong></p>
</blockquote>
<p>二、Maven仓库</p>
<p>所谓的仓库就是存放项目需要的jar包的。</p>
<p><code>Maven采用一个仓库，多个项目的方式，让多个项目共享一个仓库里的相同jar包。</code></p>
<p> maven 会默认从maven官方提供的服务器下载jar包。<br>而官方服务器在国外，因为大家都知道的原因，网速很慢，而且容易卡断。 为了便于快速下载相关jar包，可以使用国内maven 阿里云的下载地址：<a href="https://how2j.cn/k/maven/maven-repositories/1330.html#step5570" target="_blank" rel="noopener">使用阿里云下载路径</a> </p>
<p>命令行创建maven项目：</p>
<blockquote>
<p>mvn archetype:generate -DgroupId=com.XXX -DartifactId=j2se -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</p>
</blockquote>
<p> <strong>archetype:generate</strong> 表示创建个项目<br><strong>-DgroupId</strong> 项目包名: com.XXX<br><strong>-DartifactId</strong> 项目名称: j2se<br><strong>-DarchetypeArtifactId</strong> 项目类型: maven-archetype-quickstart<br><strong>-DinteractiveMode:false</strong> 表示前面参数都给了，就不用一个一个地输入了 </p>
<p>运行package命令：</p>
<blockquote>
<p>mvn package</p>
</blockquote>
<p> <strong>注：</strong> 运行这个命令之前要先把当前路径切换到 j2se来</p>
<blockquote>
<p>cd j2se</p>
</blockquote>
<p>package做了很多事情，编译，测试，打包，最后生成了一个<strong>j2se-1.0-SNAPSHOT.jar</strong>包 </p>
<p> 最后会看到一个绿色的BUILD SUCCESS </p>
<p>执行Jar：</p>
<blockquote>
<p>java -cp target/j2se-1.0-SNAPSHOT.jar com.XXX.App </p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j使用总结</title>
    <url>/2019/10/29/log4j/</url>
    <content><![CDATA[<p>  日志是应用软件中不可缺少的部分，Apache的开源项目<a href="http://www.codeceo.com/article/log4j-usage.html" target="_blank" rel="noopener">log4j</a>是一个功能强大的日志组件,提供方便的日志记录。  在apache网站：<a href="http://jakarta.apache.org/log4j" target="_blank" rel="noopener">jakarta.apache.org/log4j</a> 可以免费下载到Log4j最新版本的软件包。 </p>
<a id="more"></a>
<h2 id="一、Log4j的基本使用方法"><a href="#一、Log4j的基本使用方法" class="headerlink" title="一、Log4j的基本使用方法"></a>一、Log4j的基本使用方法</h2><p>1、新建一个Java工程，导入<a herf="E:\Hexo\source\_posts\log4j\log4j-1.2.17.jar"><u>log4j-1.2.17.jar</u></a></p>
<p>2、src同级创建并设置log4j.properties</p>
<blockquote>
<p>  #配置根Logger<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">log4j.rootLogger =  <strong>[</strong> level <strong>]</strong>  , appenderName1 , appenderName2 , …<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img"><br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">#配置日志信息输出目的地Appender<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">log4j.appender.appenderName = fully.qualified.name.of.appender.class<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　log4j.appender.appenderName.option1 = value1<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　…<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　log4j.appender.appenderName.optionN = valueN<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img"><br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">#配置日志信息的格式（布局）<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　log4j.appender.appenderName.layout.option1 = value1<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　…<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　log4j.appender.appenderName.layout.optionN = valueN  </p>
</blockquote>
<p>其中 <strong>[level]</strong> 是日志输出级别，共有5级：</p>
<blockquote>
<p>FATAL   0<br>ERROR   3<br>WARN    4<br>INFO    6<br>DEBUG   7 </p>
</blockquote>
<p> <strong>Appender</strong> 为日志输出目的地，Log4j提供的appender有以下几种： </p>
<blockquote>
<p>​    org.apache.log4j.ConsoleAppender（控制台），<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">org.apache.log4j.FileAppender（文件），<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方） </p>
</blockquote>
<p> <strong>Layout</strong>：日志输出格式，Log4j提供的layout有以下几种： </p>
<blockquote>
<p>​    org.apache.log4j.HTMLLayout（以HTML表格形式布局），<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">org.apache.log4j.PatternLayout（可以灵活地指定布局模式），<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息） </p>
</blockquote>
<p> <strong>打印参数:</strong> Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下 </p>
<blockquote>
<p>​            <strong>%m</strong>  输出代码中指定的消息<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　<strong>%p</strong>  输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　<strong>%r</strong>  输出自应用启动到输出该log信息耗费的毫秒数<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　<strong>%c</strong>  输出所属的类目，通常就是所在类的全名<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　<strong>%t</strong>  输出产生该日志事件的线程名<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　<strong>%n</strong>  输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　<strong>%d</strong>  输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日 22 ： 10 ： 28 ， 921<br><img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img">　　<strong>%l</strong>  输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) <img src="http://www.blogjava.net/Images/OutliningIndicators/None.gif" alt="img"> </p>
</blockquote>
<p>应用举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 设置高于DEBUG级别的日志输出到控制台,D,E是别名###</span><br><span class="line">log4j.rootLogger = debug,stdout,D,E</span><br><span class="line"></span><br><span class="line">### 输出信息到控制台 ###</span><br><span class="line">		#ConsoleAppender控制台</span><br><span class="line">log4j.appender.stdout = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target = System.out</span><br><span class="line">		#PatternLayout是布局格式</span><br><span class="line">log4j.appender.stdout.layout = org.apache.log4j.PatternLayout</span><br><span class="line">		#ConversionPattern布局显示器</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span><br><span class="line"></span><br><span class="line">### 输出DEBUG 级别以上的日志到=E://logs/error.log ###</span><br><span class="line">		#DailyRollingFileAppender每天只产生一个日志文件</span><br><span class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.D.File = E://logs/log.log</span><br><span class="line">log4j.appender.D.Append = true</span><br><span class="line">log4j.appender.D.Threshold = DEBUG </span><br><span class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line"></span><br><span class="line">### 输出ERROR 级别以上的日志到=E://logs/error.log ###</span><br><span class="line">log4j.appender.E = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.E.File =E://logs/error.log </span><br><span class="line">log4j.appender.E.Append = true</span><br><span class="line">		#Threshold限制只输出ERROR级别以上的日志</span><br><span class="line">log4j.appender.E.Threshold = ERROR </span><br><span class="line">log4j.appender.E.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br></pre></td></tr></table></figure>
<p>除了使用log4j.properties,也可以使用xml格式进行配置。</p>
<p>如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//log4j/log4j Configuration//EN"</span> <span class="meta-string">"log4j.dtd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">"http://jakarta.apache.org/log4j/"</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%d %-5p %c.%M:%L - %m%n"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- specify the logging level for loggers from other libraries --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.opensymphony"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">&lt;!-- for all other loggers log only debug and above log messages --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span> <span class="attr">value</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、设置日志内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> log4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.PropertyConfigurator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLog4j</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取日志记录器，得到本类的字节码文件</span></span><br><span class="line">	<span class="keyword">static</span> Logger logger = Logger.getLogger(TestLog4j<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//Log4j日志格式指定配置文件</span></span><br><span class="line">		PropertyConfigurator.configure(<span class="string">"log4j.properties"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//调用对应方法</span></span><br><span class="line">            logger.trace(<span class="string">"跟踪信息"</span>);</span><br><span class="line">            logger.debug(<span class="string">"调试信息"</span>);</span><br><span class="line">            logger.info(<span class="string">"输出信息"</span>);</span><br><span class="line">            logger.warn(<span class="string">"警告信息"</span>);</span><br><span class="line">            logger.error(<span class="string">"错误信息"</span>);</span><br><span class="line">            logger.fatal(<span class="string">"致命信息"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、Web项目中使用Log4j"><a href="#二、Web项目中使用Log4j" class="headerlink" title="二、Web项目中使用Log4j"></a>二、Web项目中使用Log4j</h2><p>:call_me_hand:在J2EE应用使用log4j，必须先在启动服务时加载Log4j的配置文件进行初始化，可以在web.xml中进行。</p>
<p>1、web应用的log4j使用基本上都采用：新建一个servlet，这个servlet在init函数中为log4j执行配置。一般就是读入配置文件，所以需要在web.xml中为这个servlet配置，同时设定load-on-startup为1。</p>
<p>2、这个servlet配置log4j就是读出配置文件，然后调用configure函数。这里有两个问题：</p>
<p>​    1）需要知道文件在哪里</p>
<p>​    2）需要正确的文件类型</p>
<p>3、配置文件位置在web.xml中配置一个param即可，路径一般是相对于web的root目录</p>
<p>4、文件类型一般有两种，一个是Java的property文件，另一种是xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span> <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">encoding</span>=<span class="string">"UTF-8"</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"htt p://java.sun.com/xml/ns/javaee"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>LogLearning<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Log4JTestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mucfc.Log4JTestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--用来启动 log4jConfigLocation的servlet --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Log4JInitServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.mucfc.Log4JInitServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4j-properties-location<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Log4JTestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>简易的JDBC模板类</title>
    <url>/2019/10/25/%E7%AE%80%E6%98%93%E7%9A%84JDBC%E6%A8%A1%E6%9D%BF%E7%B1%BB/</url>
    <content><![CDATA[<p><strong>简单的JDBC模板</strong></p>
<a id="more"></a>
<blockquote>
<p>参考的链接： </p>
</blockquote>
<p>1.tb.user:用户信息表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">	<span class="keyword">id</span>		<span class="built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="keyword">name</span>	<span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="literal">null</span>,</span><br><span class="line">    age		<span class="built_in">INT</span> <span class="literal">null</span>,</span><br><span class="line">    gender	<span class="built_in">CHAR</span>(<span class="number">2</span>)	<span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">password</span>  <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="literal">null</span>,</span><br><span class="line">    telephone <span class="built_in">varchar</span>(<span class="number">11</span>) <span class="literal">null</span>,</span><br><span class="line">    birthday  <span class="built_in">date</span>        <span class="literal">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>2.db.propeties:数据库连接配置文件</p>
<p>事先要导入驱动程序：&lt; a herf=”/mysql-connector-java-5.0.8-bin.jar”&gt;mysql-connector-java-5.0.8-bin.jar</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#jdbc MySQL数据库驱动</span></span><br><span class="line">DriverName=com.mysql.jdbc.Driver</span><br><span class="line">#数据库的连接地址，phaseiv为需要用到的表所在的数据库名</span><br><span class="line">Url=jdbc:mysql:<span class="comment">//localhost:3306/phaseiv?serverTimezone=UTC</span></span><br><span class="line">#数据库的用户名</span><br><span class="line">UserName=</span><br><span class="line">#数据库密码</span><br><span class="line">UserPassword=</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Oracle数据库连接</p>
<p>#jdbc数据库驱动<br>jdbc.driverClassName=oracle.jdbc.driver.OracleDriver</p>
<p>#数据库的连接地址<br>jdbc.url=jdbc:oracle:thin:@127.0.0.1:1521:XE</p>
</blockquote>
<blockquote>
<p>开发中使用properties配置文件，方便后期维护。</p>
<ol>
<li>文件位置： 任意，建议src下</li>
<li>文件名称：任意，扩展名为properties</li>
<li>文件内容：一行一组数据，格式“key=value”　　<ol>
<li>key 命名自定义，如果是多单词，习惯使用点分割，例如jdbc.driver</li>
<li>value 值不支持中文，如果有需要使用非英文字符，将进行Unicode转化</li>
</ol>
</li>
</ol>
<p>　　配置文件只需要加载一次，提供静态代码，当前类被加载到内存执行</p>
</blockquote>
<p>3.ConfigUtil.java:black_heart::读取数据库连接的配置文件的工具类</p>
<p>处于工具层（utils）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  <span class="doctag">@ClassName</span>: ConfigUtil </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 读取数据库配置文件中的工具类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line">	<span class="comment">// 读取数据库配置文件</span></span><br><span class="line">    private static InputStream inputStream = ConfigUtil.class.getResourceAsStream("/db.properties");</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态初始化块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    		properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    		<span class="keyword">try</span> &#123;</span><br><span class="line">				properties.load(inputStream);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">    		properties.getProperty(<span class="string">"Url"</span>);</span><br><span class="line">    		properties.getProperty(<span class="string">"UserName"</span>);</span><br><span class="line">            properties.getProperty(<span class="string">"UserPassword"</span>);</span><br><span class="line">            properties.getProperty(<span class="string">"DriverName"</span>);</span><br><span class="line">    		</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取数据库配置</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.<em>DBUtil : 连接数据库的工具类</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  <span class="doctag">@ClassName</span>: DBUtil </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 连接数据库的工具类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取数据库的配置信息</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String URL = ConfigUtil.getProperties().getProperty(<span class="string">"Url"</span>);	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String USER = ConfigUtil.getProperties().getProperty(<span class="string">"UserName"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String PASSWORD = ConfigUtil.getProperties().getProperty(<span class="string">"UserPassword"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DRIVER_NAME = ConfigUtil.getProperties().getProperty(<span class="string">"DriverName"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载数据库驱动</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    	<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(DRIVER_NAME);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			System.err.println(<span class="string">"error: fail to init the driver of database"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取数据库连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5.User.java: 用户信息类</p>
<blockquote>
<p>处于bean层，数据的载体</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line">    <span class="keyword">private</span> String birthday;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> gender;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.gender = gender;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTelephone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> telephone;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTelephone</span><span class="params">(String telephone)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.telephone = telephone;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(String birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", gender="</span> + gender + <span class="string">", password="</span> + password</span><br><span class="line">				+ <span class="string">", telephone="</span> + telephone + <span class="string">", birthday="</span> + birthday + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6.UserDao.java : 数据访问层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="comment">//获取数据库连接</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection = DBUtil.getConnection();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insertNewUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into tb_user(name, age, gender, password, telephone, birthday) values (?,?,?,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement(sql)) &#123;</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, user.getName());</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, user.getAge());</span><br><span class="line">            preparedStatement.setString(<span class="number">3</span>, user.getGender());</span><br><span class="line">            preparedStatement.setString(<span class="number">4</span>, user.getPassword());</span><br><span class="line">            preparedStatement.setString(<span class="number">5</span>, user.getBirthday());</span><br><span class="line">            preparedStatement.setString(<span class="number">6</span>, user.getTelephone());</span><br><span class="line">            <span class="keyword">return</span> preparedStatement.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//查询所有用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id, name, age, gender, password, telephone, birthday from tb_user"</span>;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement(sql))</span><br><span class="line">             ResultSet resultSet = (ResultSet) preparedStatement.executeQuery()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                User user = <span class="keyword">new</span> User();</span><br><span class="line">                user.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">                user.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">                user.setAge(resultSet.getInt(<span class="string">"age"</span>));</span><br><span class="line">                user.setGender(resultSet.getString(<span class="string">"gender"</span>));</span><br><span class="line">                user.setPassword(resultSet.getString(<span class="string">"password"</span>));</span><br><span class="line">                user.setTelephone(resultSet.getString(<span class="string">"telephone"</span>));</span><br><span class="line">                user.setBirthday(resultSet.getString(<span class="string">"birthday"</span>));</span><br><span class="line">                list.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUserById</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"UPDATE tb_user SET name = ? , gender = ? , age = ? , password = ?, birthday = ?, telephone = ? where id = ?"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, user.getName());</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, user.getGender());</span><br><span class="line">            preparedStatement.setInt(<span class="number">3</span>, user.getAge());</span><br><span class="line">            preparedStatement.setString(<span class="number">4</span>, user.getPassword());</span><br><span class="line">            preparedStatement.setString(<span class="number">5</span>, user.getBirthday());</span><br><span class="line">            preparedStatement.setString(<span class="number">6</span>, user.getTelephone());</span><br><span class="line">            preparedStatement.setInt(<span class="number">7</span>, user.getId());</span><br><span class="line">            <span class="keyword">return</span> preparedStatement.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from tb_user where id = ?"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, id);</span><br><span class="line">            <span class="keyword">return</span> preparedStatement.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7.<em>UserService.java : 业务逻辑层</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8.<em>UserServiceImpl.java : 业务逻辑层的实现类</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.selectAllUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.insertNewUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.updateUserById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.deleteUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9.<em>AppTest.java : 程序测试类</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unit test for simple App.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//test getAllUser() method</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; allUsers = userService.getAllUser();</span><br><span class="line">        System.out.println(<span class="string">"获取所有的用户信息 : "</span> + allUsers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//test addUser method</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"addUser"</span>);</span><br><span class="line">        user.setGender(<span class="string">"男"</span>);</span><br><span class="line">        user.setAge(<span class="number">0</span>);</span><br><span class="line">        user.setPassword(<span class="string">"pwd"</span>);</span><br><span class="line">        user.setTelephone(<span class="string">"000000"</span>);</span><br><span class="line">        user.setBirthday(<span class="string">"0000-00-00"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否成功添加用户信息 : "</span> + userService.addUser(user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//test updateUser method</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"updateUser"</span>);</span><br><span class="line">        user.setGender(<span class="string">"女"</span>);</span><br><span class="line">        user.setAge(<span class="number">0</span>);</span><br><span class="line">        user.setPassword(<span class="string">"pwd"</span>);</span><br><span class="line">        user.setTelephone(<span class="string">"111111"</span>);</span><br><span class="line">        user.setBirthday(<span class="string">"1111-11-11"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否成功更新用户信息 : "</span> + userService.updateUser(user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//test deleteUser method</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"是否成功删除用户信息 : "</span> + userService.deleteUser(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>@Test标签是为了不写mian方法，使用junit测试设计的一个小功能。</p>
<p> 一个JUnit4的单元测试用例执行顺序为：<br>@BeforeClass -&gt; @Before -&gt; @Test -&gt; @After -&gt; @AfterClass;  </p>
<p> 使用junit就方便多了，这是<a href="http://www.baidu.com/s?wd=单元测试&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YvnjfLuyN9PWw9PjwbPWKh0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHfsnW6vPj01" target="_blank" rel="noopener">单元测试</a>，你想测哪个方法就写一个对应的测试方法，然后用junit运行。每个方法之间是独立的，非常灵活。 </p>
<p>参考链接： <a href="https://blog.csdn.net/qq_40794973/article/details/83579049" target="_blank" rel="noopener">https://blog.csdn.net/qq_40794973/article/details/83579049</a> </p>
</blockquote>
]]></content>
      <categories>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序员编程规范</title>
    <url>/2019/09/17/Java%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>程序员的自我修养：人类可读，计算机可执行</p>
<a id="more"></a>
<p>内容来自：《代码的整洁之道》</p>
<h2 id="1、简单明了的名字"><a href="#1、简单明了的名字" class="headerlink" title="1、简单明了的名字"></a>1、简单明了的名字</h2><p><strong>普通变量：</strong></p>
<ol>
<li>使用具有实际意义且熟悉的单词，单词可缩写但尽量保留元音字母,首单词小写，以后各单词首字母大写。</li>
<li>不要使用大小写区别变量。</li>
<li>集合引用名用复数</li>
</ol>
<p><strong>包命名：</strong></p>
<ol>
<li>一个小写单词表示。</li>
</ol>
<p><strong>类命名:</strong></p>
<ol>
<li>类和接口的每个单词（名词）的首字母都要大写</li>
<li>具有成组相关属性，静态服务或者常量的类名字用复数形式</li>
</ol>
<p><strong>方法命名：</strong></p>
<p>​    1. 方法名中的第一个单词小写，其后每个单词的第一个字母大写</p>
<p>　2. 用动词命名方法</p>
<p>　3. 遵循JavaBean中命名属性访问函数方法：set，get，is</p>
<p><strong>参数命名：</strong></p>
<ol>
<li>构造函数或者“set”方法给字段分配参数赋值，参数名应该和字段名相同</li>
</ol>
<p><strong>常量命名：</strong></p>
<ol>
<li>常量每个单词均大写，单词之间使用下划线连接</li>
</ol>
<h2 id="2、最好的程序员是代码即注释"><a href="#2、最好的程序员是代码即注释" class="headerlink" title="2、最好的程序员是代码即注释"></a>2、最好的程序员是代码即注释</h2><p>注释的功能是表达一些代码不足以解释其逻辑行为，要将自身代码细化，能让人顺着代码了解逻辑。</p>
<p>但是，为了节省时间，最好在代码逻辑（<strong>类、接口、字段和方法</strong>）前加上功能说明,并且每个包和每个应用程序编写概述。</p>
<p>注释尽量用//；对于所有的Javadoc注释，则使用/*<em>    </em>/；而临时的逻辑代码块用/<em> </em>    */</p>
<h2 id="3、编程规范"><a href="#3、编程规范" class="headerlink" title="3、编程规范"></a>3、编程规范</h2><p>编程规范可减少对内存的需求量，加快代码的执行速度，同时降低程序的出错率。</p>
<ol>
<li>设置类对象和类成员的访问控制权限，如（public和private）</li>
<li>调用类（静态）方法和类成员时，应该指明类名</li>
<li>使用括号明确操作顺序</li>
<li>尽量使用泛型</li>
<li>使用equals()，而不是==来检测对象的对等关系</li>
<li>方法尽量短小且职责单一</li>
</ol>
<p><strong>并发：</strong></p>
<p>　　1.仅在适当的地方使用线程</p>
<p><strong>同步：</strong></p>
<p>　　1.避免同步</p>
<p>　　2.用同步的包装器，提供同步接口</p>
<p>　　3.如果方法包含几个不需要同步的重要操作，那么不要同步整个方法</p>
<p>　　4.读写实例变量的时候避免不必要的同步</p>
<p>　　5.使用notify()而不是notifyAll()</p>
<p>　　6.为同步初始化使用双重检查模式</p>
<p><strong><font size="5;" color="red">效率：</font></strong></p>
<p>　　1.使用懒惰初始化</p>
<p>　　2.避免创建不必要的对象</p>
<p>　　3.重新初始化并重新使用对象，尽量不要新建对象</p>
<p>　　4.<table><tr><td bgcolor="yellow">Be Better! 任何时候效率优先，要在保证效率的情形下保证质量。没有事情是能一蹴而就的，写出好的代码，是一个循序渐进的过程，只有不断的通过实践积累经验，才能让我们少走弯路。</td></tr></table></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程规范</tag>
      </tags>
  </entry>
  <entry>
    <title>典型相关</title>
    <url>/2019/09/01/%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="典型相关"><a href="#典型相关" class="headerlink" title="典型相关"></a>典型相关</h1><p>典型相关分析的基本思想与主成分分析非常相似。</p>
<p>首先在每组变量中找出变量的线性组合，使得两组的线性组合之间具有最大的相关系数；</p>
<p>然后选取和最初挑选的这对线性组合不相关的线性组合，使其配对，并选取相关系数最大的一对；</p>
<p>如此继续下去，直到两组变量之间的相关性被提取完毕为止。</p>
<p>被选出的线性组合配对称为典型变量，它们的相关系数称为典型相关系数。典型相关系数度量了这两组变量之间联系的强度。p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>SPSS</tag>
      </tags>
  </entry>
  <entry>
    <title>相关系数</title>
    <url>/2019/09/01/%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/</url>
    <content><![CDATA[<h1 id="相关系数"><a href="#相关系数" class="headerlink" title="相关系数"></a><strong>相关系数</strong></h1><a id="more"></a>
<h2 id="1、皮尔逊Person相关系数"><a href="#1、皮尔逊Person相关系数" class="headerlink" title="1、皮尔逊Person相关系数"></a>1、皮尔逊Person相关系数</h2><p>其可看成剔除了两个变量量纲影响，即X，Y变量标准化后的协方差。</p>
<p>只有数据满足连续，正态分布且线性相关时，才能使用皮尔逊相关系数来描述变量间的相关性</p>
<p><strong>操作步骤：</strong></p>
<p>1、对数据进行一下描述统计</p>
<p>2、相关性可视化，做出矩阵散点图（以上两步可均由SPSS实现，将数据复制到Excle中后要对表格进行一些设置）</p>
<p><img src="E:\Hexo\source\_posts\相关系数\Excle表格色阶调整.png" alt="Excle表格色阶调整"></p>
<p>3、检验数据是否为正态分布</p>
<ul>
<li>正态分布JB检验（大样本 n&gt;30）</li>
</ul>
<blockquote>
<p>MATLAB中进行JB检验的语法：[h,p] = jbtest(x,alpha)</p>
<p>当输出h等于1时，表示拒绝原假设；h等于0则代表不能拒绝原假设。<br>alpha就是显著性水平，一般取0.05，此时置信水平为1-0.05=0.95<br>x就是我们要检验的随机变量，注意这里的x只能是向量。</p>
</blockquote>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 正态分布检验</span></span><br><span class="line"><span class="comment">% 检验第一列数据是否为正态分布</span></span><br><span class="line">[h,p] = jbtest(Test(:,<span class="number">1</span>),<span class="number">0.05</span>)</span><br><span class="line"><span class="comment">% 用循环检验所有列的数据</span></span><br><span class="line">n_c = <span class="built_in">size</span>(Test,<span class="number">2</span>); <span class="comment">% number of column 数据的列数</span></span><br><span class="line">H = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">P = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n_c</span><br><span class="line">[h,p] = jbtest(Test(:,<span class="built_in">i</span>),<span class="number">0.05</span>);</span><br><span class="line">H(<span class="built_in">i</span>)=h;</span><br><span class="line">P(<span class="built_in">i</span>)=p;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(H)</span><br><span class="line"><span class="built_in">disp</span>(P)</span><br></pre></td></tr></table></figure>
<ul>
<li>Shapiro-wilk检验(小样本3≤n≤50)</li>
</ul>
<p>使用spss操作,描述统计-&gt;探索-&gt;图-&gt;含检验的正态图</p>
<p>4、得到一个有显著性标记的相关性系数表格</p>
<h2 id="2、Spearman相关性系数"><a href="#2、Spearman相关性系数" class="headerlink" title="2、Spearman相关性系数"></a>2、Spearman相关性系数</h2><blockquote>
<p>[R,P]=corr(Test,’type’,’spearman’)</p>
</blockquote>
<p><strong>斯皮尔曼相关系数和皮尔逊相关系数选择:</strong><br>1.连续数据，正态分布，线性关系，用pearson相关系数是最恰当，当然用<br>spearman相关系数也可以， 就是效率没有pearson相关系数高。<br>2.上述任一条件不满足，就用spearman相关系数，不能用pearson相关系数。<br>3.两个定序数据之间也用spearman相关系数，不能用pearson相关系数。<br>定序数据是指仅仅反映观测对象等级、顺序关系的数据，是由定序尺度计量<br>形成的，表现为类别，可以进行排序，属于品质数据。</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>SPSS</tag>
      </tags>
  </entry>
  <entry>
    <title>遗传算法</title>
    <url>/2019/08/10/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h1><a id="more"></a>
<h2 id="1、什么是遗传算法"><a href="#1、什么是遗传算法" class="headerlink" title="1、什么是遗传算法"></a>1、什么是遗传算法</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>遗传算法(Genetic Algorithm <strong>GA</strong>）是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，<strong>是一种通过模拟自然进化过程搜索最优解的方法。</strong></p>
<p>其主要特点是直接队结构体对象进行操作，不存在求导和函数连续性的限定；</p>
<p>具有内在的隐并性和更好的全局寻优能力；</p>
<p>采用概率化的寻优方法，不需要确定的规则就能自动获取和指导优化的搜索空间，自适应地调整搜索方向。</p>
<h3 id="1-2-遗传算法执行过程"><a href="#1-2-遗传算法执行过程" class="headerlink" title="1.2 遗传算法执行过程"></a>1.2 遗传算法执行过程</h3><p><img src="GA.png" alt="遗传算法流程图"></p>
<p>遗传算法是从代表问题可能潜在的解集的一个种群（population）开始的，而一个种群则由经过基因（gene）编码的一定数目的个体(individual)组成。每个个体实际上是染色体(chromosome)带有特征的实体。</p>
<p>染色体作为遗传物质的主要载体，即多个基因的集合，其内部表现（即基因型）是某种基因组合，它决定了个体的形状的外部表现，我们往往进行简化，<strong>如二进制编码</strong>。</p>
<p>初始群体产生后，按照<strong>适者生存和优胜劣汰</strong>的原理，<strong>逐代演化出越来越好的近似解</strong>，在每一代，根据<strong>适应度大小选择个体</strong>，并借助于自然遗传双子进行组合<strong>交叉和变异</strong>，产生出代表新的解集的种群。</p>
<p>这个过程将导致种群像自然进化一样的后生种群比前代更加适应于环境，末代种群中的最有个体经过解码，可以作为问题的近似最优解。</p>
<h3 id="1-3-相关术语"><a href="#1-3-相关术语" class="headerlink" title="1.3  相关术语"></a>1.3  相关术语</h3><p>为了更好了解遗传算法，在此之前先简单介绍一下相关生物学术语</p>
<ul>
<li>基因型(genotype)：性状染色体的内部表现；</li>
<li>表现型(phenotype)：染色体决定的性状的外部表现，或者说，根据基因型形成的个体的外部表现；</li>
<li>进化(evolution)：种群逐渐适应生存环境，品质不断得到改良。生物的进化是以种群的形式进行的。</li>
<li>适应度(fitness)：度量某个物种对于生存环境的适应程度。</li>
<li>选择(selection)：以一定的概率从种群中选择若干个个体。一般，选择过程是一种基于适应度的优胜劣汰的过程。</li>
<li>复制(reproduction)：细胞分裂时，遗传物质DNA通过复制而转移到新产生的细胞中，新细胞就继承了旧细胞的基因。</li>
<li>交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交；</li>
<li>变异(mutation)：复制时可能（很小的概率）产生某些复制差错，变异产生新的染色体，表现出新的性状。</li>
<li>编码(coding)：DNA中遗传信息在一个长链上按一定的模式排列。遗传编码可看作从表现型到基因型的映射。</li>
<li>解码(decoding)：基因型到表现型的映射。</li>
<li>个体（individual）：指染色体带有特征的实体；</li>
<li>种群（population）：个体的集合，该集合内个体数称为种群</li>
</ul>
<h2 id="2、实现过程"><a href="#2、实现过程" class="headerlink" title="2、实现过程"></a>2、实现过程</h2><h3 id="（1）建立表现型和基因型的映射关系，数字化编码"><a href="#（1）建立表现型和基因型的映射关系，数字化编码" class="headerlink" title="（1）建立表现型和基因型的映射关系，数字化编码"></a><strong>（1）建立表现型和基因型的映射关系，数字化编码</strong></h3><p>​            编码是应用遗传算法时要解决的首要问题，也是设计遗传算法   时的一个关键步骤。编码方法影响到交叉算            子、变异算子等遗传算子的运算方法，大很大程度上决定了遗传进化的效率。</p>
<p>​            a、<em>二进制编码</em></p>
<p>它由二进制符号0和1所组成的二值符号集。它有以下一些优点：</p>
<ol>
<li>编码、解码操作简单易行</li>
<li>交叉、变异等遗传操作便于实现</li>
<li>合最小字符集编码原则</li>
<li>利用模式定理对算法进行理论分析。</li>
</ol>
<p>二进制编码的缺点是：对于一些连续函数的优化问题，由于其随机性使得其局部搜索能力较差，如对于一些高精度的问题（如上题），当解迫近于最优解后，由于其变异后表现型变化很大，不连续，所以会远离最优解，达不到稳定。</p>
<p>​            b、<em>浮点编码法</em></p>
<p>所谓浮点法，是指个体每个基因值用某一范围内的一个浮点数来表示。在浮点数编码方法中，必须保证基因值在给定的区间限制范围内，遗传算法中使用的交叉、变异等遗传算子也必须保证其运算结果所产生的新个体的基因值也在这个区间限制范围内。</p>
<p>浮点数编码方法有下面几个优点：</p>
<ol>
<li><p>适用于在遗传算法中表示范围较大的数</p>
</li>
<li><p>适用于精度要求较高的遗传算法</p>
</li>
<li><p>便于较大空间的遗传搜索</p>
</li>
<li><p>改善了遗传算法的计算复杂性，提高了运算交率</p>
</li>
<li><p>便于遗传算法与经典优化方法的混合使用</p>
</li>
<li><p>便于设计针对问题的专门知识的知识型遗传算子</p>
</li>
<li><p>便于处理复杂的决策变量约束条件</p>
<p>​    c、<em>符号编码法</em></p>
<p>符号编码法是指个体染色体编码串中的基因值取自一个无数值含义、而只有代码含义的符号集如｛A,B,C…｝。<br>符号编码的主要优点是：</p>
<ol>
<li>符合有意义积术块编码原则</li>
<li>便于在遗传算法中利用所求解问题的专门知识</li>
<li>便于遗传算法与相关近似算法之间的混合使用。</li>
</ol>
</li>
</ol>
<h3 id="（2）评价个体的适应度–适应度函数"><a href="#（2）评价个体的适应度–适应度函数" class="headerlink" title="（2）评价个体的适应度–适应度函数"></a><strong>（2）评价个体的适应度–适应度函数</strong></h3><p>​    评价个体适应度的一般过程：</p>
<pre><code>1. 对个体编码串进行解码处理后，可得到个体的表现型。
  2. 由个体的表现型可计算出对应个体的目标函数值。
  3. 根据最优化问题的类型，由努比奥函数值按一定的转换规则求出个体的适应度。
</code></pre><h3 id="（3）选择函数"><a href="#（3）选择函数" class="headerlink" title="（3）选择函数"></a><strong>（3）选择函数</strong></h3><p>遗传算法中的选择操作就是用来确定如何重父代群体中按某种方法选取那些个体，以便遗传到下一代群体。选择操作用来确定重组或交叉个体，以及被选个体将产生多少个子代个体。</p>
<p>常用的选择算子：</p>
<h4 id="1、轮盘赌选择："><a href="#1、轮盘赌选择：" class="headerlink" title="1、轮盘赌选择："></a>1、轮盘赌选择：</h4><p>是一种回放式随机采样方法。每个个体进入下一代的概率等于他的适应度值与整个种群中个体适应度值和的比例。选择误差大</p>
<h4 id="2、随机竞争选择："><a href="#2、随机竞争选择：" class="headerlink" title="2、随机竞争选择："></a>2、随机竞争选择：</h4><p>每次按轮盘赌选择一对个体，然后让这两个个体间进行竞争，适应度高的被选中，如此反复，直到选满为止。</p>
<h4 id="3、最佳保留选择："><a href="#3、最佳保留选择：" class="headerlink" title="3、最佳保留选择："></a>3、最佳保留选择：</h4><p>首先按轮盘赌选择方法执行遗传算法的选择操作，然后将当前群体中适应度最高的个体结构完整地赋值到下一代群体中。</p>
<h4 id="4、无回放随机选择（也叫期望值选择Excepted-Value-Selection）："><a href="#4、无回放随机选择（也叫期望值选择Excepted-Value-Selection）：" class="headerlink" title="4、无回放随机选择（也叫期望值选择Excepted Value Selection）："></a>4、无回放随机选择（也叫期望值选择Excepted Value Selection）：</h4><p>根据每个个体在下一代群体中的生存期望来进行随机选择运算。方法如下:</p>
<p>（1） 计算群体中每个个体在下一代群体中的生存期望数目N。</p>
<p>（2） 若某一个体被选中参与交叉运算，则它在下一代中的生存期望数目减去0.5，若某一个体未 被选中参与交叉运算，则它在下一代中的生存期望数目减去1.0。</p>
<p>（3） 随着选择过程的进行，若某一个体的生存期望数目小于0时，则该个体就不再有机会被选中。</p>
<h4 id="5、确定式选择："><a href="#5、确定式选择：" class="headerlink" title="5、确定式选择："></a>5、确定式选择：</h4><p>一种确定的方式来进行选择操作。具体操作过程如下：</p>
<p>（1） 计算群体中各个个体在下一代群体中的期望生存数目N。</p>
<p>（2） 用N的整数部分确定各个对应个体在下一代群体中的生存数目。</p>
<p>（3） 用N的小数部分对个体进行降序排列，顺序取前M个个体加入到下一代群体中。至此可完全确定出下一代群体中Ｍ个个体。</p>
<h4 id="6、无回放余数随机选择："><a href="#6、无回放余数随机选择：" class="headerlink" title="6、无回放余数随机选择："></a>6、无回放余数随机选择：</h4><p>可确保适应度比平均适应度大的一些个体能够被遗传到下一代群体中，因而选择误差比较小。</p>
<h4 id="7、均匀排序："><a href="#7、均匀排序：" class="headerlink" title="7、均匀排序："></a>7、均匀排序：</h4><p>对群体中的所有个体按期适应度大小进行排序，基于这个排序来分配各个个体被选中的概率。</p>
<h4 id="8、最佳保存策略："><a href="#8、最佳保存策略：" class="headerlink" title="8、最佳保存策略："></a>8、最佳保存策略：</h4><p>当前群体中适应度最高的个体不参与交叉运算和变异运算，而是用它来代替掉本代群体中经过交叉、变异等操作后所产生的适应度最低的个体。</p>
<h4 id="9、随机联赛选择："><a href="#9、随机联赛选择：" class="headerlink" title="9、随机联赛选择："></a>9、随机联赛选择：</h4><p>每次选取几个个体中适应度最高的一个个体遗传到下一代群体中。</p>
<h4 id="10、排挤选择："><a href="#10、排挤选择：" class="headerlink" title="10、排挤选择："></a>10、排挤选择：</h4><p>新生成的子代将代替或排挤相似的旧父代个体，提高群体的多样性。</p>
<p><strong><em>实例</em></strong></p>
<p>假如有５条染色体，他们的适应度分别为５、８、３、７、２。</p>
<p>那么总的适应度为：F = 5 + 8 + 3 + 7 + 2 = 25。</p>
<p>那么各个个体的被选中的概率为：</p>
<p>α1 = ( 5 / 25 ) * 100% = 20%</p>
<p>α2 = ( 8 / 25 ) * 100% = 32%</p>
<p>α3 = ( 3 / 25 ) * 100% = 12%</p>
<p>α4 = ( 7 / 25 ) * 100% = 28%</p>
<p>α5 = ( 2 / 25 ) * 100% = 8%</p>
<p>所以转盘如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10386940-bf5ce56a414e10db.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/502/format/webp" alt="img"></p>
<p>当指针在这个转盘上转动，停止下来时指向的个体就是天选之人啦。可以看出，适应性越高的个体被选中的概率就越大。</p>
<h3 id="4-遗传–染色体交叉"><a href="#4-遗传–染色体交叉" class="headerlink" title="(4)遗传–染色体交叉"></a>(4)遗传–染色体交叉</h3><p>遗传算法中的交叉操作，是指两队相互配对的染色体按某种方式相互交换其部分基因，从而形成两个新的个体。</p>
<p>适用于二进制编码或浮点数编码个体的交叉算子：</p>
<ol>
<li><p>单点交叉：指在个体编码串中只堆积设置一个交叉点，然后再该点相互交换配对个体的部分染色体。</p>
</li>
<li><p>两点交叉与多点交叉：</p>
<p>(1) 两点交叉（Two-point Crossover）：在个体编码串中随机设置了两个交叉点，然后再进行部分基因交换。</p>
<p>(2) 多点交叉（Multi-point Crossover）</p>
</li>
<li><p>均匀交叉（也称一致交叉，Uniform Crossover）：两个配对个体的每个基因座上的基因都以相同的交叉概率进行交换，从而形成两个新个体。</p>
</li>
<li><p>算术交叉（Arithmetic Crossover）：由两个个体的线性组合而产生出两个新的个体。该操作对象一般是由浮点数编码表示的个体。</p>
</li>
</ol>
<h3 id="（5）变异–基因突变"><a href="#（5）变异–基因突变" class="headerlink" title="（5）变异–基因突变"></a>（5）变异–基因突变</h3><p>遗传算法中变异运算，是指将个体染色体编码串中的某些基因座上的基因值用该基因座上其他等位基因来替换，从而产生新的个体。</p>
<p>以下变异算子适用于二进制编码和浮点数编码的个体：</p>
<ol>
<li>基本位变异（Simple Mutation）：对个体编码串中以变异概率、随机指定的某一位或某几位仅因座上的值做变异运算。</li>
<li>均匀变异（Uniform Mutation）：分别用符合某一范围内均匀分布的随机数，以某一较小的概率来替换个体编码串中各个基因座上的原有基因值。（特别适用于在算法的初级运行阶段）</li>
<li>边界变异（Boundary Mutation）：随机的取基因座上的两个对应边界基因值之一去替代原有基因值。特别适用于最优点位于或接近于可行解的边界时的一类问题。</li>
<li>非均匀变异：对原有的基因值做一随机扰动，以扰动后的结果作为变异后的新基因值。对每个基因座都以相同的概率进行变异运算之后，相当于整个解向量在解空间中作了一次轻微的变动。</li>
<li>高斯近似变异：进行变异操作时用符号均值为Ｐ的平均值，方差为P**2的正态分布的一个随机数来替换原有的基因值。</li>
</ol>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>LINGO入门</title>
    <url>/2019/08/08/LINGO%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>主成分分析</title>
    <url>/2019/08/08/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>主成分分析</p>
<a id="more"></a>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p> 1）主成分分析的<strong>结果受量纲的影响</strong>，由于各变量的单位可能不一样，如果各自改变量纲，结果会不一样，这是主成分分析的大问题，回归分析是不存在这种情况的， 所以实际中可以<strong>先把各变量的数据标准化，然后使用协方差矩阵或相关系数矩阵进行分 析</strong>。</p>
<p> 2）为使方差达到大的主成分分析，所以不用转轴（由于统计软件常把主成分分 析和因子分析放在一起，后者往往需要转轴，使用时应注意）。</p>
<p> 3）主成分的保留。用相关系数矩阵求主成分时，Kaiser主张<strong>将特征值小于1的主成 分予以放弃</strong>（这也是SPSS软件的默认值）。</p>
<p> 4）在实际研究中，由于<strong>主成分的目的是为了降维，减少变量的个数，故一般选取 少量的主成分（不超过5或6个）</strong>，只要它们<strong>能解释变异的70％～80％（称累积贡献率）</strong> 就行了。  下面我们直接通过主成分估计（principle estimate）进一步阐述主成分分析的基本思想和相关概念。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc,clear </span><br><span class="line">load sn.txt  <span class="comment">%把原始的x1,x2,x3,x4,y的数据保存在纯文本文件sn.txt中 </span></span><br><span class="line">[m,n]=<span class="built_in">size</span>(sn);</span><br><span class="line">num=<span class="number">3</span>; <span class="comment">%num为选取的主成分的个数 </span></span><br><span class="line">mu=<span class="built_in">mean</span>(sn);sigma=std(sn); </span><br><span class="line"></span><br><span class="line">snb=zscore(sn); <span class="comment">%数据标准化 </span></span><br><span class="line"></span><br><span class="line">b=snb(:,<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>); <span class="comment">%x1,x2,x3,x4的数据赋给b </span></span><br><span class="line">r=cov(b);  <span class="comment">%标准化数据的协方差阵就是相关系数阵 </span></span><br><span class="line">[x,y,z]=pcacov(r); </span><br><span class="line">f=<span class="built_in">repmat</span>(<span class="built_in">sign</span>(sum(x)),<span class="built_in">size</span>(x,<span class="number">1</span>),<span class="number">1</span>); </span><br><span class="line">x=x.*f; <span class="comment">%各</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%以下是普通的小二乘法回归 </span></span><br><span class="line">r=[<span class="built_in">ones</span>(m,<span class="number">1</span>),b]\snb(:,<span class="keyword">end</span>);  <span class="comment">%标准化数据的回归方程系数 </span></span><br><span class="line">bzh=mu./sigma; </span><br><span class="line">ch10=mu(<span class="keyword">end</span>)-bzh(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>)*r(<span class="number">2</span>:<span class="keyword">end</span>)*sigma(<span class="keyword">end</span>)  <span class="comment">%原始数据的常数项 </span></span><br><span class="line">fr=r(<span class="number">2</span>:<span class="keyword">end</span>);fr=fr'; </span><br><span class="line">ch1=fr./sigma(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>)*sigma(<span class="keyword">end</span>) <span class="comment">%原始数据的x1,x2等等系数 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">%以下是主成分回归 </span></span><br><span class="line">pval=b*x(:,<span class="number">1</span>:num); </span><br><span class="line">rp=[<span class="built_in">ones</span>(m,<span class="number">1</span>),pval]\snb(:,<span class="keyword">end</span>);  <span class="comment">%主成分数据的回归方程系数 </span></span><br><span class="line"><span class="built_in">beta</span>=x(:,<span class="number">1</span>:num)*rp(<span class="number">2</span>:num+<span class="number">1</span>);           <span class="comment">%标准化数据的回归方程系数 </span></span><br><span class="line">ch20=mu(<span class="keyword">end</span>)-bzh(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>)*<span class="built_in">beta</span>*sigma(<span class="keyword">end</span>)  <span class="comment">%原始数据的常数项 </span></span><br><span class="line">fr=beta'; </span><br><span class="line">ch2=fr./sigma(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>)*sigma(<span class="keyword">end</span>) <span class="comment">%原始数据的x1,x2等等系数 </span></span><br><span class="line">check1=<span class="built_in">sqrt</span>(sum((sn(:,<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>)*ch1'+ch10-sn(:,<span class="keyword">end</span>)).^<span class="number">2</span>)/(m-n)) </span><br><span class="line">check2=<span class="built_in">sqrt</span>(sum((sn(:,<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>)*ch2'+ch20-sn(:,<span class="keyword">end</span>)).^<span class="number">2</span>)/(m-num<span class="number">-1</span>))</span><br></pre></td></tr></table></figure>
<p>主成分分析函数<strong>pcacov函数</strong>说明：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">load hald</span><br><span class="line">covx = cov(ingredients);</span><br><span class="line">[COEFF,latent,explained] = pcacov(covx)</span><br></pre></td></tr></table></figure>
<p>输出变量：<br>-coeff: 特征向量(注意与pca函数的变量score进行区分）；<br>-latent: 特征值；<code>[~,latent,coeff] = svd(v);</code> 其实这里可以用<code>eig</code>函数替代<code>latent = diag(latent);</code><br>-explained：每个特征值占比，字面上即每个特征值对系统有多少解释，用百分比表示。<code>explained=100*latent/sum(latent);</code></p>
]]></content>
      <categories>
        <category>主成分分析</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>主成分分析</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模总结</title>
    <url>/2019/08/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="常用模型-amp-算法总结"><a href="#常用模型-amp-算法总结" class="headerlink" title="常用模型&amp;算法总结"></a>常用模型&amp;算法总结</h1><a id="more"></a>
<p>总的来说，常用主成分分析来<strong>降维</strong></p>
<p><a herf="[https://baike.baidu.com/item/%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7/4913084?fr=aladdin#3](https://baike.baidu.com/item/综合评价/4913084?fr=aladdin#3)"><strong>综合评价</strong></a>的方法因子分析法、层次分析法、秩和比（RSR）法、Topsis法、模糊评价方法、灰色系统评价方法。<a herf="<http://www.doc88.com/p-7886468471288.html>">必看完的资料</a></p>
<p>蒙特卡罗方法来<strong>随机模拟求解</strong></p>
<p><strong>数据处理：</strong>数据变换，数据拟合，参数估计，插值等</p>
<p><strong>线性规划、整数规划、目标规划、动态规划类</strong>问题的求解关键在于根据题目已知信息找出约束条件与目标函数</p>
<p>通过<strong>插值or拟合or光滑技术</strong>【移动平均之类的】可以把<strong>离散数据连续化</strong>，通过<strong>分组</strong>【把数据划分成不同的小区间】or差分就可以把<strong>连续数据离散化.</strong>…。</p>
<p><strong>组合优化算法</strong>常用于很难求出最优解的NP问题</p>
<hr>
<p>跳转目录</p>
<p>[TOC]</p>
<h1 id="【1】主成分分析"><a href="#【1】主成分分析" class="headerlink" title="【1】主成分分析"></a>【1】主成分分析</h1><p><strong>用较少的变量去解释原来资料中大部分变异</strong>，把相关性很高的变量转换为彼此相关独立或不相关的变量，是一种<strong>降维方法</strong>。<br>为减少指标某种程度上的关联性，即<strong>信息冗余</strong>，就需要将他们间不同的特征选出来，也就是降维，常用的降维方法有：<strong>主成分分析（PCA），SVD奇异值分解，逐步回归</strong></p>
<p>【blog链接】</p>
<p><a herf="主成分分析（一）：基本思想与主成分估计方法.md">主成分分析（一）：基本思想与主成分估计方法</a></p>
<p><a herf="<https://blog.csdn.net/qq_29831163/article/details/88900766>"> 主成分分析法（二）：计算步骤</a></p>
<h1 id="【2】LINGO入门"><a href="#【2】LINGO入门" class="headerlink" title="【2】LINGO入门"></a>【2】LINGO入门</h1><p>   集部分是 LINGO 模型的一个可选部分。在 LINGO 模型中使用集之前，必须在集部分事先定义。<strong>集部分以关键字“sets:”开始以“endsets”结束。</strong>一个模型可以没有集部分，或有一个简单的集部分，或有多个集部分。一个集部分可以放置于模型的任何地方，但是一个集及其属性在模型约束中被引用之前必须定义了它们。</p>
<h1 id="【3】相关系数"><a href="#【3】相关系数" class="headerlink" title="【3】相关系数"></a>【3】相关系数</h1><p>   最常用的相关系数为皮尔逊Person和斯皮尔曼Spearman，用其来衡量两个变量间的相关性大小，根据数据满足的不同条件，选择不同的相关系数计算和分析。</p>
<p>​    只有两个变量是线性相关的情况下，才能用相关系数说明其相关程度如何。</p>
<p>【blog链接】</p>
<p><a herf="#">相关系数</a></p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflection</title>
    <url>/2019/07/11/Reflection/</url>
    <content><![CDATA[<h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><a id="more"></a>
<p><strong>反射的概念</strong>：在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。</p>
<p>Java可以通过一个配置文件来选择程序所调用的方法和类对象</p>
<p><strong>使用反射机制的步骤：</strong></p>
<ol>
<li><h3 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h3><ul>
<li><p>调用某个对象的getClass()方法</p>
<blockquote>
<p>Class p = new Hero().getClass();</p>
</blockquote>
</li>
<li><p>调用某个对象的class属性来获取该类对应的Class对象</p>
<blockquote>
<p>Class p=new Hero().class;</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>使用Class类中的forName()静态方法（最安全/性能最好）</p>
<blockquote>
<p>Class p=Class.forName(“类的全部名称（包名.类名）”)；</p>
</blockquote>
</li>
</ul>
<ol start="2">
<li><h3 id="获取方法和属性信息"><a href="#获取方法和属性信息" class="headerlink" title="获取方法和属性信息"></a>获取方法和属性信息</h3><p>getField <strong>只能获取</strong>public的，包括<strong>从父类继承</strong>来的字段。<br>getDeclaredField 可以获取本类所有的字段，<strong>包括private</strong>的，但是<strong>不能获取继承</strong>来的字段。 (<strong>注</strong>： 这里只能获取到private的<strong>字段</strong>，但并不能访问该private字段的<strong>值</strong>,除非加上<strong>setAccessible(true)</strong>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;使用反射&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户输入类的全路径，来获取该类的成员方法和属性</span></span><br><span class="line"><span class="comment"> * Declared获取全部不管是私有和公有</span></span><br><span class="line"><span class="comment"> * 1.获取访问类的Class对象</span></span><br><span class="line"><span class="comment"> * 2.调用Class对象的方法返回访问类的方法和属性信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取Person类的Class对象</span></span><br><span class="line">            Class clazz=Class.forName(<span class="string">"reflection.Person"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取Person类的所有方法信息</span></span><br><span class="line">            Method[] method=clazz.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span>(Method m:method)&#123;</span><br><span class="line">                System.out.println(m.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取Person类的所有成员属性信息</span></span><br><span class="line">            Field[] field=clazz.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span>(Field f:field)&#123;</span><br><span class="line">                System.out.println(f.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取Person类的所有构造方法信息</span></span><br><span class="line">            Constructor[] constructor=clazz.getDeclaredConstructors();</span><br><span class="line">            <span class="keyword">for</span>(Constructor c:constructor)&#123;</span><br><span class="line">                System.out.println(c.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>当我们获取到所需类的Class对象后，可以用它来创建对象，创建对象的方法有两种：</p>
<ul>
<li>使用Class对象的<strong>newInstance()</strong>方法来创建该Class对象对应类的实例，但是这种方法要求该Class对象对应的类有默认的空构造器。</li>
<li>先使用Class对象获取指定的<strong>Constructor</strong>对象，再调用Constructor对象的<strong>newInstance()</strong>方法来创建 Class对象对应类的实例,通过这种方法可以选定构造方法创建实例。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取Person类的Class对象</span></span><br><span class="line">            Class clazz=Class.forName(<span class="string">"reflection.Person"</span>); </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 第一种方法创建对象</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//创建对象</span></span><br><span class="line">            Person p=(Person) clazz.newInstance();</span><br><span class="line">            <span class="comment">//设置属性</span></span><br><span class="line">            p.setName(<span class="string">"张三"</span>);</span><br><span class="line">            p.setAge(<span class="number">16</span>);</span><br><span class="line">            p.setGender(<span class="string">"男"</span>);</span><br><span class="line">            System.out.println(p.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 第二种方法创建</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//获取构造方法</span></span><br><span class="line">            Constructor c=clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            <span class="comment">//创建对象并设置属性</span></span><br><span class="line">            Person p1=(Person) c.newInstance(<span class="string">"李四"</span>,<span class="string">"男"</span>,<span class="number">20</span>);</span><br><span class="line">            System.out.println(p1.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> charactor.ADHero;</span><br><span class="line"><span class="keyword">import</span> charactor.APHero;</span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_03</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		read();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		File f = <span class="keyword">new</span> File(<span class="string">"E:\\Java\\j2se\\src\\reflection\\hero.config"</span>);</span><br><span class="line">		<span class="keyword">try</span>(FileReader fi = <span class="keyword">new</span> FileReader(f);BufferedReader br = <span class="keyword">new</span> BufferedReader(fi); ) </span><br><span class="line">		&#123;</span><br><span class="line">                String line = br.readLine();</span><br><span class="line">                <span class="comment">//charactor.APhero</span></span><br><span class="line">                String line2 = br.readLine();</span><br><span class="line">                <span class="comment">//garen</span></span><br><span class="line">                String line3 = br.readLine();</span><br><span class="line">                <span class="comment">//charactor.ADhero</span></span><br><span class="line">                String line4 = br.readLine();</span><br><span class="line">                <span class="comment">//teemo</span></span><br><span class="line">                line.trim();</span><br><span class="line">                line2.trim();</span><br><span class="line">                line3.trim();</span><br><span class="line">                line4.trim();</span><br><span class="line">                APHero h1 = (APHero) Class.forName(line).newInstance();</span><br><span class="line">                ADHero h2 = (ADHero) Class.forName(line3).newInstance();</span><br><span class="line">                <span class="comment">//通过反射拿到俩个对象 </span></span><br><span class="line">             </span><br><span class="line">                Hero h = <span class="keyword">new</span> Hero();</span><br><span class="line">                Field f1 = h.getClass().getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">                f1.set(h1, line2);</span><br><span class="line">                f1.set(h2, line4);</span><br><span class="line">                <span class="comment">//通过反射 拿到他们的 name 字段  然后 设置 这两个Hero对象的 name 属性;</span></span><br><span class="line">                Method m = h1.getClass().getMethod(<span class="string">"attackHero"</span>, Hero<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="comment">//Hero.class 代表参数类型是 Hero</span></span><br><span class="line">                m.invoke(h1, h2);</span><br><span class="line">                <span class="comment">//通过反射 拿到 attackHero 这个方法 然后 通过反射调用方法 h1调用 传 h2 这个参数 </span></span><br><span class="line">                 </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">            &#125;</span><br><span class="line">                 </span><br><span class="line">             </span><br><span class="line">         &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>即我们可以不修改源文件，而只用修改.config文件，这样使得程序更健壮。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Reflection</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构复习（四）</title>
    <url>/2019/07/11/Graph/</url>
    <content><![CDATA[<h1 id="Graph-amp-查找-amp-排序"><a href="#Graph-amp-查找-amp-排序" class="headerlink" title="Graph &amp; 查找 &amp; 排序"></a>Graph &amp; 查找 &amp; 排序</h1><a id="more"></a>
<h2 id="第六章-图"><a href="#第六章-图" class="headerlink" title="第六章    图"></a>第六章    图</h2><p><img src="Graph.png" alt></p>
<p>拓扑排序算法描述：</p>
<ol>
<li>把邻接表中入度为0的顶点依此进栈</li>
<li>若栈不空，则<ul>
<li>栈顶元素vj退栈并输出；</li>
<li>在邻接表中查找vj的直接后继vk，把vk的入度减1；若vk的入度为0则进栈</li>
</ul>
</li>
<li>若栈空时输出的顶点个数不是n，则有向图有环；否则，拓扑排序完毕。</li>
</ol>
<p>所谓的线索化，就是按其要求的遍历顺序确定每个结点的前驱和后继，其中有左子节点的不用画前驱</p>
<h2 id="第七章-查找"><a href="#第七章-查找" class="headerlink" title="第七章  查找"></a>第七章  查找</h2><p>顺序查找、折半查找、索引查找、分块查找是<strong>静态查找</strong>，<strong>动态查找</strong>有二叉排序树查找，最优二叉树查找，键树查找，哈希表查找</p>
<h3 id="静态查找表"><a href="#静态查找表" class="headerlink" title="静态查找表"></a>静态查找表</h3><p>顺序表的顺序查找：应用范围：顺序表或线性链表表示的表，表内元素之间无序。查找过程：从表的一端开始逐个进行记录的关键字和给定值的比较。</p>
<p>顺序有序表的二分查找。平均查找时间(n+1)/n log2(n+1)</p>
<p>分块查找：将表分成几块，块内无序，块间有序，即前一块中的最大值小于后一块中的最小值。并且有一张索引表，每一项存放每一块的最大值和指向该块第一个元素的指针。索引表有序，块内无序。所以，块间查找用二分查找，块内用顺序查找，效率介于顺序和二分之间；先确定待查记录所在块，再在块内查找。因此跟表中元素个数和块中元素个数都有关。</p>
<ol>
<li>用数组存放待查记录,</li>
<li>建立索引表，由每块中最大（小）的关键字及所属块位置的信息组成。</li>
<li>当索引表较大时，可以采用二分查找</li>
<li>在数据量极大时，索引可能很多，可考虑建立索引表的索引，即二级索引，原则上索引不超过三级</li>
</ol>
<p>分块查找平均查找长度：<em>ASL**bs</em> = <em>L**b</em> + <em>L**w</em>。其中，<em>L**b</em>是查找索引表确定所在块的平均查找长度， <em>L**w</em>是在块中查找元素的平均查找长度。在n一定时，可以通过选择s使ASL尽可能小。当s=sqrt(n)时，ASL最小。</p>
<ol>
<li>时间：顺序查找最差，二分最好，分块介于两者之间</li>
<li>空间：分块最大，需要增加索引数据的空间</li>
<li>顺序查找对表没有特殊要求</li>
<li>分块时数据块之间在物理上可不连续。所以可以达到插入、删除数据只涉及对应的块；另外，增加了索引的维护。</li>
<li>二分查找要求表有序，所以若表的元素的插入与删除很频繁，维持表有序的工作量极大。</li>
<li>在表不大时，一般直接使用顺序查找。</li>
</ol>
<h3 id="动态查找"><a href="#动态查找" class="headerlink" title="动态查找"></a>动态查找</h3><p>二叉排序树的结点删除：</p>
<ol>
<li>x为叶子结点，则直接删除</li>
<li>x只有左子树xL或只有右子树xR ,则令xL或xR直接成为双亲结点f的子树；</li>
<li>x即有左子树xL也有右子树xR，在xL中选值最大的代替x，该数据按二叉排序树的性质应在最右边。</li>
</ol>
<p>平衡二叉树：每个结点的平衡因子都为 1、－1、0 的二叉排序树。或者说每个结点的左右子树的高度最多差1的二叉排序树。</p>
<p>平衡二叉树的平衡：</p>
<ol>
<li>左调整(新结点插入在左子树上的调整)：</li>
</ol>
<ul>
<li>LL(插入在结点左子树的左子树上)：旋转前后高度都为h+1</li>
<li>LR(新插入结点在左子树的右子树上)：旋转前后高度仍为h+1</li>
</ul>
<ol start="2">
<li>右调整(新结点插入在右子树上进行的调整):</li>
</ol>
<ul>
<li>RR(插入在的右子树的右子树上)：处理方法和 LL对称</li>
<li>RL(插入在的右子树的左子树上)：处理方法和 LR对称</li>
</ul>
<p>平衡树建立方法：</p>
<ol>
<li>按二叉排序树插入结点</li>
<li>如引起结点平衡因子变为|2|，则确定旋转点，该点是离根最远（或最接近于叶子的点）</li>
<li>确定平衡类型后进行平衡处理，平衡后以平衡点为根的子树高不变</li>
<li>最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。</li>
</ol>
<p>常见的平衡二叉树：</p>
<ol>
<li><p>红黑树是平衡二叉树，也就是左右子树是平衡的，高度大概相等。这种情况等价于一块完全二叉树的高度，查找的时间复杂度是树的高度，为logn，插入操作的平均时间复杂度为O(logn)，最坏时间复杂度为O(logn)</p>
<p> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/800px-Red-black_tree_example.svg.png" alt></p>
<ul>
<li>节点是红色或黑色。</li>
<li>根是黑色。</li>
<li>所有叶子都是黑色（叶子是NIL节点）。</li>
<li>每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</li>
<li>从任一节点到其每个叶子的所有简单路径 都包含相同数目的黑色节点。</li>
</ul>
</li>
<li><p>avl树也是自平衡二叉树；红黑树和AVL树查找、插入、删除的时间复杂度相同；包含n个内部结点的红黑树的高度是o(logn); TreeMap 是一个红黑树的实现，能保证插入的值保证排序</p>
</li>
<li><p>STL和linux多使用红黑树作为平衡树的实现：</p>
</li>
</ol>
<ol>
<li>如果插入一个node引起了树的不平衡，AVL和RB-Tree都是最多只需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度。</li>
<li>其次，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。</li>
<li>map的实现只是折衷了两者在search、insert以及delete下的效率。总体来说，RB-tree的统计性能是高于AVL的。</li>
</ol>
<h3 id="查找总结"><a href="#查找总结" class="headerlink" title="查找总结"></a>查找总结</h3><ol>
<li>既希望较快的查找又便于线性表动态变化的查找方法是<strong>哈希法查找</strong>。二叉排序树查找，最优二叉树查找，键树查找，哈希法查找是动态查找。分块、顺序、折半、索引顺序查找均为静态。分块法应该是将整个线性表分成若干块进行保存，若动态变化则可以添加在表的尾部（非顺序结构），时间复杂度是O(1)，查找复杂度为O(n)；若每个表内部为顺序结构，则可用二分法将查找时间复杂度降至O(logn)，但同时动态变化复杂度则变成O(n)；顺序法是挨个查找，这种方法最容易实现，不过查找时间复杂度都是O(n)，动态变化时可将保存值放入线性表尾部，则时间复杂度为O(1)；二分法是基于顺序表的一种查找方式，时间复杂度为O(logn)；通过哈希函数将值转化成存放该值的目标地址，O（1）</li>
<li>二叉树的平均查找长度为O(log2n)——O(n).二叉排序树的查找效率与二叉树的高度有关，高度越低，查找效率越高。二叉树的查找成功的平均查找长度ASL不超过二叉树的高度。二叉树的高度与二叉树的形态有关，n个节点的完全二叉树高度最小，高度为[log2n]+1,n个节点的单只二叉树的高度最大，高度为n，此时查找成功的ASL为最大(n+1)/2，因此二叉树的高度范围为[log2n]+1——n.</li>
<li>链式存储不能随机访问，必须是顺序存储</li>
</ol>
<h2 id="第八章-排序"><a href="#第八章-排序" class="headerlink" title="第八章 排序"></a>第八章 排序</h2><ol>
<li>内部排序：全部数据可同时放入内存进行的排序。</li>
<li>外部排序：文件中数据太多，无法全部调入内存进行的排序。</li>
</ol>
<p><strong>插入类：</strong></p>
<ol>
<li>直接插入排序。最坏情况是数据递减序，数据比较和移动量最大，达到O(n2)，最好是数据是递增序，比较和移动最少为O(n)。趟数是固定的n-1，即使有序，也要依次从第二个元素开始。排序趟数不等于时间复杂度。</li>
<li>折半插入排序 。由于插入第i个元素到r[1]到r[i-1]之间时，前i个数据是有序的，所以可以用折半查找确定插入位置，然后插入。</li>
<li>希尔排序。缩小增量排序。5-3-1。在实际应用中，步长的选取可简化为开始为表长n的一半（n/2），以后每次减半，最后为1。插入的改进，最后一趟已基本有序，比较次数和移动次数相比直接插入最后一趟更少</li>
</ol>
<p><strong>交换类：</strong></p>
<ol>
<li><p>冒泡排序。O(n</p>
<p>2</p>
<p>)通常认为冒泡是比较差的，可以加些改进，比如在一趟中无数据的交换，则结束等措施。</p>
</li>
</ol>
<ul>
<li>在数据已基本有序时，冒泡是一个较好的方法</li>
<li>在数据量较少时（15个左右）可以用冒泡</li>
</ul>
<ol start="2">
<li>快速排序。</li>
</ol>
<ul>
<li>时间复杂度。最好情况：每次支点总在中间，O(nlog2n)，平均O(nlog2n)。最坏，数据已是递增或递减，O(n2)。pivotkey的选择越靠近中央，即左右两个子序列长度越接近，排序速度越快。越无序越快。</li>
<li>空间复杂度。需栈空间以实现递归，最坏情况：S(n)=O(n)；一般情况：S(n)=O(log2n)</li>
<li>在序列已是有序的情况下，时间复杂度最高。原因：支点选择不当。改进：随机选取支点或最左、最右、中间三个元素中的值处于中间的作为支点，通常可以避免最坏情况。所以，快速排序在表已基本有序的情况下不合适。</li>
<li>在序列长度已较短时，采用直接插入排序、起泡排序等排序方法。序列的个数通常取10左右。</li>
</ul>
<p><strong>选择类排序：</strong></p>
<ol>
<li>简单选择排序。O(n2)。总比较次数n(n-1)/2。</li>
<li>堆排序。建堆 O(n)，筛选排序O(nlogn)。找出若干个数中最大/最小的前K个数，用堆排序是最好。小根堆中最大的数一定是放在叶子节点上，堆本身是个完全二叉树，完全二叉树的叶子节点的位置大于[n/2]。时间复杂度不会因为待排序序列的有序程度而改变，但是待排序序列的有序程度会影响比较次数。</li>
<li>归并排序。时间：与表长成正比，若一个表表长是m，另一个是n，则时间是O(m+n)。单独一个数组归并，时间：O(nlogn)，空间：O(n)，比较次数介于(nlogn)/2和(nlogn)-n+1，赋值操作的次数是(2nlogn)。归并排序算法比较占用内存，但却是<strong>效率高且稳定</strong>的排序算法。在外排序中使用。归并的趟数是logn。</li>
<li>基数排序。在一般情况下，每个结点有 d 位关键字，必须执行 t = d次分配和收集操作。分配的代价：O(n)；收集的代价：O(rd) （rd是基数）；总的代价为：O( d ×(n + rd))。适用于以数字和字符串为关键字的情况。</li>
<li>枚举排序，通常也被叫做秩排序，比较计数排序。对每一个要排序的元素，统计小于它的所有元素的个数，从而得到该元素在整个序列中的位置，时间复杂度为O(n2)</li>
</ol>
<p>比较法分类的下界：O(nlogn)</p>
<p>排序算法的一些特点：</p>
<ol>
<li><strong>堆排序、冒泡排序、快速排序</strong>在每趟排序过程中,都会有一个元素被放置在其最终的位置上。</li>
<li>有字符序列 ｛Q,H,C,Y,P,A,M,S,R,D,F,X｝ ,新序列{F,H,C,D,P,A,M,Q,R,S,Y,X}，是快速排序算法一趟扫描的结果。(<em>拿Q作为分割点,快速排序一轮。二路归并，第一趟排序，得到 n / 2 个长度为 2 的各自有序的子序列，第二趟排序，得到 n / 4 个长度为 4 的各自有序的子序列H Q C Y A P M S D R F X。如果是快速排序的话，第一个元素t将会被放到一个最准确的位置，t前的数均小于t，后面的数均大于t。希尔排序每个小分组内将会是有序的。堆排序，把它构成一颗二叉树的时候，该堆要么就是大根堆，要么就是小根堆，第一趟Y排在最后；冒泡，那么肯定会有数据下沉的动作，第一趟有A在第一位。</em>)</li>
<li>在文件”局部有序”或文件长度较小的情况下,最佳内部排序的方法是<strong>直接插入排序</strong>。（归并排序要求待排序列已经部分有序，而部分有序的含义是待排序列由若干有序的子序列组成，即每个子序列必须有序，并且其时间复杂度为O(nlog2n)；直接插入排序在待排序列基本有序时，每趟的比较次数大为降低，即n-1趟比较的时间复杂度由O(n^2)降至O(n)。在待排序的元素序列基本有序或者每个元素距其最终位置不远也可用插入排序，效率最高的排序方法是<strong>插入排序</strong>）</li>
<li>排序趟数与序列的原始状态有关的排序方法是优化冒泡和快速排序法。(插入排序和选择排序不管序列的原始状态是什么都要执行n-1趟，优化冒泡和快排不一定。仔细理解<code>排序的次数</code>和<code>比较次数</code>的区别)</li>
<li><strong>不稳定的排序方法：快排，堆排，希尔，选择</strong></li>
<li>要与关键字的初始排列次序无关,那么就是最好、最坏、一般的情况下排序时间复杂度不变, 总共有堆排序,归并排序,选择排序,基数排序</li>
<li>快速排序、Shell 排序、归并排序、直接插入排序的关键码比较次数与记录的初始排列有关。折半插入排序、选择排序无关。(直接插入排序在完全有序的情况下每个元素只需要与他左边的元素比较一次就可以确定他最终的位置；折半插入排序，比较次数是固定的，与初始排序无关；快速排序，初始排序不影响每次划分时的比较次数，都要比较n次，但是初始排序会影响划分次数，所以会影响总的比较次数，但快排平均比较次数最小；归并排序在归并的时候，如果右路最小值比左路最大值还大，那么只需要比较n次，如果右路每个元素分别比左路对应位置的元素大，那么需要比较2*n-1次，所以与初始排序有关)</li>
<li>精俭排序，即一对数字不进行两次和两次以上的比较，插入和归并是“精俭排序”。插入排序，前面是有序的，后面的每一个元素与前面有序的元素比较，比较过的就是有序的了，不会再比较一次。归并每次合并后，内部都是有序的，内部的元素之间不用再比较。选择排序，每次在后面的元素中找到最小的，找最小元素的过程是在没有排好序的那部分进行，所有肯定会比较多次。堆排序也需比较多次。</li>
</ol>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模</title>
    <url>/2019/07/11/Matlab/</url>
    <content><![CDATA[<h1 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h1><a id="more"></a>
<h1 id="一、-Matlab入门"><a href="#一、-Matlab入门" class="headerlink" title="一、 Matlab入门"></a>一、 Matlab入门</h1><p>matlab下载可以关注一个微信公众号”软件管家“</p>
<h3 id="1、命令行操作"><a href="#1、命令行操作" class="headerlink" title="1、命令行操作"></a>1、命令行操作</h3><ul>
<li>clc清理命令行窗口/clear清除所有变量</li>
<li>上方向键可以调用之前命令</li>
<li>；可以抑制输出</li>
<li>多行注释Ctrl+R，取消注释Ctrl+T</li>
</ul>
<h3 id="2、matlab内置函数和常量"><a href="#2、matlab内置函数和常量" class="headerlink" title="2、matlab内置函数和常量"></a>2、matlab内置函数和常量</h3><ul>
<li>圆周率pi</li>
<li>正余弦函数 sin/cos</li>
<li>abs取绝对值</li>
<li>sqrt求平方根</li>
<li>输出和输入函数（disp和input）</li>
<li>数字转字符串：num2str</li>
<li>sum函数：<ul>
<li>向量，直接求和</li>
<li>矩阵，sum(X,1)  =&gt;  按列求和    sum(X,2)  =&gt;  按行求和</li>
</ul>
</li>
</ul>
<h3 id="3、所有-MATLAB-变量都是数组，这意味着每个变量均可以包含多个元素。"><a href="#3、所有-MATLAB-变量都是数组，这意味着每个变量均可以包含多个元素。" class="headerlink" title="3、所有 MATLAB 变量都是数组，这意味着每个变量均可以包含多个元素。"></a>3、所有 MATLAB 变量都是数组，这意味着每个变量均可以包含多个元素。</h3><p>x = [3 4]表示行向量</p>
<p>y= [3;4]表示列向量</p>
<h3 id="4、创建等间距向量"><a href="#4、创建等间距向量" class="headerlink" title="4、创建等间距向量"></a>4、创建等间距向量</h3><blockquote>
<p><strong>:</strong> 运算符并仅指定起始值和最终值 </p>
</blockquote>
<p>  默认间隔是1，但可以设置间隔frist：dx：last</p>
<p>设置所需元素个数</p>
<p> <strong>linspace(first,last,number_of_elements)</strong>。注意，请使用逗号 (,) 分隔 linspace 函数的输入。</p>
<p>转置运算符 (<code>&#39;</code>) 将行向量转换为列向量。</p>
<h3 id="5、矩阵创建函数"><a href="#5、矩阵创建函数" class="headerlink" title="5、矩阵创建函数"></a>5、矩阵创建函数</h3><p>  rand(2，3)  随机创建一个2x3矩阵</p>
<p> zeros() 创建全零矩阵</p>
<p>matlab存储矩阵是按列来存储的</p>
<h3 id="6、保存和加载变量"><a href="#6、保存和加载变量" class="headerlink" title="6、保存和加载变量"></a>6、保存和加载变量</h3><p>  save 文件名 变量名</p>
<p>  load 文件名  </p>
<p>提取数组元素：x=A(rows , cols);</p>
<p>当里面是单个索引值时，表示数组顺序存储中第几个</p>
<p>冒号运算符(:)可指代该维度中的所有元素。</p>
<p> x=（1：3，：）表示矩阵1到3行所有元素</p>
<p>关键字<strong>end</strong>表示该维度的最后一个 </p>
<p>matalab支持线性代数中运算形式</p>
<p>矩阵乘法：<strong>. 运算符</strong>执行按元素乘法，允许您将两个大小相同的数组的对应元素相乘。</p>
<h3 id="7、从函数调用中获取多个输出"><a href="#7、从函数调用中获取多个输出" class="headerlink" title="7、从函数调用中获取多个输出"></a>7、从函数调用中获取多个输出</h3><p>方括号（[]）可获输出</p>
<p>x=</p>
<p>​    1    2</p>
<p>​    3    4</p>
<p><strong>size函数</strong>：s=size(x)    ==&gt;s = 2 x 2</p>
<p>​                    [row,col]=size(x)    ==&gt;row=2    col=2</p>
<p>​                    r = size(A,1)        c=size(A,2)</p>
<p><strong>max函数：</strong>[xMax,index]=max(x)    ==&gt;xMax=4    index=4</p>
<p>当发现不认识的函数时，我们可以使用<strong>doc funName</strong>查看函数说明</p>
<h3 id="8、绘制向量图"><a href="#8、绘制向量图" class="headerlink" title="8、绘制向量图"></a>8、绘制向量图</h3><p>plot函数在一张图上绘制两个相同长度的向量。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">plot</span>(X,Y)</span><br></pre></td></tr></table></figure>
<p> 绘制(x,y)的折线</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y,<span class="string">'r--o'</span>)</span><br></pre></td></tr></table></figure>
<p>以上命令将会绘制一条红色 (r) 虚线 (–)，并使用圆圈 (o)标记 </p>
<p>使用 plot函数时，您可在绘图参数和线条设定符之后添加属性名称-属性值对组。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">plot</span>(x,y,<span class="string">'ro-'</span>,<span class="string">'LineWidth'</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>后面的附加参数表示<a href="<https://ww2.mathworks.cn/help/matlab/ref/linespec.html?requestedDomain=zh>">线条设定</a></p>
<blockquote>
<p>hold on    表示保留之前的绘图，可以在它的基础上加图</p>
<p>hold off    表示返回默认绘图方式</p>
<p>close all     表示关闭所有的绘图窗口</p>
</blockquote>
<p> 绘图注释</p>
<p>xlabel/ylabel函数 设置x，y轴的说明</p>
<p>title函数 设置图的标题</p>
<p>legend（‘label’）指定图例</p>
<h3 id="9、逻辑索引"><a href="#9、逻辑索引" class="headerlink" title="9、逻辑索引"></a>9、逻辑索引</h3><p>使用逻辑数组作为逻辑索引，MATLAB会提取索引为1的数组元素。</p>
<p><strong>决策分支</strong></p>
<blockquote>
<p>if  条件</p>
<p>​    Statement;</p>
<p>else</p>
<p>​    OtherStatement;</p>
<p>end</p>
</blockquote>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> switch_expression</span><br><span class="line">   <span class="keyword">case</span> case_expression</span><br><span class="line">      statements</span><br><span class="line">   <span class="keyword">case</span> case_expression</span><br><span class="line">      statements</span><br><span class="line">    ...</span><br><span class="line">   <span class="keyword">otherwise</span></span><br><span class="line">      statements</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="10、实时脚本"><a href="#10、实时脚本" class="headerlink" title="10、实时脚本"></a>10、实时脚本</h3><p><a href="test.mlx" target="_blank">以上语法练习脚本文件</a></p>
<h3 id="11、导入EXCEL数据入"><a href="#11、导入EXCEL数据入" class="headerlink" title="11、导入EXCEL数据入"></a>11、导入EXCEL数据入</h3><p>（1）在工作区右键，点击新建（Ctrl+N)，输入变量名称为X</p>
<p> （2）在Excel中复制数据，再回到Excel中右键，点击粘贴Excel数据（Ctrl+Shift+V）<br>（3）关掉这个窗口，点击X变量，右键另存为，保存为mat文件（下次就不用复制粘贴了，只需使用load命令即可加载数据）<br>（4）注意，<strong>代码和数据要放在同一个目录下哦。</strong></p>
<h3 id="12、函数"><a href="#12、函数" class="headerlink" title="12、函数"></a>12、函数</h3><p><strong>function [输出变量] = 函数名称(输入变量）</strong><br>函数的中间部分都是函数体<br>函数的最后要用end结尾<br>输出变量和输入变量可以有多个，用逗号隔开</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[a,b,c]</span>=<span class="title">test</span><span class="params">(d,e,f)</span></span></span><br><span class="line">    a=d+e;</span><br><span class="line">    b=e+f;</span><br><span class="line">    c=f+d;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>自定义的函数要单独放在一个m文件中，不可以直接放在主函数里面（和其他大多数语言不同）</p>
<p>自定义的函数要单独放在一个m文件中，不可以直接放在主函数里面（和其他大多数语言不同）</p>
<h1 id="二、数学建模算法与模型"><a href="#二、数学建模算法与模型" class="headerlink" title="二、数学建模算法与模型"></a>二、数学建模算法与模型</h1><p><img src="E:\Hexo\source\_posts\数学建模.png" alt="数学建模模型"></p>
<h3 id="2-1-评价类模型"><a href="#2-1-评价类模型" class="headerlink" title="2.1 评价类模型"></a>2.1 评价类模型</h3><h4 id><a href="#" class="headerlink" title></a><img src="E:\Hexo\source\_posts\评价类模型.png" alt="评价类模型"></h4><h4 id="2-1-1-层次分析法（Matlab实现）"><a href="#2-1-1-层次分析法（Matlab实现）" class="headerlink" title="2.1.1 层次分析法（Matlab实现）"></a>2.1.1 层次分析法（Matlab实现）</h4><p>层次分析法用途：</p>
<p><a herf="[https://baike.baidu.com/item/%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95/1672?fr=aladdin](https://baike.baidu.com/item/层次分析法/1672?fr=aladdin)">百度层次分析法说明</a></p>
<p>确定指标权重，没数据，层次分析法，有数据，bp神经网络</p>
<p>层次分析法是为了对某些事情由于一些相互关联、相互制约的因素而缺乏定量数据的决策问题做出合理解决的办法。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 输入判断矩阵</span></span><br><span class="line">clear;clc</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'请输入判断矩阵A： '</span>)</span><br><span class="line"><span class="comment">% A = input('判断矩阵A=')</span></span><br><span class="line">A =[<span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">3</span>;</span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">3</span>;</span><br><span class="line"> <span class="number">1</span>/<span class="number">4</span> <span class="number">1</span>/<span class="number">4</span> <span class="number">1</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">1</span>/<span class="number">2</span>;</span><br><span class="line"> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span>;</span><br><span class="line"> <span class="number">1</span>/<span class="number">3</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">2</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">1</span>]</span><br><span class="line"><span class="comment">% matlab矩阵有两种写法，可以直接写到一行:</span></span><br><span class="line"><span class="comment">% [1 1 4 1/3 3;1 1 4 1/3 3;1/4 1/4 1 1/3 1/2;3 3 3 1 3;1/3 1/3 2 1/3 1]</span></span><br><span class="line"><span class="comment">% 也可以写成多行:</span></span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">3</span>;</span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">3</span>;</span><br><span class="line"> <span class="number">1</span>/<span class="number">4</span> <span class="number">1</span>/<span class="number">4</span> <span class="number">1</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">1</span>/<span class="number">2</span>;</span><br><span class="line"> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span>;</span><br><span class="line"> <span class="number">1</span>/<span class="number">3</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">2</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">1</span>]</span><br><span class="line"><span class="comment">% 两行之间以分号结尾（最后一行的分号可加可不加），同行元素之间以空格（或者逗号）分开。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 方法1：算术平均法求权重</span></span><br><span class="line"><span class="comment">% 第一步：将判断矩阵按照列归一化（每一个元素除以其所在列的和）</span></span><br><span class="line">Sum_A = sum(A)</span><br><span class="line"></span><br><span class="line">[n,n] = <span class="built_in">size</span>(A)  <span class="comment">% 也可以写成n = size(A,1)</span></span><br><span class="line"><span class="comment">% 因为我们的判断矩阵A是一个方阵，所以这里的r和c相同，我们可以就用同一个字母n表示</span></span><br><span class="line">SUM_A = <span class="built_in">repmat</span>(Sum_A,n,<span class="number">1</span>)   <span class="comment">%repeat matrix的缩写</span></span><br><span class="line"><span class="comment">% 另外一种替代的方法如下：</span></span><br><span class="line">    SUM_A = [];</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n   <span class="comment">%循环哦，这一行后面不能加冒号（和Python不同），这里表示循环n次</span></span><br><span class="line">        SUM_A = [SUM_A; Sum_A]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">clc;A</span><br><span class="line">SUM_A</span><br><span class="line">Stand_A = A ./ SUM_A</span><br><span class="line"><span class="comment">% 这里我们直接将两个矩阵对应的元素相除即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 第二步：将归一化的各列相加(按行求和)</span></span><br><span class="line">sum(Stand_A,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 第三步：将相加后得到的向量中每个元素除以n即可得到权重向量</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'算术平均法求权重的结果为：'</span>);</span><br><span class="line"><span class="built_in">disp</span>(sum(Stand_A,<span class="number">2</span>) / n)</span><br><span class="line"><span class="comment">% 首先对标准化后的矩阵按照行求和，得到一个列向量</span></span><br><span class="line"><span class="comment">% 然后再将这个列向量的每个元素同时除以n即可（注意这里也可以用./哦）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 方法2：几何平均法求权重</span></span><br><span class="line"><span class="comment">% 第一步：将A的元素按照行相乘得到一个新的列向量</span></span><br><span class="line">clc;A</span><br><span class="line">Prduct_A = prod(A,<span class="number">2</span>)</span><br><span class="line"><span class="comment">% prod函数和max函数类似，一个用于乘，一个用于加  dim = 2 维度是行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 第二步：将新的向量的每个分量开n次方</span></span><br><span class="line">Prduct_n_A = Prduct_A .^ (<span class="number">1</span>/n)</span><br><span class="line"><span class="comment">% 这里对每个元素进行乘方操作，因此要加.号哦。  ^符号表示乘方哦  这里是开n次方，所以我们等价求1/n次方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 第三步：对该列向量进行归一化即可得到权重向量</span></span><br><span class="line"><span class="comment">% 将这个列向量中的每一个元素除以这一个向量的和即可</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'几何平均法求权重的结果为：'</span>);</span><br><span class="line"><span class="built_in">disp</span>(Prduct_n_A ./ sum(Prduct_n_A))</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 方法3：特征值法求权重</span></span><br><span class="line"><span class="comment">% 第一步：求出矩阵A的最大特征值以及其对应的特征向量</span></span><br><span class="line">clc</span><br><span class="line">[V,D] = eig(A)    <span class="comment">%V是特征向量, D是由特征值构成的对角矩阵（除了对角线元素外，其余位置元素全为0）</span></span><br><span class="line">Max_eig = <span class="built_in">max</span>(<span class="built_in">max</span>(D)) <span class="comment">%也可以写成max(D(:))哦~</span></span><br><span class="line"><span class="comment">% 那么怎么找到最大特征值所在的位置了？ 需要用到find函数，它可以用来返回向量或者矩阵中不为0的元素的位置索引。</span></span><br><span class="line"><span class="comment">% 那么问题来了，我们要得到最大特征值的位置，就需要将包含所有特征值的这个对角矩阵D中，不等于最大特征值的位置全变为0</span></span><br><span class="line"><span class="comment">% 这时候可以用到矩阵与常数的大小判断运算</span></span><br><span class="line">D == Max_eig</span><br><span class="line">[r,c] = <span class="built_in">find</span>(D == Max_eig , <span class="number">1</span>)</span><br><span class="line"><span class="comment">% 找到D中第一个与最大特征值相等的元素的位置，记录它的行和列。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 第二步：对求出的特征向量进行归一化即可得到我们的权重</span></span><br><span class="line">V(:,c)</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'特征值法求权重的结果为：'</span>);</span><br><span class="line"><span class="built_in">disp</span>( V(:,c) ./ sum(V(:,c)) )</span><br><span class="line"><span class="comment">% 我们先根据上面找到的最大特征值的列数c找到对应的特征向量，然后再进行标准化。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算一致性比例CR</span></span><br><span class="line">clc</span><br><span class="line">CI = (Max_eig - n) / (n<span class="number">-1</span>);</span><br><span class="line">RI=[<span class="number">0</span> <span class="number">0</span> <span class="number">0.52</span> <span class="number">0.89</span> <span class="number">1.12</span> <span class="number">1.26</span> <span class="number">1.36</span> <span class="number">1.41</span> <span class="number">1.46</span> <span class="number">1.49</span> <span class="number">1.52</span> <span class="number">1.54</span> <span class="number">1.56</span> <span class="number">1.58</span> <span class="number">1.59</span>];  <span class="comment">%注意哦，这里的RI最多支持 n = 15</span></span><br><span class="line">CR=CI/RI(n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'一致性指标CI='</span>);<span class="built_in">disp</span>(CI);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'一致性比例CR='</span>);<span class="built_in">disp</span>(CR);</span><br><span class="line"><span class="keyword">if</span> CR&lt;<span class="number">0.10</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'因为CR &lt; 0.10，所以该判断矩阵A的一致性可以接受!'</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'注意：CR &gt;= 0.10，因此该判断矩阵A需要进行修改!'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="2-1-2-TOPSIS（优劣解距离法）"><a href="#2-1-2-TOPSIS（优劣解距离法）" class="headerlink" title="2.1.2 TOPSIS（优劣解距离法）"></a>2.1.2 TOPSIS（优劣解距离法）</h4><p> <strong>原理</strong></p>
<p>其基本原理，是通过检测评价对象与最优解、最劣解的距离来进行排序，若评价对象最靠近最优解同时又最远离最劣解，则为最好；否则不为最优。其中最优解的各指标值都达到各评价指标的最优值。最劣解的各指标值都达到各评价指标的最差值。</p>
<p>能充分利用原始数据的信息，其结果能精确地反映各评价方案之间的差距。 </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 第一步：导入数据</span></span><br><span class="line">clear;clc</span><br><span class="line">load data_water_quality.mat</span><br><span class="line"></span><br><span class="line"><span class="comment">% 第二步：正向化</span></span><br><span class="line">[m,n] = <span class="built_in">size</span>(X);</span><br><span class="line"><span class="comment">% 字符串拼接</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">'共有'</span> num2str(m) <span class="string">'个评价对象, '</span> num2str(n) <span class="string">'个评价指标'</span>]) </span><br><span class="line">Judge = input([<span class="string">'这'</span> num2str(n) <span class="string">'个指标是否需要经过正向化处理，需要请输入1 ，不需要输入0：  '</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Judge==<span class="number">1</span></span><br><span class="line">     Position = input(<span class="string">'请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]： '</span>); <span class="comment">%[2,3,4]</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'请输入需要处理的这些列的指标类型（1：极小型， 2：中间型， 3：区间型） '</span>)</span><br><span class="line">    Type = input(<span class="string">'例如：第2列是极小型，第3列是区间型，第6列是中间型，就输入[1,3,2]：  '</span>); <span class="comment">%[2,1,3]</span></span><br><span class="line">    <span class="comment">% 注意，Position和Type是两个同维度的行向量</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">size</span>(Position,<span class="number">2</span>)  <span class="comment">%这里需要对这些列分别处理，因此我们需要知道一共要处理的次数，即循环的次数</span></span><br><span class="line">        X(:,Position(<span class="built_in">i</span>)) = Positivization(X(:,Position(<span class="built_in">i</span>)),Type(<span class="built_in">i</span>),Position(<span class="built_in">i</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'正向化后的矩阵 X =  '</span>)</span><br><span class="line">    <span class="built_in">disp</span>(X)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% 让用户判断是否需要增加权重</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">"请输入是否需要增加权重向量，需要输入1，不需要输入0"</span>)</span><br><span class="line">Judge = input(<span class="string">'请输入是否需要增加权重： '</span>);</span><br><span class="line"><span class="keyword">if</span> Judge==<span class="number">1</span></span><br><span class="line">    weigh = input([<span class="string">'你需要输入'</span> num2str(m) <span class="string">'个权数。'</span> <span class="string">'请以行向量的形式输入这'</span> num2str(m) <span class="string">'个权重: '</span>]);</span><br><span class="line">    OK = <span class="number">0</span>;  <span class="comment">% 用来判断用户的输入格式是否正确</span></span><br><span class="line">    <span class="keyword">while</span> OK==<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> sum(weigh)==<span class="number">1</span>&amp;&amp;<span class="built_in">size</span>(weigh,<span class="number">1</span>)==<span class="number">1</span>&amp;&amp;<span class="built_in">size</span>(weigh)==n</span><br><span class="line">            OK=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            weigh=input(<span class="string">'Input Error,Please Go on:'</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    weigh=<span class="built_in">ones</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 第三步：标准化</span></span><br><span class="line">Z=X./<span class="built_in">repmat</span>(sum(X*X),n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'输出标准化矩阵:'</span>)</span><br><span class="line"><span class="built_in">disp</span>(Z)</span><br><span class="line"><span class="comment">% 第四步：归一化并排序</span></span><br><span class="line">D_P = sum([(Z - <span class="built_in">repmat</span>(<span class="built_in">max</span>(Z),n,<span class="number">1</span>)) .^ <span class="number">2</span> ].*weigh,<span class="number">2</span>) .^ <span class="number">0.5</span>;   <span class="comment">% D+ 与最大值的距离向量</span></span><br><span class="line">D_N = sum([(Z - <span class="built_in">repmat</span>(<span class="built_in">min</span>(Z),n,<span class="number">1</span>)) .^ <span class="number">2</span> ].*weigh,<span class="number">2</span>) .^ <span class="number">0.5</span>;   <span class="comment">% D- 与最小值的距离向量</span></span><br><span class="line">S = D_N ./ (D_P+D_N);    <span class="comment">% 未归一化的得分</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'最后的得分为：'</span>)</span><br><span class="line">stand_S = S / sum(S)</span><br><span class="line">[sorted_S,index] = <span class="built_in">sort</span>(stand_S ,<span class="string">'descend'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-2-插值与拟合模型"><a href="#2-2-插值与拟合模型" class="headerlink" title="2.2 插值与拟合模型"></a>2.2 插值与拟合模型</h3><p>插值：求过已知有限个数据点的近似函数。<br>拟合：已知有限个数据点，求近似函数，可不过已知数据点，只要求在某种意义下它在这些点上的总偏差最小。<br>插值和拟合都是要<strong>根据一组数据构造一个函数作为近似</strong>，由于近似的要求不同，二者的数学方法上是完全不同的。而面对一个实际问题，究竟应该用插值还是拟合，有时容易确定，有时则并不明显。</p>
<h4 id="2-2-1-插值法"><a href="#2-2-1-插值法" class="headerlink" title="2.2.1 插值法"></a>2.2.1 插值法</h4><p>推荐查看优秀博文：</p>
<p><a herf="<https://blog.csdn.net/qq_41686130/article/details/81385277>">插值和拟合</a></p>
<p><a herf="<https://blog.csdn.net/daaikuaichuan/article/details/73870209>">MATLAB回归、插值、逼近、拟合总结（含代码和图例说明）</a></p>
<p>文件下载：<a href="五种插值法的对比研究.doc">五种插值法的对比研究</a></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%分段三次皮埃尔插值法</span></span><br><span class="line">clear;clc</span><br><span class="line">x = -<span class="built_in">pi</span>:<span class="built_in">pi</span>; y = <span class="built_in">sin</span>(x); </span><br><span class="line">new_x = -<span class="built_in">pi</span>:<span class="number">0.1</span>:<span class="built_in">pi</span>;</span><br><span class="line">       </span><br><span class="line">p = pchip(x,y,new_x);       <span class="comment">% 通过matlab内部函数pchip得到插值所得的y值</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)   <span class="comment">%如果不指示，后面的图形则会覆盖掉前面的</span></span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">'r*'</span>,new_x,p,<span class="string">'b-'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 三次样条插值和分段三次埃尔米特插值的对比</span></span><br><span class="line">x = -<span class="built_in">pi</span>:<span class="built_in">pi</span>; </span><br><span class="line">y = <span class="built_in">sin</span>(x); </span><br><span class="line">new_x = -<span class="built_in">pi</span>:<span class="number">0.1</span>:<span class="built_in">pi</span>;</span><br><span class="line">p1 = pchip(x,y,new_x);   <span class="comment">%分段三次埃尔米特插值</span></span><br><span class="line">p2 = spline(x,y,new_x);  <span class="comment">%三次样条插值</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">'o'</span>,new_x,p1,<span class="string">'r-'</span>,new_x,p2,<span class="string">'b-'</span>)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'样本点'</span>,<span class="string">'三次埃尔米特插值'</span>,<span class="string">'三次样条插值'</span>,<span class="string">'Location'</span>,<span class="string">'SouthEast'</span>)   <span class="comment">%标注显示在东南方向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%legend函数说明：</span></span><br><span class="line"><span class="comment">%lengend（‘str'与图例顺序相对应，’Location，指示图例说明在figure位置）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% n维数据的插值</span></span><br><span class="line">x = -<span class="built_in">pi</span>:<span class="built_in">pi</span>; y = <span class="built_in">sin</span>(x); </span><br><span class="line">new_x = -<span class="built_in">pi</span>:<span class="number">0.1</span>:<span class="built_in">pi</span>;</span><br><span class="line">p = interpn (x, y, new_x, <span class="string">'spline'</span>);</span><br><span class="line"><span class="comment">% 等价于 p = spline(x, y, new_x);</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">plot</span>(x, y, <span class="string">'o'</span>, new_x, p, <span class="string">'r-'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 人口预测</span></span><br><span class="line">population=[<span class="number">133126</span>,<span class="number">133770</span>,<span class="number">134413</span>,<span class="number">135069</span>,<span class="number">135738</span>,<span class="number">136427</span>,<span class="number">137122</span>,<span class="number">137866</span>,<span class="number">138639</span>, <span class="number">139538</span>];</span><br><span class="line">year = <span class="number">2009</span>:<span class="number">2018</span>;</span><br><span class="line"><span class="comment">% hermite插值是用一条曲线来逼近,最高次数可能高于三次</span></span><br><span class="line"><span class="comment">% 三次样条插值是用连续的曲线来逼近,最高次数是三次</span></span><br><span class="line"></span><br><span class="line">p1 = pchip(year, population, <span class="number">2019</span>:<span class="number">2021</span>)  <span class="comment">%分段三次埃尔米特插值预测</span></span><br><span class="line">p2 = spline(year, population, <span class="number">2019</span>:<span class="number">2021</span>) <span class="comment">%三次样条插值预测</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">plot</span>(year, population,<span class="string">'go'</span>,<span class="number">2019</span>:<span class="number">2021</span>,p1,<span class="string">'r*-'</span>,<span class="number">2019</span>:<span class="number">2021</span>,p2,<span class="string">'bx-'</span>)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'样本点'</span>,<span class="string">'三次埃尔米特插值预测'</span>,<span class="string">'三次样条插值预测'</span>,<span class="string">'Location'</span>,<span class="string">'SouthEast'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 水池补充</span></span><br><span class="line">clear;clc</span><br><span class="line"><span class="comment">%插值预测中间周的水体评价指标</span></span><br><span class="line">Z=[<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>;<span class="number">1913</span>,<span class="number">1945</span>,<span class="number">1920</span>,<span class="number">2205</span>,<span class="number">2260</span>,<span class="number">2302</span>,<span class="number">2385</span>,<span class="number">2420</span>;</span><br><span class="line">   <span class="number">5.12</span>,<span class="number">3.2</span>,<span class="number">6.72</span>,<span class="number">3.36</span>,<span class="number">2.4</span>,<span class="number">4.14</span>,<span class="number">6.43</span>,<span class="number">4.6</span>;</span><br><span class="line">   <span class="number">21.9</span>,<span class="number">20</span>,<span class="number">26.8</span>,<span class="number">27.73</span>,<span class="number">23.4</span>,<span class="number">22.75</span>,<span class="number">25.36</span>,<span class="number">26.03</span>;</span><br><span class="line">   <span class="number">24.8</span>,<span class="number">25.7</span>,<span class="number">26.8</span>,<span class="number">28</span>,<span class="number">30.4</span>,<span class="number">30</span>,<span class="number">27.6</span>,<span class="number">30.8</span>;</span><br><span class="line">   <span class="number">9.31</span>,<span class="number">9.14</span>,<span class="number">9.14</span>,<span class="number">9.29</span>,<span class="number">9.22</span>,<span class="number">9.33</span>,<span class="number">9.16</span>,<span class="number">9.26</span>;<span class="number">1.8</span>,<span class="number">2.3</span>,<span class="number">1.9</span>,<span class="number">2.1</span>,<span class="number">2.1</span>,<span class="number">1.1</span>,<span class="number">1.5</span>,<span class="number">1.5</span>;</span><br><span class="line">   <span class="number">28</span>,<span class="number">24</span>,<span class="number">26</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">19</span>,<span class="number">23</span>;</span><br><span class="line">   <span class="number">425.11</span>,<span class="number">457.99</span>,<span class="number">492.48</span>,<span class="number">492.08</span>,<span class="number">501.93</span>,<span class="number">598.48</span>,<span class="number">604.44</span>,<span class="number">623.89</span>;</span><br><span class="line">   <span class="number">628.1</span>,<span class="number">639.2</span>,<span class="number">648.87</span>,<span class="number">640.33</span>,<span class="number">616.43</span>,<span class="number">614.72</span>,<span class="number">507.14</span>,<span class="number">580</span>;<span class="number">2</span></span><br><span class="line">   <span class="number">8</span>,<span class="number">24</span>,<span class="number">26</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">19</span>,<span class="number">23</span>;</span><br><span class="line">   <span class="number">30.58</span>,<span class="number">36.19</span>,<span class="number">49.750</span>,<span class="number">60.58</span>,<span class="number">56.58</span>,<span class="number">60.06</span>,<span class="number">67.99</span>,<span class="number">67.74</span>];</span><br><span class="line">x=Z(<span class="number">1</span>,:); <span class="comment">%Z的第一行是星期Z: 1     3     5     7     9    11    13    15</span></span><br><span class="line">[n,m]=<span class="built_in">size</span>(Z);<span class="comment">%n为Z的行数，m为Z的列数</span></span><br><span class="line"><span class="comment">% 注意Matlab的数组中不能保存字符串，如果要生成字符串数组，就需要使用元胞数组，其用大括号&#123;&#125;定义和引用</span></span><br><span class="line">ylab=&#123;<span class="string">'周数'</span>,<span class="string">'轮虫'</span>,<span class="string">'溶氧'</span>,<span class="string">'COD'</span>,<span class="string">'水温'</span>,<span class="string">'PH值'</span>,<span class="string">'盐度'</span>,<span class="string">'透明度'</span>,<span class="string">'总碱度'</span>,<span class="string">'氯离子'</span>,<span class="string">'透明度'</span>,<span class="string">'生物量'</span>&#125;;  <span class="comment">% 等会要画的图形的标签</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">'共有'</span> num2str(n<span class="number">-1</span>) <span class="string">'个指标要进行插值。'</span>])</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'正在对一号池三次埃尔米特插值，请等待'</span>)<span class="comment">%一号池共有十一组要插值的数据，算上星期所在的第一行，共十二行</span></span><br><span class="line">P=<span class="built_in">zeros</span>(<span class="number">11</span>,<span class="number">15</span>);<span class="comment">%对要储存数据的矩阵P赋予初值</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:n<span class="comment">%从第二行开始都是要进行插值的指标</span></span><br><span class="line">    y=Z(<span class="built_in">i</span>,:);<span class="comment">%将每一行依次赋值给y</span></span><br><span class="line">    new_x=<span class="number">1</span>:<span class="number">15</span>;<span class="comment">%要进行插值的x</span></span><br><span class="line">    p1=pchip(x,y,new_x);<span class="comment">%调用三次埃尔米特插值函数</span></span><br><span class="line">    subplot(<span class="number">4</span>,<span class="number">3</span>,<span class="built_in">i</span><span class="number">-1</span>);<span class="comment">%将所有图依次变现在4*3的一幅大图上</span></span><br><span class="line">    <span class="built_in">plot</span>(x,y,<span class="string">'ro'</span>,new_x,p1,<span class="string">'-'</span>);<span class="comment">%画出每次循环处理后的图像</span></span><br><span class="line">    axis([<span class="number">0</span> <span class="number">15</span>,-<span class="built_in">inf</span>,<span class="built_in">inf</span>])  <span class="comment">%设置坐标轴的范围，这里设置横坐标轴0-15，纵坐标不变化</span></span><br><span class="line">    <span class="comment">%  xlabel('星期')%x轴标题</span></span><br><span class="line">    ylabel(ylab&#123;<span class="built_in">i</span>&#125;)<span class="comment">%y轴标题  这里是直接引用元胞数组中的字符串哦</span></span><br><span class="line">    P(<span class="built_in">i</span><span class="number">-1</span>,:)=p1;<span class="comment">%将每次插值之后的结果保存在P矩阵中        </span></span><br><span class="line"><span class="keyword">end</span>                                                       </span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'原始数据'</span>,<span class="string">'三次埃尔米特插值数据'</span>,<span class="string">'Location'</span>,<span class="string">'SouthEast'</span>)<span class="comment">%加上标注，注意要手动在图中拖动标注到图片右下角哦</span></span><br><span class="line">P = [<span class="number">1</span>:<span class="number">15</span>; P]  <span class="comment">%把P的第一行加上周数</span></span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-拟合"><a href="#2-2-2-拟合" class="headerlink" title="2.2.2 拟合"></a>2.2.2 拟合</h4><p>拟合与插值方法（给出一批数据点，确定满足特定要求的曲线或者曲面，从而反映对象整体的变化趋势）： matlab可以实现一元函数，包括多项式和非线性函数的拟合以及多元函数的拟合，即回归分析，从而确定函数； 同时也可以用matlab实现分段线性、多项式、样条以及多维插值。 </p>
<p>拟合：拟合的实现分为MATLAB和excel实现。</p>
<p>MATLAB的实现就是polyfit函数：主要是多项式拟合。</p>
<p>更复杂的函数拟合，使用的是最小二乘法，或者其他方法。但是需要经验公式（通过散点图分析得到经验公式）.</p>
<blockquote>
<p>例如：用最小二乘法求一个形如<img src="https://private.codecogs.com/gif.latex?y%20%3D%20a%20&plus;%20b%7Bx%5E2%7D" alt="y = a + b{x^2}">的经验公式，使它与下表所示的数据拟合</p>
</blockquote>
<p><img src="https://img-blog.csdn.net/20180803123009160?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjg2MTMw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p>
<p>matlab代码实现：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">19</span> <span class="number">25</span> <span class="number">31</span> <span class="number">38</span> <span class="number">44</span>]';</span><br><span class="line">y=[<span class="number">19.0</span> <span class="number">32.3</span> <span class="number">49.0</span> <span class="number">73.3</span> <span class="number">97.8</span>]';</span><br><span class="line">r=[<span class="built_in">ones</span>(<span class="built_in">size</span>(x,<span class="number">1</span>),<span class="number">1</span>),x.^<span class="number">2</span>];</span><br><span class="line">ab =r\y</span><br><span class="line">x0=<span class="number">19</span>:<span class="number">0.1</span>:<span class="number">44</span></span><br><span class="line">y0=ab(<span class="number">1</span>)+ab(<span class="number">2</span>)*x0.^<span class="number">2</span>;</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">'o'</span>,x0,y0,<span class="string">'r'</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>polyfit - 多项式曲线拟合</p>
<p>此 MATLAB 函数 返回阶数为 n 的多项式 p(x) 的系数，该阶数是 y 中数据的最佳拟合（在最小二乘方式中）。p 中的系数按降幂排列，p 的长度为<br>n+1</p>
<p>p = polyfit(x,y,n)<br>[p,S] = polyfit(x,y,n)<br>[p,S,mu] = polyfit(x,y,n)</p>
<p>polyval - 多项式计算</p>
<p>此 MATLAB 函数 计算多项式 p 在 x 的每个点处的值。参数 p 是长度为 n+1 的向量，其元素是 n 次多项式的系数（降幂排序）：</p>
<p>y = polyval(p,x)<br>[y,delta] = polyval(p,x,S)<br>y = polyval(p,x,[],mu)<br>[y,delta] = polyval(p,x,S,mu)</p>
</blockquote>
<h3 id="2-3-相关性分析"><a href="#2-3-相关性分析" class="headerlink" title="2.3 相关性分析"></a>2.3 相关性分析</h3><p>相关分析是<strong>研究两个或两个以上处于同等地位的随机变量间的相关关系的统计分析方法</strong>。例如，人的身高和体重之间；空气中的相对湿度与降雨量之间的相关关系都是相关分析研究的问题，但是要有一定的实际意义才行。</p>
<p>两个变量之间的相关程度通过相关系数r来表示。</p>
<p><a herf="<https://blog.csdn.net/w1129390772/article/details/51393432>">SPSS双变量相关性分析与回归分析操作步骤</a></p>
<p>相关分析与回归分析之间的区别：回归分析侧重于研究随机变量间的依赖关系，以便用一个变量去预测另一个变量;相关分析侧重于发现随机变量间的种种相关特性。相关分析在工农业、水文、气象、社会经济和生物学等方面都有应用。</p>
<p>偏相关性分析：某一个要素对另一个要素的影响或相关程度时，把其他要素的影响视为常数，即暂不考虑其他要素的影响，而单独研究那两个要素之间的 相互关系的密切程度时，称为<a herf="<https://blog.csdn.net/liuyuan_jq/article/details/52590396>">偏相关</a>。</p>
<p>零阶偏相关分析是指没有控制变量的相关分析，即一般的相关分析。一阶偏相关分析是指有一个控制变量的相关分析，二阶偏相关分析是指有两个控制变量的偏相关分析，其他高阶偏相关分析以此类推。</p>
<hr>
<p>参考博文链接:</p>
<p><a herf="<https://blog.csdn.net/xzy5210123/article/details/84196314>">2018数学建模国赛经验帖</a></p>
<p><a herf="<http://special.univs.cn/service/jianmo/>">历年国赛优秀论文</a></p>
<hr>
]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构复习（三）</title>
    <url>/2019/06/27/%E6%A0%91/</url>
    <content><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><a id="more"></a>
<h1 id="第六章-树"><a href="#第六章-树" class="headerlink" title="第六章 树"></a>第六章 树</h1><h2 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h2><p><strong>树（Tree）是n（n&gt;=0）个结点的有限集</strong>。</p>
<p>在任意一棵非空树中：</p>
<p>（1）有且仅有一个特定的称为根（Root）的结点；</p>
<p>（2）当n&gt;1时，其余结点可分为m（m&gt;0）个互不相交的有限集T1，T2，…，Tn，其中每个集合本身又是一棵树，并称为根的子树（SubTree）</p>
<p>层次                     树</p>
<blockquote>
<p>  1                      A</p>
<p>​                     /    |     \</p>
<p>  2             B       C        D</p>
<p>​               /   \      |     /   |   \</p>
<p>  3         E     F     G   H   I   J</p>
<p>​            /  \                |</p>
<p>  4       K   L              M</p>
</blockquote>
<p>★树的结点包含一个数据元素及若干指向其子树的分支。</p>
<p>（1）度</p>
<p>结点拥有的子树树称为<strong>结点的度</strong>（Degree）如：上图A的度为3，C的度为1，F的度为0。</p>
<p><em><u>度为0</u></em>的结点称为<strong>叶子（Leaf）或终端结点</strong>，如：上图K,L,F,G,M,I,J都是树的叶子</p>
<p><em><u>度不为0</u></em>的结点称为非终端结点或分支结点，如：上图A,B,C,D,E,H</p>
<p>★<strong>树的度是树内各节点的度的最大值</strong>，如：上图的树的度为 3 。</p>
<p>（2）结点（家谱图）</p>
<p>结点的子树的根称为该结点的孩子（Child），相应地，该结点称为孩子的双亲（Parent）如：上图D是A的孩子，A是D的双亲。</p>
<p>同一个双亲的孩子叫兄弟（Sibling）如：上图H,I,J为互为兄弟</p>
<p>其双亲在同一层的结点互为堂兄弟。如上图G与E、F、H、I、J互为堂兄弟</p>
<p>结点的祖先是从根到该结点所经分支上的所有结点。如：上图M的祖先为A、D、H</p>
<p>（3）层次，深度（你家几代同堂啊？）</p>
<p>结点的层次（Level）从根开始定义起，根为第一层，根的孩子为第二层，</p>
<p><strong>树中结点的最大层次成为树的深度（Depth）或高度。</strong>如：上图树的深度为4</p>
<p>（4）有序树与无序树（长子，次子。。）</p>
<p>树中结点的<strong>各子树看成从左至右是有次序的（即不能互换）</strong>，则称该树为有序树，否则成为无序树。</p>
<p>有序树中最左的子树的根称为第一个孩子，最右边的称为最后一个孩子。（毕竟有序，排好了谁是老大，谁是老二，长兄有序嘛）</p>
<p>★<strong>森林（Forest）是m（m&gt;=0）棵互不相交的树的集合</strong>。对树中每个结点而言，其子树的集合即为森林。</p>
<p>由此也可以森林和树相互递归的定义来描述树。</p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>1、二叉树的定义及其主要特征</p>
<p>二叉树（Binary Tree）是另一种树形结构，</p>
<p>★<strong>二叉树的特点</strong>是：</p>
<p>（1）每个结点至多只有两棵子树（即二叉树中<strong>不存在度大于2的结点</strong>），</p>
<p>（2）二叉树的子树有左右之分，其<strong>次序不能随意颠倒</strong>。</p>
<p>二叉树要么为空，要么是由一个根结点加上两棵分别称为左子树和右子树的，互不相交的二叉树组成。</p>
<p>★二叉树的五种形态</p>
<p>​            |                  |            A      |            A          |           A</p>
<p>   Φ      |        A        |      B            |       B      C      |               B</p>
<p>（1）  |    （2）     |        （3）   |        （4）       |       （5）</p>
<p><strong><em>★二叉树的性质</em></strong></p>
<p>（<strong>性质一</strong>）在二叉树的第 i 层上至多有 2^(i-1)^个结点 （i &gt;=1）</p>
<p>​             </p>
<p>（<strong>性质二</strong>）<strong>深度为 k</strong> 的二叉树<strong>至多有2^k^ -1</strong>个结点（k&gt;=1）,至少k个结点。</p>
<p>​               </p>
<p>（<strong>性质三</strong>）★对任何一棵二叉树 T ，如果其终端结点数位n0，度为2的结点数位n2，则<strong>n0=n2+1</strong>。</p>
<p>​               式一：  n = n0 + n1 + n2 （结点总数   等于   度为0   加   度为1   加   度为2）</p>
<p>​               式二：  n = n0 + 2*n2 +1（n = 分支总数+1  ；分支总数 = n1+n2 （分支是由度为1，度为2的结点射出的））</p>
<p>​                式二 - 式一得： n0 = n2 + 1</p>
<p>★完全二叉树</p>
<p>一棵深度为 k 且有2^k^ - 1个结点的二叉树为<strong>满二叉树</strong></p>
<p>深度为k的，有n个结点的二叉树，当且仅当其每一个结点<strong>都与深度为k的满二叉树中1到n的结点一 一对应</strong>时，称之为<strong>完全二叉树</strong></p>
<p>（<strong>性质一</strong>）具有n个结点的完全二叉树的深度为 」 log 2 n」+1 </p>
<p>​             </p>
<p>（<strong>性质二</strong>） </p>
<p>【通俗版】从下往上看：结点1是根，没双亲；其他点的双亲是   i / 2 取下值</p>
<p>​                   上往下看：左孩子 是根节点的两倍（偶数），右孩子是根节点的两倍+1（奇数）</p>
<h2 id="二叉树的三种遍历-（先序、中序、后序）"><a href="#二叉树的三种遍历-（先序、中序、后序）" class="headerlink" title="二叉树的三种遍历 （先序、中序、后序）"></a>二叉树的三种遍历 （先序、中序、后序）</h2><p>先序：先根后左再右</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Visit</span><span class="params">(TElemType e)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(e);</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用递归算法实现先序遍历</span></span><br><span class="line"><span class="function">Status <span class="title">PreOrderTraverse</span><span class="params">(BiTree T,Status(* Visit)(TElemType e))</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Visit(T-&gt;data))&#123;</span><br><span class="line">			<span class="keyword">if</span>(PreOrderTraverse(T-&gt;lchild,Visit))</span><br><span class="line">            	<span class="keyword">if</span>(PreOrderTraverse(T-&gt;rchild,Visit)) <span class="keyword">return</span> Ok;</span><br><span class="line">        &#125;</span><br><span class="line">        retrun ERROR;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用非递归算法实现中序遍历</span></span><br><span class="line"><span class="function">Status <span class="title">InOrderTraverse</span><span class="params">(BiTree Visit())</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   InitStack(S);p=T;</span><br><span class="line">    <span class="keyword">while</span>(p||!StackEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">if</span>(p)&#123;Push(S,p); p=p-&gt;lchild;&#125;<span class="comment">//根指针进栈，遍历左子树</span></span><br><span class="line">        <span class="keyword">else</span>&#123;		<span class="comment">//根指针退栈，访问根结点，遍历左子树</span></span><br><span class="line">            Pop(S,p);</span><br><span class="line">            <span class="keyword">if</span>(!Visit(p-&gt;data))<span class="keyword">return</span> ERROR;</span><br><span class="line">            p=p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最优二叉树（Huffman树）"><a href="#最优二叉树（Huffman树）" class="headerlink" title="最优二叉树（Huffman树）"></a>最优二叉树（Huffman树）</h2><p>参考链接：</p>
<p><a href="https://www.cnblogs.com/maybe2030/p/4732377.html" target="_blank" rel="noopener">数据结构树</a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构复习（二）</title>
    <url>/2019/06/25/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97-1/</url>
    <content><![CDATA[<h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><a id="more"></a>
<h1 id="第三章-栈和队列"><a href="#第三章-栈和队列" class="headerlink" title="第三章 栈和队列"></a>第三章 栈和队列</h1><h3 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h3><p><strong>栈（stack）</strong>是限定仅在队尾进行插入或删除操作的线性表。</p>
<p>线性表的尾端为栈顶，表头为栈底。</p>
<p><strong>特点：</strong>栈是LIFO（Last In First Out），先存进去的数据只能最后被取出来，进出顺序逆序，即先进后出，后进先出。</p>
<p><img src="1.png" alt></p>
<p> 栈的表示和实现（top、base、为空或满的判断条件、元素个数）</p>
<ol>
<li><strong>顺序栈</strong></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//-------栈的顺序存储表示---------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	SElemType *base;	<span class="comment">//在栈构造之前和销毁之后，base的值为NULL</span></span><br><span class="line">	SElemType *top;		<span class="comment">//栈顶指针</span></span><br><span class="line">	<span class="keyword">int</span> stackSize;			<span class="comment">//当前分配的存储空间</span></span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个空栈</span></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S.base = (SElemType *)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">	<span class="keyword">if</span> (!S.base) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	S.top = S.base;</span><br><span class="line">	S.stackSize = STACK_INIT_SIZE;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///销毁栈S，S不再存在</span></span><br><span class="line"><span class="function">Status <span class="title">DestroyStack</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S.stackSize = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">free</span>(S.base);</span><br><span class="line">	S.base = S.top = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////把S置为空栈</span></span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S.top = S.base;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.base == S.top)</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回S的元素个数，即栈的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (S.top - S.base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取栈顶元素</span></span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S, SElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S))<span class="keyword">return</span> ERROR;</span><br><span class="line">    e= *(S.top - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//压栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S, SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top - S.base &gt;= S.stackSize)<span class="comment">//栈满，追加存储空间</span></span><br><span class="line">	&#123;</span><br><span class="line">		S.base = (SElemType *)<span class="built_in">realloc</span>(S.base, (S.stackSize + STACKINCREMENT) * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">		<span class="keyword">if</span> (!S.base) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">		S.top = S.base + S.stackSize;	<span class="comment">//将top指针指向要添加的位置去</span></span><br><span class="line">		S.stackSize += STACKINCREMENT;</span><br><span class="line">	&#125;</span><br><span class="line">	*(S.top++) = e;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹栈</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.base == S.top) <span class="keyword">return</span> ERROR;</span><br><span class="line">	e = *(--S.top);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(SElemType a)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack S, <span class="keyword">void</span>(*visit)(SElemType))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Stack Traverse: \n"</span>);</span><br><span class="line">	SElemType *p = S.base;</span><br><span class="line">	<span class="keyword">while</span> (p != S.top)</span><br><span class="line">	&#123;</span><br><span class="line">		visit(*p++);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>链式栈</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//------------链式栈的存储结构----------</span></span><br><span class="line">teypedef <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;	<span class="comment">// 存放栈的数据</span></span><br><span class="line">StackNode *next;</span><br><span class="line">&#125; StackNode, *LinkStackPtr;</span><br><span class="line">teypedef <span class="class"><span class="keyword">struct</span> <span class="title">LinkStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">LinkStackPrt top;	<span class="comment">// top指针</span></span><br><span class="line"><span class="keyword">int</span> count;		<span class="comment">// 栈元素计数器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>栈的相关应用</p>
<p>3.1 数制转换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于输入任意的一个非负十进制整数，打印输出与其等值的八进制数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Conversion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack S;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	<span class="keyword">int</span> e, Num;</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;Num);</span><br><span class="line">	<span class="keyword">while</span> (Num) &#123;</span><br><span class="line">		Push(S, Num % <span class="number">8</span>);</span><br><span class="line">		Num /= <span class="number">8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!StackEmpty(S))</span><br><span class="line">	&#123;</span><br><span class="line">		Pop(S, e);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d  "</span>, e);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.2 括号匹配的检验</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Match</span><span class="params">(<span class="keyword">char</span> ch, <span class="keyword">char</span> str)</span> </span>&#123;<span class="comment">//检查是否匹配</span></span><br><span class="line">	<span class="keyword">if</span> (ch == <span class="string">'('</span>&amp;&amp;str == <span class="string">')'</span>) <span class="keyword">return</span> TRUE;</span><br><span class="line">	<span class="keyword">if</span> (ch == <span class="string">'['</span>&amp;&amp;str == <span class="string">']'</span>) <span class="keyword">return</span> TRUE;</span><br><span class="line">	<span class="keyword">if</span> (ch == <span class="string">'&#123;'</span>&amp;&amp;str == <span class="string">'&#125;'</span>) <span class="keyword">return</span> TRUE;</span><br><span class="line">	<span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BracketMatch</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;<span class="comment">//str为输入的字符串</span></span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	SqStack S;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	<span class="keyword">while</span> (str[i] != <span class="string">'\0'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">switch</span>(str[i])</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">		<span class="keyword">case</span><span class="number">'</span>[<span class="string">':</span></span><br><span class="line">		case'&#123;':</span><br><span class="line">			Push(S, str[i]);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'</span>)<span class="string">':</span></span><br><span class="line">		case']':</span><br><span class="line">		<span class="keyword">case</span><span class="number">'</span>&#125;<span class="string">':</span></span><br><span class="line">			if (StackEmpty(S)) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"括号不匹配！\n"</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				GetTop(S, ch);</span><br><span class="line">				<span class="keyword">if</span> (Match(ch, str[i]))</span><br><span class="line">					Pop(S, ch);</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"括号不匹配！\n"</span>);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S))</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"括号匹配\n"</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"括号不匹配！\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.3 行编辑程序算法实现（部分）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在终端窗口有一新行，没有输入内容，输入Ctrl+D表示EOF</span></span><br><span class="line"><span class="comment">//在终端窗口有一新行，有输入内容，按两次Ctrl+D表示EOF</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LineEdit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 利用字符栈，从终端接收一行并传送至调用过程的数据区</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack S;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	<span class="keyword">char</span> c, ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (ch != EOF &amp;&amp; ch != <span class="string">'\n'</span>) &#123;</span><br><span class="line">			<span class="keyword">switch</span> (ch) </span><br><span class="line">			&#123;</span><br><span class="line">			case'#':Pop(S, c); break;		//前一个元素输入错误，想要删除</span><br><span class="line">			case'@':ClearStack(S); break;	//当前错误过多，删除整行</span><br><span class="line">			<span class="keyword">default</span>:Push(S, ch); <span class="keyword">break</span>;		<span class="comment">//存入栈</span></span><br><span class="line">			&#125;</span><br><span class="line">			ch = getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		StackTraverse(S, visit);</span><br><span class="line">		ClearStack(S);</span><br><span class="line">		<span class="keyword">if</span> (ch != EOF) ch = getchar();<span class="comment">//如果行没结尾，则直到读到结尾</span></span><br><span class="line">	&#125;</span><br><span class="line">	DestroyStack(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="二、队列"><a href="#二、队列" class="headerlink" title="二、队列"></a>二、队列</h3><p><strong>队列（queue）</strong>是限定仅在表头进行删除，表尾删除操作的线性表。</p>
<p><strong>特点：</strong>先进先出（FIFO）</p>
<p><img src="2.png" alt></p>
<p>  <strong>循环队列（front、rear、为空或满的判断条件、元素个数）</strong></p>
<p>与顺序栈类似，在队列的顺序结构中，除了用一组地址连续的存储单元依次存放从队列头到队列尾的元素之外，尚需附设两个指针front和rear分别指示队列头元素及队列尾元素的位置。</p>
<p><img src="E:\Hexo\source\_posts\3.jpg" alt></p>
<p>用此方法表示循环队列，就无法用Q.front=Q.rear来判断队列空间是空还是满。可有两种处理方法：其一是另设一个标志位以区别队列是空还是满；其二是少用一个元素空间，约定以“队列头指针在队列尾指针的下一位置上”作为队列呈满状态的标志。</p>
<p>从上述分析可见，C语言中不能用动态分配的一维数组来实现循环队列。如果要用，就必须为它设定一个最大队列长度；<strong>若无法预估所用队列的最大长度，建议使用链队列</strong>。</p>
<p>描述：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化建空队列时，令front=rear=0</span><br><span class="line">每当插入新的队尾元素时，“尾指针+1；</span><br><span class="line">每当删除队列头元素时，“头指针-1”；</span><br><span class="line">因此，在非空队列中，头指针始终指向队列头元素，而尾指针始终指向队列尾元素的下一个位置。</span><br></pre></td></tr></table></figure>
<p>实现代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100 <span class="comment">//最大队列长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> *base;<span class="comment">//初始化的动态分配储存空间，int可以换成元素的类型</span></span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">int</span> rear;        <span class="comment">//队尾</span></span><br><span class="line">    <span class="comment">//非链式，应该是顺序存储</span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"><span class="comment">//---------------------循环队列的基本操作的算法描述</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//构造一个空队列Q</span></span><br><span class="line">	Q.base = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(MAXSIZE * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="keyword">if</span> (!Q.base)<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	Q.front = Q.rear=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//返回Q的元素个数，即队列长度</span></span><br><span class="line">	<span class="keyword">return</span>((Q.rear - Q.front + MAXSIZE) % MAXSIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断条件</span></span><br><span class="line">	<span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MAXSIZE == Q.front)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	Q.base[Q.rear] = e;</span><br><span class="line">	Q.rear = (Q.rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q,<span class="keyword">int</span> &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//若队列不空，则删除Q的队头元素，用e返回其值</span></span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	e = Q.base[Q.front];</span><br><span class="line">	Q.front = (Q.front + <span class="number">1</span>) % MAXSIZE;<span class="comment">//由于下标是动态的，可能对应+1就到了开头的情况</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构复习（三）</title>
    <url>/2019/06/25/%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="串和数组"><a href="#串和数组" class="headerlink" title="串和数组"></a><strong>串和数组</strong></h1><a id="more"></a>
<h1 id="第四章-串"><a href="#第四章-串" class="headerlink" title="第四章 串"></a>第四章 串</h1><h2 id="一、串的概念与存储结构"><a href="#一、串的概念与存储结构" class="headerlink" title="一、串的概念与存储结构"></a>一、串的概念与存储结构</h2><p><strong>串（字符串）</strong>：是零个或多个字符 组成的有限序列。</p>
<p><strong>串值</strong>：双引号括起来的字符序列是串值。</p>
<p><strong>串长</strong>：串中所包含的字符个数称为该串的长度。</p>
<p><strong>空串（空的字符串）</strong>：长度为0的串称为空串，不包含任何字符。</p>
<p><strong>空格串（空白串）</strong>：构成串的所有字符都是空格的串称为空白串。空串和空白串不同。如“ ”和“”分别表示长度为1 的空白串和长度为0 的空串。</p>
<p><strong>子串</strong>：串中任意个连续字符组成的子串称为该串的子串，包含子串的串相应地称为主串。</p>
<p><strong>子串的序号</strong>：将子串在主串中首次出现时的该子串的首字符对应主串中的序号，称为子串在主串中的序号(或位置)。</p>
<p><strong>注意：空串是任意串的子串，任意串是其自身的子串。</strong></p>
<p><strong>串相等</strong>：如果两个串的串值相同，称为串相等。<strong>即串的长度相等，且各个对应位置的字符都相同时才相等。</strong></p>
<p>通常在程序中使用的串可分为两种：<strong>串变量和串常量</strong>：</p>
<h2 id="二、串的存储表示和实现————两种存储结构：顺序和链式。"><a href="#二、串的存储表示和实现————两种存储结构：顺序和链式。" class="headerlink" title="二、串的存储表示和实现————两种存储结构：顺序和链式。"></a>二、<strong>串的存储表示和实现————两种存储结构：顺序和链式。</strong></h2><p>串的逻辑结构和线性表极为相似，区别仅在与串的数据对象约束为字符集。</p>
<p>在串的基本操作中基本以“串的整体”作为操作对象。</p>
<p><strong>串的链式存储结构和线性表的串的链式存储结构类似，采用单链表来存储串，结点的构成是：</strong></p>
<ul>
<li>data域：存放字符，data域可存放的字符个数称为结点的大小。</li>
<li>next域：存放指向下一个结点的指针。</li>
</ul>
<blockquote>
<p><strong>定长顺序存储表示</strong>：<strong><em>用一组地址连续的存储单元</em></strong>来依次存储串中的字符序列。将串定义为字符数组，利用串名可以直接访问串值。此方式，串<strong>的存储空间在编译时确定</strong>，其大小不能改变。</p>
</blockquote>
<blockquote>
<p><strong>堆分配存储方式</strong>：仍然<strong><em>用一组地址连续的存储单元</em></strong>来依次存储串中的字符序列，但串的存储空间是<strong>在程序运行时根据串的实际长度动态分配</strong>的。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="comment">//串的顺序存储</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">st</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> *ch;       <span class="comment">//串存放的起始地址，串中第i个字符存储在ch[i-1]中</span></span><br><span class="line">	<span class="keyword">int</span> length;     <span class="comment">//串的长度</span></span><br><span class="line">	<span class="keyword">int</span> strsize;    <span class="comment">//分配的存储空间的大小，如果不足，在通过realloc()分配增加空间</span></span><br><span class="line">&#125;<span class="built_in">string</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//串的初始化操作</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">CreateNullString</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	s.length = <span class="number">0</span>;</span><br><span class="line">	s.ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(MAXSIZE *<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">	s.strsize = MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断空串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s.length == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//赋值操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringAssign</span><span class="params">(<span class="built_in">string</span> *s1, <span class="keyword">char</span> s2[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (s2[i] != <span class="string">'\0'</span>)  <span class="comment">// '\0' 是字符串的结束符，任何字符串之后都会自动加上'\0'</span></span><br><span class="line">		i++;            <span class="comment">//计算s2的长度</span></span><br><span class="line">	<span class="keyword">if</span> (i&gt;s1-&gt;strsize)&#123;</span><br><span class="line">		<span class="comment">//所赋值的字符数组超过字符串的默认容量，则增加存储空间</span></span><br><span class="line">		s1-&gt;ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(i*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">		s1-&gt;strsize = i;</span><br><span class="line">	&#125;</span><br><span class="line">	s1-&gt;length = i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;s1-&gt;length; i++)</span><br><span class="line">		s1-&gt;ch[i] = s2[i]; <span class="comment">//从第一个字符开始逐个字符赋值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//串拷贝操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringCopy</span><span class="params">(<span class="built_in">string</span> *s1, <span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s1-&gt;strsize&lt;s2.length)&#123;</span><br><span class="line">		<span class="comment">//realloc则对malloc申请的内存进行大小的调整.</span></span><br><span class="line">		s1-&gt;ch = (<span class="keyword">char</span>*)<span class="built_in">realloc</span>(s1-&gt;ch, s2.length*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">		s1-&gt;strsize = s2.length;</span><br><span class="line">	&#125;</span><br><span class="line">	s1-&gt;length = s2.length;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;s1-&gt;length; i++)</span><br><span class="line">		s1-&gt;ch[i] = s2.ch[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//求串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StringLength</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s.length;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//串的连接操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">concat</span><span class="params">(<span class="built_in">string</span> *s, <span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s-&gt;strsize&lt;s1.length + s2.length)&#123;</span><br><span class="line">		s-&gt;ch = (<span class="keyword">char</span>*)<span class="built_in">realloc</span>(s-&gt;ch, (s1.length + s2.length)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">		s-&gt;strsize = s1.length + s2.length;</span><br><span class="line">	&#125;</span><br><span class="line">	s-&gt;length = s1.length + s2.length;       <span class="comment">//两串连接</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;s1.length; i++)         <span class="comment">//将s1复制到s中</span></span><br><span class="line">		s-&gt;ch[i] = s1.ch[i];</span><br><span class="line">	<span class="keyword">for</span> (; i&lt;s-&gt;length; i++)</span><br><span class="line">		s-&gt;ch[i] = s2.ch[i - s1.length]; <span class="comment">//将s2复制到s中去</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取子串操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">substr</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> i, <span class="keyword">int</span> len, <span class="built_in">string</span> *t)</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	i表示从字符串s的第i个位置开始截取（索引从1开始）</span></span><br><span class="line"><span class="comment">	len表示截取字符串的长度</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i&gt;s.length || len&lt;<span class="number">0</span> || len&gt;s.length - i + <span class="number">1</span>)    <span class="comment">//参数不合法</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (t-&gt;length&lt;len)&#123; <span class="comment">//存储空间不够，继续分配存储空间</span></span><br><span class="line">		t-&gt;ch = (<span class="keyword">char</span>*)<span class="built_in">realloc</span>(t-&gt;ch, len*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">		t-&gt;strsize = len;</span><br><span class="line">	&#125;</span><br><span class="line">	t-&gt;length = len;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;t-&gt;length; k++)</span><br><span class="line">		t-&gt;ch[k] = s.ch[i - <span class="number">1</span> + k];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertString</span><span class="params">(<span class="built_in">string</span> *s, <span class="keyword">int</span> i, <span class="built_in">string</span> t)</span></span>&#123;</span><br><span class="line">	<span class="comment">//在字符串s的第i个位置插入字符串t</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i&gt;s-&gt;length + <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (s-&gt;strsize&lt;s-&gt;length + t.length)&#123;  <span class="comment">//空间不足</span></span><br><span class="line">		s-&gt;ch = (<span class="keyword">char</span>*)<span class="built_in">realloc</span>(s-&gt;ch, (s-&gt;length + t.length)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">		s-&gt;strsize = s-&gt;length + t.length;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="keyword">for</span> (k = s-&gt;length - <span class="number">1</span>; k &gt;= i - <span class="number">1</span>; k--) <span class="comment">//将s中的后i个字符后移到后面</span></span><br><span class="line">		s-&gt;ch[k + t.length] = s-&gt;ch[k];<span class="comment">//end[][][] ==&gt; e[][][]nd</span></span><br><span class="line">	s-&gt;length = s-&gt;length + t.length;<span class="comment">//s-&gt;length=3+3</span></span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;t.length; k++)              <span class="comment">//将t的值赋值给s</span></span><br><span class="line">		s-&gt;ch[k + i - <span class="number">1</span>] = t.ch[k];<span class="comment">//e[][][]nd==&gt;eaaand</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteString</span><span class="params">(<span class="built_in">string</span> *s, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="comment">//从s的第i个字符开始删除len个字符</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i&gt;s-&gt;length || len&lt;<span class="number">0</span> || len&gt;s-&gt;length - i + <span class="number">1</span>)    <span class="comment">//参数不合法</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="keyword">for</span> (k = i + len - <span class="number">1</span>; k&lt;s-&gt;length; k++)    <span class="comment">//从s的i+len-1个位置开始将其后的所有字符前移</span></span><br><span class="line">		s-&gt;ch[k - len] = s-&gt;ch[k];</span><br><span class="line">	s-&gt;length -= len;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//输出操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;s.length; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>, s.ch[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s1 = CreateNullString();</span><br><span class="line">	<span class="built_in">string</span> s2 = CreateNullString();</span><br><span class="line">	<span class="built_in">string</span> s3 = CreateNullString();</span><br><span class="line">	<span class="keyword">char</span> ch[MAXSIZE];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入主串：\n"</span>);</span><br><span class="line">	<span class="comment">//输入friend</span></span><br><span class="line">	gets_s(ch);</span><br><span class="line">	<span class="comment">//赋值操作</span></span><br><span class="line">	StringAssign(&amp;s1, ch);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"主串 s1 为："</span>);</span><br><span class="line">	print(s1);</span><br><span class="line">	<span class="comment">//将字符s1拷贝到s2</span></span><br><span class="line">	StringCopy(&amp;s2, s1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"拷贝串操作结果如下，结果如下 s2 ："</span>);</span><br><span class="line">	print(s2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"删除操作（1——s1.length-3 全删）："</span>);</span><br><span class="line">	<span class="comment">//删除操作</span></span><br><span class="line">	deleteString(&amp;s2, <span class="number">1</span>, s1.length - <span class="number">3</span>);</span><br><span class="line">	print(s2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"插入操作,插入到s2的第2个位置上，请输入插入的字符串："</span>);</span><br><span class="line">	gets_s(ch);</span><br><span class="line">	<span class="comment">//赋值操作 把输入的字符放到s3中</span></span><br><span class="line">	StringAssign(&amp;s3, ch);</span><br><span class="line">	<span class="comment">//进行插入操作,将s3插入到s2的第二个位置上</span></span><br><span class="line">	insertString(&amp;s2, <span class="number">2</span>, s3);</span><br><span class="line">	print(s2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"取子串操作（取s1的子串【2-4】)："</span>);</span><br><span class="line">	<span class="comment">//提取friend 中[2-4]位置元素-rie</span></span><br><span class="line">	substr(s1, <span class="number">2</span>, <span class="number">3</span>, &amp;s3);</span><br><span class="line">	print(s3);</span><br><span class="line">	<span class="comment">//s1==&gt;friend s3==&gt;rie</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"串连接操作【将s1与s3合并】："</span>);</span><br><span class="line">	concat(&amp;s1, s1, s2);</span><br><span class="line">	print(s1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>块链存储方式</strong>：是一种链式存储结构表示。</p>
</blockquote>
<p>若每个结点仅存放一个字符，则结点的指针域就非常多，造成系统空间的浪费，为节省存储空间，考虑串结构的特殊性，使每个结点存放若干个字符，这种结构称为<strong>块链结构</strong>。</p>
<p><strong>串模式匹配（Next[j]值求解）</strong></p>
<p>KMP模式匹配：</p>
<p><img src="1.png" alt></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index_KMP</span><span class="params">(SString S,SString T,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="comment">//利用模式串T的next函数求T在主串S中第pos个字符位置之后的元素</span></span><br><span class="line"><span class="keyword">int</span> i =pos,j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;S[<span class="number">0</span>]&amp;&amp;j&lt;T[<span class="number">0</span>])&#123;</span><br><span class="line">	<span class="keyword">if</span>(j==<span class="number">0</span>||S[i]==T[j])&#123;</span><br><span class="line">		++i;++j;			<span class="comment">//继续比较后继元素</span></span><br><span class="line">		&#125;</span><br><span class="line">    <span class="keyword">else</span> j=next[j];</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T[<span class="number">0</span>])<span class="keyword">return</span> i-T[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到next[i]方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(SString T, <span class="keyword">int</span> next[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;</span><br><span class="line">	next[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;T[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||T[i]==T[j])&#123;</span><br><span class="line">			i++;j++;</span><br><span class="line">            <span class="keyword">if</span>(T[i]!=T[j]) next[i]=j;</span><br><span class="line">            <span class="keyword">else</span> next[i]=next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="第五章-数组和广义表"><a href="#第五章-数组和广义表" class="headerlink" title="第五章 数组和广义表"></a>第五章 数组和广义表</h1><p> <strong><em>1.数组的概念</em></strong></p>
<p>数组是由n（n&gt;1）个具有<strong>相同数据类型</strong>的数据元素a1,a2,…,an组成的<strong>有序序列</strong>，且该序列必须存储在一块<strong>地址连续</strong>的存储单元中。</p>
<p>数组中的数据元素<strong>具有相同数据类型</strong>；</p>
<p>数组是<strong>随机存取结构</strong>，给定一组下标，就可以访问与其对应的数据元素；</p>
<p>数组中的数据<strong>元素个数是固定</strong>的。</p>
<p> <strong><em>2.数组元素地址的计算</em></strong></p>
<p>二维数组 a[m][n]</p>
<p>行优先顺序存储：LOC[a~ij~]=LOC[a~00~]+(i*m+j)*sizeof(ElemType)</p>
<p><strong><em>3.稀疏矩阵的压缩存储（三元组表示法）</em></strong></p>
<p>对于稀疏矩阵，采用压缩存储方法时，只存储非0元素。必须存储非0元素的行下标值，列下标值、元素值。</p>
<p><em>一个三元组（i,j,aij）唯一确定稀疏矩阵的一个非零元素。</em></p>
<p><strong><em>4.广义表（长度、深度、求表头Head、求表尾Tail操作）</em></strong>  </p>
<p>广义表又称列表，是由n个元素组成的有穷序列：LS=(a1,a2,….,an)。其中ai或是原子项，或是一个广义表。LS是广义表的名字，n为长度。若ai是广义表，则称为LS的子表。</p>
<p><strong>习惯上原子用小写字母，子表用大写字母。若广义表LS非空时：</strong></p>
<ul>
<li><p><strong>a1（表中的第一个元素）称为表头；</strong></p>
</li>
<li><p><strong>其余元素组成的子表称为表尾；</strong></p>
</li>
</ul>
<p>广义表中所包含的元素(包括原子和子表)的个数称为<strong>表的长度</strong>。</p>
<p>广义表中括号的最大层数称为<strong>表深(度)</strong>。</p>
<p>广义表本身是一个递归表。即列表本身也可以是自己的一个子表。</p>
<p>根据对表头、表尾的定义，任何一个非空广义表的<strong>表头</strong>可以是原子，也可以是子表，<strong>而表尾必定是广义表。</strong></p>
<p><strong><em>e.g.</em></strong></p>
<p>A=()——A是空表，长度为0</p>
<p>B=((),(e),(a,b,c))——B长度为3，深度为3</p>
<p>GetHead(B)=()            GetTail(B)=((e),(a,b,c))</p>
<p>注意()和(())不同，前者为空表，长度为0，后者长度为1，表头和表尾均为()</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构复习（一）</title>
    <url>/2019/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><a id="more"></a>
<h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><p>数据结构是相互之间存在一种或多种特定特定关系的数据元素的集合。</p>
<p><strong>重要术语：</strong></p>
<p>1、数据：对客观事物的符号表示，指所有能输入到计算机中并被计算机程序处理的符号的总称。</p>
<p>2、数据项：数据项是数据的不可分割的最小单位。</p>
<p>3、数据元素：数据的基本单位，在计算机中作为一个整体进行考虑和处理，一个数据元素由多个数据项组成。</p>
<p>4、数据对象：性质相同的数据元素的集合，是数据的一个子集。</p>
<p><img src="1.jpg" alt="数据结构术语"></p>
<p><strong>数据结构的四种结构：</strong></p>
<p><img src="2.jpg" alt></p>
<p><strong>算法效率度量：</strong></p>
<ol>
<li><p>事后统计的方法：对运行结果进行统计分析，得出执行效率。</p>
</li>
<li><p>事前分析估算：估算算法的时间复杂度——算法的时间复杂度是一个函数，它定性描述了该算法的运行时间。这是一个关于代表算法输入值的字符串的长度的函数。</p>
</li>
</ol>
<p>时间复杂度常用大O符号表述，如O(1),O(n),O(n)等，不包括这个函数的低阶项和首项系数。</p>
<p>一般我们最常用的办法是讨论算法在最坏情况下的时间复杂度。</p>
<p>常见的</p>
<p>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)</p>
<p><strong>对数据进行操作：初始化、判断是否是空、存取、统计个数、遍历、插入、删除、查找、排序 ————用算法进行描述。</strong></p>
<h2 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h2><h3 id="一、线性表的定义及特性"><a href="#一、线性表的定义及特性" class="headerlink" title="一、线性表的定义及特性"></a>一、线性表的定义及特性</h3><p> 定义：<strong>线性表是具有相同类型的 n（≥0）个数据元素的有限序列</strong></p>
<p>线性表的顺序存储（顺序表）和链式存储（链表）</p>
<p><strong>1.顺序表（SeqList)</strong>使用一维数组一次存放书元素。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">/-------------线性表的动态分配顺序存储结构---------</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 100		<span class="comment">//线性表存储空间的初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMENT 10	<span class="comment">//线性表的存储空间的分配增量</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//额外添加类型名定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用动态分配的顺序存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	ElemType *elem;					<span class="comment">//存储空间基址</span></span><br><span class="line">	<span class="keyword">int</span> length;							<span class="comment">//当前长度</span></span><br><span class="line">	<span class="keyword">int</span> listsize;							<span class="comment">//当前分配的存储容量</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure>
<p>一维数组占用一块内存空间，每个存储单元的地址是连续的，通过下标识别元素，它的下标就代表了他的存储单元序号，也就表示了它的位置。</p>
<p> 查找顺序表中的元素是方便的，根据下标就可以取出要取的元素。</p>
<p> 当顺序表的容量不够时，顺序表不能就地扩容，要申请另一个更大容量的数组进行数组元素复制。Java源代码中的ArrayList类扩容实现过程是：先申请增加的容量是原本容量的二分之一，生成一个原本容量的二分之三的内存地址，再将所有元素进行复制过去。</p>
<p>2.线性表的链式存储结构(<strong>链表LinkedList)</strong>是用若干地址分散的存储单元存储数据元素，逻辑上相邻的数据元素在物理位置上不一定相邻。</p>
<p>存储一个数据元素的存储单元成为结点Node，单链表的表示方式：结点（数据域，地址域）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">PNode</span>;</span></span><br></pre></td></tr></table></figure>
<h3 id="二、线性表顺序讯相互及基本操作（插入、删除）"><a href="#二、线性表顺序讯相互及基本操作（插入、删除）" class="headerlink" title="二、线性表顺序讯相互及基本操作（插入、删除）"></a>二、线性表顺序讯相互及基本操作（插入、删除）</h3><p> 对于插入、删除元素：先根据下标找到相应位置，若插入元素，将新插入插入位置后，将被加入位置的旧元素及之后的元素向后移动，移动次序是由后向前。若删除元素，将要删除的元素删除，其后的元素向前移动。插入和删除的操作时间主要用于移动元素。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">/插入操作,插入一个元素到线性表的第i个位置</span><br><span class="line"><span class="comment">//1.判断线性表是否已满</span></span><br><span class="line"><span class="comment">//2.判断i的位置是否合理</span></span><br><span class="line"><span class="comment">//3.从最后一个元素到当前元素后移</span></span><br><span class="line"><span class="comment">//4.当前元素插入</span></span><br><span class="line"><span class="function">Status <span class="title">InsertList_Sq</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>)<span class="keyword">return</span> ERROR;</span><br><span class="line">	ElemType *newBase;</span><br><span class="line">	<span class="keyword">if</span> (L.length &gt;= L.listsize) &#123;</span><br><span class="line">		newBase = (ElemType *)<span class="built_in">realloc</span>(L.elem, (L.listsize + LISTINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!newBase)<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"></span><br><span class="line">	L.elem = newBase;</span><br><span class="line">	L.listsize += LISTINCREMENT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前一部分的作用是怕预先分配的内存不够用或者输入值异常所做的处理</span></span><br><span class="line"></span><br><span class="line">ElemType* q = &amp;(L.elem[i - <span class="number">1</span>]);</span><br><span class="line"><span class="comment">//先将要插入部分之后的元素后移一位</span></span><br><span class="line"><span class="keyword">for</span> (ElemType *p = &amp;(L.elem[L.length - <span class="number">1</span>]); p &gt;= q; p--)</span><br><span class="line">	*(p + <span class="number">1</span>) = *p;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//插入e，并表长加1</span></span><br><span class="line">*q = e;</span><br><span class="line">++L.length;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeleteList_Sq</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length)<span class="keyword">return</span> ERROR;</span><br><span class="line">	ElemType* q = &amp;(L.elem[i - <span class="number">1</span>]);</span><br><span class="line">	e = *q;</span><br><span class="line">	<span class="keyword">for</span> (ElemType *p = &amp;(L.elem[L.length - <span class="number">1</span>]); p &gt;= q; p--)</span><br><span class="line">		*(p - <span class="number">1</span>) = *p;</span><br><span class="line">	L.length--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三、单链表的操作（插入、删除、查找、归并等）"><a href="#三、单链表的操作（插入、删除、查找、归并等）" class="headerlink" title="三、单链表的操作（插入、删除、查找、归并等）"></a>三、单链表的操作（插入、删除、查找、归并等）</h3><p> 对于单链表的操作：遍历操作是从第0个结点开始，沿着结点的Next链，依次访问单链表中的每个结点，并且每个节点只访问一次。插入（删除）操作：根据要插入（删除）的结点数，从第0个结点遍历找到要插入（删除）的位置，将要插入的数据元素插入（将要删除的元素删除），改变原来结点间的链接关系，不用移动数据元素。而<strong>操作所花的时间都在查找上面。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(PNode* pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*pHead = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span> (!(*pHead))<span class="comment">//分配空间失败</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(*pHead)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表，从头插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListHead</span><span class="params">(PNode pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PNode p = pHead;</span><br><span class="line">	<span class="keyword">int</span> num, data;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"清输入要创建的节点个数\n"</span>);</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//先新造一个节点</span></span><br><span class="line">		scanf_s(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line">		PNode q = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">		(*q).data = data;</span><br><span class="line">		<span class="comment">//将新节点放在头结点后</span></span><br><span class="line">		q-&gt;next = p-&gt;next;</span><br><span class="line">		p-&gt;next = q;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表，从尾插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListTail</span><span class="params">(PNode pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PNode p = pHead;</span><br><span class="line">	<span class="keyword">int</span> num, data;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"清输入要创建的节点个数\n"</span>);</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf_s(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line">		PNode q = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">		(*q).data = data;</span><br><span class="line">		p-&gt;next = q;</span><br><span class="line">		p = q;</span><br><span class="line">	&#125;</span><br><span class="line">	(*p).next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第i个位置插入一个链表节点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(PNode pHead, <span class="keyword">int</span> i, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	PNode p = pHead;</span><br><span class="line">	PNode q = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!p || j &gt; i - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	(*q).data = val;</span><br><span class="line">	q-&gt;next = p-&gt;next;</span><br><span class="line">	p-&gt;next = q;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除第i个位置的节点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(PNode pHead, <span class="keyword">int</span> i, <span class="keyword">int</span>* val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	PNode p = pHead;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>)<span class="comment">//注意while(p-&gt;pNext!=NULL&amp;&amp;i&lt;pos-1)与while(p!=NULL&amp;&amp;i&lt;pos-1)的差别，比如链表长度为6，当数大于等于8时有区别</span></span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p-&gt;next || j &gt; i - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">PNode q = p-&gt;next;</span><br><span class="line">*val = q-&gt;data;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找算法</span></span><br><span class="line"><span class="comment">//类型一：获取链表第i个元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListGetElement</span><span class="params">(PNode pHead, <span class="keyword">int</span> i, <span class="keyword">int</span>&amp; val)</span><span class="comment">//val存储返回值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	PNode p = pHead;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!p-&gt;next || j &gt; i - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	val = p-&gt;next-&gt;data;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型二：获取链表元素值val的位置</span></span><br><span class="line"><span class="comment">/* 初始条件：顺序线性表L已存在 */</span></span><br><span class="line"><span class="comment">/* 操作结果：返回L中第1个与e满足关系的数据元素的位序。 */</span></span><br><span class="line"><span class="comment">/* 若这样的数据元素不存在，则返回值为0 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLocateElement</span><span class="params">(PNode pHead, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PNode p = pHead-&gt;next;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		i++;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;data == val)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//归并</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeList_L</span><span class="params">(pNode &amp;La,pNode &amp;Lb,pNode &amp;Lc)</span></span>&#123;</span><br><span class="line">    <span class="comment">//已知单链线性表La和Lb的元素也按值非递减排列</span></span><br><span class="line">    <span class="comment">//归并La和Lb得到新的单链表Lc,Lc的元素也按非递减排列</span></span><br><span class="line">    pNode pa=La-&gt;next;</span><br><span class="line">    pNode pb=Lb-&gt;next;</span><br><span class="line">    </span><br><span class="line">    Lc=La;</span><br><span class="line">    pNode pc=Lc;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(pa&amp;&amp;pb)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pa-&gt;data&lt;=pb-&gt;data)&#123;</span><br><span class="line">            pc-&gt;next=pa;</span><br><span class="line">            pc=pa;</span><br><span class="line">            pa=pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">           pc-&gt;next=pb;</span><br><span class="line">           pc=pb;</span><br><span class="line">           pb=pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//插入剩余片段,如果pa尾结点不为空，因为之前的循环结束条件是pa和pb中有一个为空，即一个表归并完</span></span><br><span class="line">    (pc-&gt;next=pa)!= <span class="literal">NULL</span> ? pa : pb;</span><br><span class="line">    <span class="built_in">free</span>(Lb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四、双向链表"><a href="#四、双向链表" class="headerlink" title="四、双向链表"></a>四、双向链表</h3><p>单链表结点中只有一个指向其后继的指针，这使得单链表只能从头到尾依次顺序的向后遍历，若要访问某个结点的前驱，只能从头开始遍历，访问后继结点的时间复杂度为O(1)，访问前驱结点的时间复杂度为O(n)；为克服以上缺点，引入双链表，一个结点含有两个指针，分别指向其前驱结点和后继结点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//------线性表的双向链表存储结构----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>&#123;</span></span><br><span class="line"></span><br><span class="line">ElemType data;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> *<span class="title">prior</span>;</span>	<span class="comment">//前驱指针</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> *<span class="title">next</span>;</span>	<span class="comment">//后继指针</span></span><br><span class="line"></span><br><span class="line">&#125;DuLNode,*DuLinkList;</span><br></pre></td></tr></table></figure>
<p><strong>和单向链表相比有以下优势：</strong></p>
<ol>
<li><p>插入删除不需要移动元素外，可以原地插入删除</p>
</li>
<li><p>可以双向遍历</p>
</li>
</ol>
<p>初始化+尾插法图示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//head始终指向头结点，p指向尾节点，方便后续算法使用</span></span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt></p>
<p>删除单个图示：</p>
<p><img src="2.png" alt></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>R</title>
    <url>/2019/06/04/R/</url>
    <content><![CDATA[<h1 id="R语言"><a href="#R语言" class="headerlink" title="R语言"></a>R语言</h1><a id="more"></a>
<h2 id="一、R的数据结构"><a href="#一、R的数据结构" class="headerlink" title="一、R的数据结构"></a>一、R的数据结构</h2><h3 id="1、对象和属性"><a href="#1、对象和属性" class="headerlink" title="1、对象和属性"></a>1、对象和属性</h3><p>赋值：&lt;-</p>
<p> 查看数值类型class(x)</p>
<p><strong>属性(attribute)</strong></p>
<ul>
<li>名称(name)</li>
<li>维度(dimensions: matrix, array)</li>
<li>类型(class)</li>
<li>长度(length)</li>
</ul>
<p><strong>向量(vector)</strong></p>
<ul>
<li><p>只能包含同一类型的对象</p>
</li>
<li><p>创建对象</p>
<ul>
<li><p>vector(“type”,length= )</p>
</li>
<li><p>c()</p>
</li>
<li><p>x &lt;- 1:4</p>
</li>
<li><p>强制类型转换</p>
<p>as.logical()/as.numeric()/as.character()</p>
</li>
</ul>
</li>
</ul>
<p><strong>矩阵(matrix)</strong></p>
<ul>
<li><p>向量+维度属性(整数向量：nrow，ncol)</p>
</li>
<li><p>创建矩阵</p>
<ul>
<li><p>matrix(): 先列后行</p>
</li>
<li><p>vector()+dim()</p>
</li>
<li><p>按行/列拼接矩阵</p>
<p>rbind()/cbind()</p>
</li>
<li><p>查看向量属性    attributes()</p>
</li>
</ul>
</li>
</ul>
<p><strong>列表(list)</strong></p>
<ul>
<li><p>可以包含<strong>不同类型</strong>的对象</p>
</li>
<li><p>创建列表</p>
<p>list()</p>
</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list</span></span><br><span class="line">  l &lt;- list(<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">10L</span>,<span class="number">3</span>+<span class="number">4i</span>,<span class="literal">TRUE</span>)</span><br><span class="line">  l2&lt;-list(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">  l3&lt;- list(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),c(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>))</span><br><span class="line">  x &lt;- matrix(<span class="number">1</span>:<span class="number">6</span>,nrow = <span class="number">2</span>,ncol=<span class="number">3</span>)</span><br><span class="line">  dimnames(x)&lt;-list(c(<span class="string">"a"</span>,<span class="string">"b"</span>),c(<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>))</span><br></pre></td></tr></table></figure>
<p><strong>因子(factor)</strong></p>
<ul>
<li><p><span color="red">分类</span>数据/有序 vs. 无序</p>
</li>
<li><p>整数向量+标签(label)(优于整数向量)</p>
<p>Male/Female vs. 1/2</p>
</li>
<li><p>创建因子</p>
<p>factor()</p>
<p>整体查看因子 table()</p>
<p>去除因子属性 unclass()</p>
</li>
</ul>
<p><strong>缺失值(missing value)</strong></p>
<ul>
<li>NA/NaN:  NaN属于NA，NA不属于NaN</li>
<li>NA有类型属性：integer NA，character NA等。而NaN只有integer</li>
<li>查看元素是否为缺失值 is.na()/is.nan()</li>
</ul>
<p><strong>数据框(data frame)</strong></p>
<ul>
<li>存储表格数据</li>
<li><p>视为各元素长度相同的列表</p>
<ul>
<li>每个元素代表一列数据</li>
<li>每个元素的长度代表行数</li>
<li>元素的类型可以不同</li>
</ul>
</li>
<li><p>创建数据框</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">df &lt;-  data.frame(id=c(<span class="number">1</span>,<span class="number">2</span>),name=c(<span class="string">"a"</span>,<span class="string">"b"</span>),gender=c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>日期和时间</strong></p>
<ul>
<li><p>日期：Date</p>
<ul>
<li><p>当前时间：date()/Sys.Date()</p>
</li>
<li><p>weekdays()/months()/quarters()  季度</p>
</li>
<li><p>设置时间</p>
<p>x &lt;- as.Date(“2019-01-01”)</p>
</li>
</ul>
</li>
<li><p>时间：POSIXct/POSIXlt</p>
<ul>
<li>距离1970-01-01的秒数/Sys.time()</li>
<li>POSIXct:整数，常用于存入数据框</li>
<li>POSIXlt:列表，还包含星期、年、月、日等信息</li>
<li>获取某个数组里面的内容用$</li>
</ul>
</li>
</ul>
<h2 id="二、构建子集"><a href="#二、构建子集" class="headerlink" title="二、构建子集"></a>二、构建子集</h2><p>原始数据 -&gt; 预处理后的数据</p>
<p><strong>基本方法</strong></p>
<ul>
<li>[]:提供一个或多个类型相同的元素<ul>
<li>元素下标从1开始</li>
<li>枚举输出x[1:4]</li>
<li>逻辑判断x[x<1 & x>5]</1></li>
<li>按元素名字提取a[“name”]</li>
</ul>
</li>
<li><p>[[]]:从列表或数据框中提取元素</p>
</li>
<li><p>$:按名字从列表或数据框中提取元素</p>
</li>
</ul>
<p><strong>矩阵的子集</strong></p>
<ul>
<li>以向量形式1行2列的元素 x[1,2]</li>
<li>输出一整行 x[1, ]</li>
<li>输出x(2,3)和x(2,1) x[2,c(1,3)]</li>
<li>以矩阵形式返回 x[1,2,drop=”FALSE”]</li>
</ul>
<p><strong>数据框的子集</strong></p>
<ul>
<li>which(x$v1&gt;2)返回满足条件的数值</li>
<li>构建子集 subset(dateType,条件)</li>
</ul>
<p><strong>列表的子集</strong></p>
<ul>
<li>x[1]/x[“id”] 列表的元素</li>
<li>x[[1]]/x[[“id”]]/x$id 列表的内容</li>
<li>嵌套列表 <code>x[[1][2]]</code>/x[c(1,2)]</li>
<li>不完全匹配 x[[“a”,exact=FALSE]]/x$a</li>
</ul>
<p><strong>处理缺省值</strong></p>
<ul>
<li>返回x,y对应位置是否有缺省值，有返回FALSE complete.cases(x,y)</li>
</ul>
<p><strong>向量化操作</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- <span class="number">1</span>:<span class="number">5</span></span><br><span class="line">y &lt;- <span class="number">6</span>:<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#每个向量对应位置的值做运算</span></span><br><span class="line">x+y</span><br><span class="line">x*y</span><br><span class="line"></span><br><span class="line">x1&lt;-matrix(<span class="number">1</span>:<span class="number">4</span>,nrow=<span class="number">2</span>,ncol=<span class="number">2</span>)</span><br><span class="line">y1&lt;-matrix(rep(<span class="number">2</span>,<span class="number">4</span>),nrow = <span class="number">2</span>,ncol = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">x1+y1</span><br><span class="line">x1/y1</span><br><span class="line">x1 %*% y1</span><br></pre></td></tr></table></figure>
<h2 id="三、重要函数的使用"><a href="#三、重要函数的使用" class="headerlink" title="三、重要函数的使用"></a>三、重要函数的使用</h2><h4 id="1、-lapply"><a href="#1、-lapply" class="headerlink" title="1、  lapply()"></a>1、  lapply()</h4><p>lapply(列表/其他的也会自动转换为列表，循环要处理的函数名，上一个函数所需的参数)</p>
<p>总是返回一个列表</p>
<p>sapply表示在能精简的情况下，尽可能精简处理结果</p>
<ol>
<li>结果列表元素长度均为1，返回向量</li>
<li>结果列表元素长度相同且大于1，返回矩阵</li>
</ol>
<ul>
<li>mean求平均值</li>
</ul>
<h3 id="2、apply"><a href="#2、apply" class="headerlink" title="2、apply"></a>2、apply</h3><ul>
<li>沿着数组的某一维度处理数据</li>
<li>apply(数组，维度，函数名)</li>
</ul>
<h3 id="3、tapply"><a href="#3、tapply" class="headerlink" title="3、tapply"></a>3、tapply</h3><ul>
<li>对向量的子集进行操作</li>
<li>tapply (向量，因子/因子列表，函数/函数名)</li>
</ul>
<h3 id="4、split"><a href="#4、split" class="headerlink" title="4、split"></a>4、split</h3><ul>
<li>根据因子或者因子列表将向量或其他对象分组</li>
<li>通常与lapply一起使用</li>
<li>split(向量/列表/数据框，因子/因子列表)</li>
</ul>
<h2 id="四、R的绘图系统"><a href="#四、R的绘图系统" class="headerlink" title="四、R的绘图系统"></a>四、R的绘图系统</h2><h4 id="1-基本绘图系统"><a href="#1-基本绘图系统" class="headerlink" title="1)基本绘图系统"></a>1)基本绘图系统</h4><p>绘图函数（graphics包）</p>
<ul>
<li><span color="red">plot</span>/hist/boxplot/pionts/lines/text/title/axis</li>
<li>调用函数会启用一个图形设备（如果没有正在运行的图形设备）并在设备上绘图<ul>
<li>基本绘图系统+屏幕设备</li>
</ul>
</li>
</ul>
<p><strong>plot()</strong></p>
<ul>
<li><p>重要参数：</p>
<p>xlab/ylab 表示x，y坐标轴标签</p>
<p>lwd 线宽</p>
<p>lty 线的类型</p>
<p>pch 点的类型</p>
<p>col 图形的颜色</p>
</li>
</ul>
<p><strong>par ()</strong></p>
<ul>
<li><p>用于设置全局参数(作用于R中的所有plot绘图)</p>
<p>bg 背景色</p>
<p>mar 边界边距</p>
<p>mfrow 当前画板划分为几行</p>
<p>mfcol 划分为几列</p>
</li>
</ul>
<h4 id="2）Lattice绘图系统"><a href="#2）Lattice绘图系统" class="headerlink" title="2）Lattice绘图系统"></a>2）Lattice绘图系统</h4><h5 id="1-绘图函数"><a href="#1-绘图函数" class="headerlink" title="1.绘图函数"></a>1.绘图函数</h5><p>​    <strong>lattice包</strong></p>
<pre><code>+ xyplot  散点图函数
+ histogram 柱状图函数
+ dotplot 点图
+ contourplot
</code></pre><p>格式：xyplot(y~x|f*g,data)</p>
<ul>
<li>panel函数，用于控制每个面板内的绘图</li>
</ul>
<p>grid包</p>
<ul>
<li>实现了独立于base的绘图系统</li>
<li>lattice包是基于grid创建的</li>
</ul>
<h4 id="3）Lattice与Base的重要区别"><a href="#3）Lattice与Base的重要区别" class="headerlink" title="3）Lattice与Base的重要区别"></a>3）Lattice与Base的重要区别</h4><p>​    Base绘图函数直接在图形设备上绘图</p>
<p>​    Lattice绘图函数返回trellis类对象</p>
<p>​        打印函数真正执行了在设备上绘图</p>
<h4 id="4）ggplot2绘图系统"><a href="#4）ggplot2绘图系统" class="headerlink" title="4）ggplot2绘图系统"></a>4）ggplot2绘图系统</h4><p><img src="1.jpg" alt></p>
<p>绘图函数</p>
<p>​    qplot()</p>
<ul>
<li><p>类似与Base系统的plot()，参数包含aesthetics/geom/facet…</p>
<p>ggplot()</p>
</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"></span><br><span class="line">qplot(Wind,Temp,data=airquality,color=Month,shape=Month,size=Month</span><br><span class="line">      ,xlab=<span class="string">"Wind(mph)"</span>,ylab=<span class="string">"Temperature"</span>,main=<span class="string">"Wind vs. Temp"</span>)</span><br><span class="line"></span><br><span class="line">qplot(Wind,Temp,data=airquality,color=Month,geom=c(<span class="string">"point"</span>,<span class="string">"smooth"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置面板属性 ~. Month 表示按月份划分行，1列</span></span><br><span class="line">qplot(Wind,Temp,data=airquality,facets = Month ~.)</span><br><span class="line"></span><br><span class="line">qplot(Wind,data = airquality,facets = .~ Month)</span><br><span class="line"></span><br><span class="line"><span class="comment">#累加柱状图</span></span><br><span class="line">qplot(Wind,data = airquality,fill=Month)</span><br><span class="line"></span><br><span class="line"><span class="comment">#密度函数</span></span><br><span class="line">qplot(Wind,data = airquality,geom=<span class="string">"density"</span>,color=Month)</span><br><span class="line">qplot(Wind,data = airquality,geom=<span class="string">"dotplot"</span>,color=Month)</span><br></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>图形参数：</strong><br> 符号和线条：pch、cex、lty、lwd<br> 颜色：col、col.axis、col.lab、col.main、col.sub、fg、bg<br> 文本属性：cex、cex.axis、cex.lab、cex.main、cex.sub、font、font.axis、font.lab、font.main、font.sub</p>
</li>
<li><p><strong>文本添加、坐标轴的自定义和图例</strong><br> title()、main、sub、xlab、ylab、text()<br> axis()、abline()<br> legend()</p>
</li>
<li><p><strong>多图绘制时候，可使用par()设置默认的图形参数</strong><br> par(lwd=2, cex=1.5)</p>
</li>
<li><p><strong>图形参数设置</strong>：<br> par(optionname=value,…)<br> par(pin=c(width,height)) 图形尺寸<br> par(mfrow=c(nr,nc)) 图形组合，一页多图<br> layout(mat) 图形组合，一页多图<br> par(mar=c(bottom,left,top,right)) 边界尺寸<br> par(fig=c(x1,x2,y1,y2),new=TURE) 多图叠加或排布成一幅图</p>
</li>
</ul>
<h4 id="R语言绘图颜色"><a href="#R语言绘图颜色" class="headerlink" title="R语言绘图颜色"></a>R语言绘图颜色</h4><p>RColorBrewer包</p>
<ul>
<li>三类调色板：sequential（渐变）/diverging（极端） /qualitative（分类变量）</li>
</ul>
<p>参考学习博文链接：</p>
<p><a href="https://blog.csdn.net/u013538542/article/details/80033055" target="_blank" rel="noopener">R语言入门</a></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>MultiThread</title>
    <url>/2019/06/03/multiThread/</url>
    <content><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><a id="more"></a>
<h2 id="线程的状态："><a href="#线程的状态：" class="headerlink" title="线程的状态："></a>线程的状态：</h2><h2 id="一个线程的生命周期："><a href="#一个线程的生命周期：" class="headerlink" title="一个线程的生命周期："></a>一个线程的生命周期：</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg" alt></p>
<h2 id="多线程相关思维导图："><a href="#多线程相关思维导图：" class="headerlink" title="多线程相关思维导图："></a>多线程相关思维导图：</h2><p><img src="多线程.png" alt></p>
<h2 id="Thread-方法："><a href="#Thread-方法：" class="headerlink" title="Thread 方法："></a>Thread 方法：</h2><p>下表列出了Thread类的一些重要方法：</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>序号</strong></th>
<th style="text-align:center"><strong>方法描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:center"><strong>public void start()</strong> 使该线程开始执行；<strong>Java</strong> 虚拟机调用该线程的 run 方法。</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:center"><strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:center"><strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:center"><strong>public final void setPriority(int priority)</strong>  更改线程的优先级。</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:center"><strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:center"><strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:center"><strong>public void interrupt()</strong> 中断线程。</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:center"><strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>multiThread</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2019/05/30/JDBC/</url>
    <content><![CDATA[<p><strong>JDBC</strong> (<strong>J</strong>ava <strong>D</strong>ata<strong>B</strong>ase <strong>C</strong>onnection) 是通过JAVA访问数据库 </p>
<a id="more"></a>
<h1 id="一、MySQL基本"><a href="#一、MySQL基本" class="headerlink" title="一、MySQL基本"></a>一、MySQL基本</h1><p><img src="1.jpg" alt="MySql表格"></p>
<ul>
<li><p><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</p>
</li>
<li><p><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</p>
</li>
<li><p><strong>外键：</strong>外键用于关联两个表。</p>
</li>
<li><p><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</p>
</li>
<li><p><strong>索引：</strong>使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</p>
<p><strong>使用mysql-front管理数据库</strong></p>
<p><a href="http://www.mysqlfront.de/pub/MySQL-Front_Setup.exe" target="_blank" rel="noopener">mysql front下载地址</a></p>
<hr>
<h2 id="MySQL操作"><a href="#MySQL操作" class="headerlink" title="MySQL操作"></a>MySQL操作</h2></li>
</ul>
<h3 id="1、创建与删除数据库"><a href="#1、创建与删除数据库" class="headerlink" title="1、创建与删除数据库"></a>1、创建与删除数据库</h3><blockquote>
<p>create/drop database dbName</p>
</blockquote>
<h3 id="2、创建表"><a href="#2、创建表" class="headerlink" title="2、创建表"></a>2、创建表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE hero (</span><br><span class="line">  id int(11) AUTO_INCREMENT,</span><br><span class="line">  name varchar(30) ,</span><br><span class="line">  hp float ,</span><br><span class="line">  damage int(11) ,</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">)  DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>
<h3 id="3、插入数据"><a href="#3、插入数据" class="headerlink" title="3、插入数据"></a>3、插入数据</h3><p><code>insert into hero values (null, &#39;盖伦&#39;, 616, 100)</code></p>
<h3 id="4、查询数据"><a href="#4、查询数据" class="headerlink" title="4、查询数据"></a>4、查询数据</h3><ul>
<li><p>查询所有数据</p>
<blockquote>
<p>select * from hero</p>
</blockquote>
</li>
<li><p>统计表中总共有多少数据</p>
<blockquote>
<p>select count(*) from hero</p>
</blockquote>
</li>
<li><p>分页查询</p>
<blockquote>
<p>select * from hero limit 0,5</p>
</blockquote>
</li>
</ul>
<h3 id="5、修改数据"><a href="#5、修改数据" class="headerlink" title="5、修改数据"></a>5、修改数据</h3><p>修改主键为1的数据</p>
<blockquote>
<p>update hero set hp = 818 where id = 1</p>
</blockquote>
<p>同理删除</p>
<blockquote>
<p>delete  hero set hp = 818 where id = 1</p>
</blockquote>
<p><strong>WHERE 子句类似于程序语言中的if条件，根据 MySQL 表中的字段值来读取指定的数据。</strong></p>
<p>如果我们想再MySQL数据表中读取指定的数据，WHERE 子句是非常有用的。</p>
<p>使用主键来作为 WHERE 子句的条件查询是非常快速的。</p>
<p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p>
<h1 id="二、JDBC"><a href="#二、JDBC" class="headerlink" title="二、JDBC"></a>二、JDBC</h1><h3 id="1、导入mysql-jdbc的jar包（一般会放在新建的lib文件夹中）"><a href="#1、导入mysql-jdbc的jar包（一般会放在新建的lib文件夹中）" class="headerlink" title="1、导入mysql-jdbc的jar包（一般会放在新建的lib文件夹中）"></a>1、导入mysql-jdbc的jar包（一般会放在新建的lib文件夹中）</h3><p> JDBC是一个规范，遵循JDBC接口规范，各个数据库厂家各自实现自己的驱动程序(Driver)，如下图所示: <img src="https://user-gold-cdn.xitu.io/2018/5/7/1633a16dd981efda?imageslim" alt></p>
<h3 id="2、初始化驱动"><a href="#2、初始化驱动" class="headerlink" title="2、初始化驱动"></a>2、初始化驱动</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//驱动类com.mysql.jdbc.Driver</span></span><br><span class="line">         <span class="comment">//就在 mysql-connector-java-5.0.8-bin.jar中</span></span><br><span class="line">         <span class="comment">//如果忘记了第一个步骤的导包，就会抛出ClassNotFoundException</span></span><br><span class="line">         Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">System.out.println(<span class="string">"数据库驱动加载成功 ！"</span>);</span><br><span class="line"></span><br><span class="line"> 	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  	  </span><br><span class="line">      e.printStackTrace();</span><br><span class="line"> 	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、建立与数据库连接"><a href="#3、建立与数据库连接" class="headerlink" title="3、建立与数据库连接"></a>3、建立与数据库连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1（本机ip地址，数据库ip）:3306（mysql专用端口号）/数据库名?characterEncoding=UTF-8"</span>（字符集）,<span class="string">"root"</span>（账号名）, <span class="string">"admin"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="4、创建Satement-PreSatement"><a href="#4、创建Satement-PreSatement" class="headerlink" title="4、创建Satement/PreSatement"></a>4、创建Satement/PreSatement</h3><blockquote>
<p>Statement s = c.createStatement();</p>
</blockquote>
<p>引入包为<strong>java.sql.Satement</strong></p>
<h4 id="PreSatement"><a href="#PreSatement" class="headerlink" title="PreSatement"></a>PreSatement</h4><blockquote>
<p> String sql = “insert into hero values(null,?,?,?)”;</p>
</blockquote>
<p><strong>// 根据sql语句创建PreparedStatement</strong></p>
<blockquote>
<p>PreparedStatement ps = c.prepareStatement(sql); </p>
</blockquote>
<p><strong>// 设置参数</strong></p>
<blockquote>
<p>​            ps.setString(1, “提莫”);<br>​            ps.setFloat(2, 313.0f);<br>​            ps.setInt(3, 50);</p>
</blockquote>
<p> <strong>// 执行</strong></p>
<blockquote>
<p>  ps.execute();</p>
</blockquote>
<h5 id="excuteUpdate与excute区别"><a href="#excuteUpdate与excute区别" class="headerlink" title="excuteUpdate与excute区别"></a>excuteUpdate与excute区别</h5><h6 id="不同1："><a href="#不同1：" class="headerlink" title="不同1："></a>不同1：</h6><p>execute<strong>可以执行查询语句</strong><br>然后通过getResultSet，把结果集取出来<br>executeUpdate<strong>不能执行查询语句</strong></p>
<h6 id="不同2"><a href="#不同2" class="headerlink" title="不同2:"></a>不同2:</h6><p>execute<strong>返回boolean类型</strong>，true表示执行的是查询语句，false表示执行的是insert,delete,update等等<br>executeUpdate<strong>返回的是int</strong>，表示有多少条数据受到了影响</p>
<h4 id="PreparedStatement优点"><a href="#PreparedStatement优点" class="headerlink" title="PreparedStatement优点"></a><strong>PreparedStatement优点</strong></h4><ol>
<li><p>PreparedStatement有预编译机制，性能比Statement更快</p>
</li>
<li><p>防止SQL注入式入侵</p>
<p>e.g.</p>
<blockquote>
<p>select * from hero where name = ‘盖伦’ OR 1=1</p>
</blockquote>
<p>因为有OR 1=1，这是恒成立的,<strong>就会把这个表里的数据全部查出来</strong>,<strong>响应变得极其缓慢</strong></p>
</li>
<li><p>使用参数设置，可读性好，不易犯错</p>
</li>
</ol>
<h3 id="5、执行SQL语句"><a href="#5、执行SQL语句" class="headerlink" title="5、执行SQL语句"></a>5、执行SQL语句</h3><p>CRUD是最常见的数据库操作，即增删改查<br><strong>C</strong> 增加(Create)<br><strong>R</strong> 读取查询(Retrieve)<br><strong>U</strong> 更新(Update)<br><strong>D</strong> 删除(Delete) </p>
<h4 id="1-插入"><a href="#1-插入" class="headerlink" title="1)插入"></a>1)插入</h4><blockquote>
<p>String timo=”提莫”</p>
<p>String sql =String.format( “insert into hero values(null,’%s’,313.0,50)”,timo);</p>
<p>s.execute(sql);        //执行sql语句</p>
</blockquote>
<h4 id="2）读取查询"><a href="#2）读取查询" class="headerlink" title="2）读取查询"></a>2）读取查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet rs = s.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);<span class="comment">// 可以使用字段名</span></span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);<span class="comment">// 也可以使用字段的顺序</span></span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                System.out.printf(<span class="string">"%d\t%s\t%f\t%d%n"</span>, id, name, hp, damage);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<h4 id="3）更新"><a href="#3）更新" class="headerlink" title="3）更新"></a>3）更新</h4><blockquote>
<p>String sql = “update hero set name = ‘Tom’ where id =’2’ ‘’;</p>
</blockquote>
<h4 id="4-删除"><a href="#4-删除" class="headerlink" title="4)删除"></a>4)删除</h4><blockquote>
<p>String sql = “delete from hero where id = 5”;</p>
</blockquote>
<h3 id="6、关闭连接"><a href="#6、关闭连接" class="headerlink" title="6、关闭连接"></a>6、关闭连接</h3><p>先关闭Satement，后关闭Connection</p>
<p>不过一般都是将其放在try（）中，因为它们都实现了<strong>AutoCloseable接口</strong></p>
<h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><p>DAO=<strong>D</strong>ata<strong>A</strong>ccess <strong>O</strong>bject</p>
<p>数据访问对象，将数据库相关的操作都封装在类中</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-DAO接口"><a href="#1-DAO接口" class="headerlink" title="1.DAO接口"></a>1.DAO接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DAO</span></span>&#123;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Hero hero)</span></span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Hero hero)</span></span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-设计Hero类实现DAO接口"><a href="#2-设计Hero类实现DAO接口" class="headerlink" title="2.设计Hero类实现DAO接口"></a>2.设计Hero类实现DAO接口</h5><p>将不同的操作都封装在不同的函数中</p>
<h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p><strong>原理：</strong></p>
<p>连接池在使用之前，就会创建好一定数量的连接。如果有线程需要连接，可以从连接池中借用，使用完毕后，线程就会把这个连接还给连接池。</p>
<p>倘若发生多线程并发情况，连接池里的连接被<strong>借用光</strong>了，那么其他线程就会临时等待，直到有连接被<strong>归还</strong>回来，再继续使用。<br>整个过程，这些连接都<strong>不会被关闭</strong>，而是不断的被循环使用这样就节省了启动和关闭连接的时间。</p>
<p><img src="http://stepimagewm.how2j.cn/2655.png" alt></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket</title>
    <url>/2019/05/30/Socket/</url>
    <content><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>网络编程是指编写运行在多个设备（计算机）的程序，这些设备都通过网络连接起来。</p>
<a id="more"></a>
<p><strong>java.net</strong>包中提供了低层次的通信细节。</p>
<p>两种常用的网络协议：</p>
<ul>
<li><strong>TCP</strong>：TCP 是<strong><em>传输控制协议</em></strong>的缩写，它保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称 TCP / IP。</li>
<li><strong>UDP</strong>：UDP 是<strong><em>用户数据报协议</em></strong>的缩写，一个无连接的协议。提供了应用程序之间要发送的数据的数据包。</li>
</ul>
<h2 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h2><p><em>套接字（Socket）使用TCP提供了两台计算机之间的通信机制。</em></p>
<p>建立TCP连接的步骤：</p>
<ol>
<li><p>服务器实例化一个ServerSocket对象，表示通过服务器上的端口通信</p>
</li>
<li><p>服务器调用ServerSocket类的accept()方法，该方法一直等待，直到客户端连接到服务器上给定的端口。</p>
</li>
<li><p>服务器在等待的时候，客户端实例化一个Socket对象，指定服务器名称和端口号来请求连接</p>
</li>
<li><p>Socket类的构造函数试图将客户端连接到指定服务器和端口号。如果通信被建立，则在客户端创建一个Socket对象能够与服务器端进行通信。</p>
</li>
<li><p>在服务器端，accept()方法返回服务器上一个新的Socket引用，给Socket连接到客户端的Socket。 </p>
<h2 id="Socket服务端实例"><a href="#Socket服务端实例" class="headerlink" title="Socket服务端实例"></a>Socket服务端实例</h2></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入端口号</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//重写run方法</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">		 System.out.println(<span class="string">"等待远程连接，端口号为："</span>+serverSocket.getLocalPort()+<span class="string">"......"</span>);</span><br><span class="line">		 <span class="keyword">try</span> &#123;</span><br><span class="line">			 <span class="comment">//在指定端口号监听，看是否有连接请求过来</span></span><br><span class="line">			Socket server =serverSocket.accept();</span><br><span class="line">			System.out.println(<span class="string">"远程主机地址："</span> + server.getRemoteSocketAddress());</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//使用数据流对字节流进行封装</span></span><br><span class="line">			DataInputStream in = <span class="keyword">new</span> DataInputStream(server.getInputStream());</span><br><span class="line">			 System.out.println(in.readUTF());</span><br><span class="line">			<span class="comment">//使用Scanner读取控制台的输入，并发送到服务端</span></span><br><span class="line">			DataOutputStream out = <span class="keyword">new</span> DataOutputStream(server.getOutputStream());</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);	            </span><br><span class="line">            String str = sc.next();</span><br><span class="line">			out.writeUTF(str);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//关闭</span></span><br><span class="line">			server.close();</span><br><span class="line">           </span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		 </span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">	 Thread t;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		t = <span class="keyword">new</span> Server(<span class="number">8000</span>);</span><br><span class="line">		t.run();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;		 </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Socket客户端实例"><a href="#Socket客户端实例" class="headerlink" title="Socket客户端实例"></a>Socket客户端实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String ServerName;</span><br><span class="line">		<span class="keyword">int</span> port;</span><br><span class="line">		Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">"请输入你要连接的服务端IP："</span>);</span><br><span class="line">		ServerName=sc.next();</span><br><span class="line">		System.out.println(<span class="string">"请输入你要连接的端口号："</span>);</span><br><span class="line">		port=sc.nextInt();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Socket client=<span class="keyword">new</span> Socket(ServerName,port);</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line">		 OutputStream outToServer = client.getOutputStream();</span><br><span class="line">         DataOutputStream out = <span class="keyword">new</span> DataOutputStream(outToServer);</span><br><span class="line">         String str;</span><br><span class="line">         str=sc.next();</span><br><span class="line">         out.writeUTF(str);</span><br><span class="line">         InputStream inFromServer = client.getInputStream();</span><br><span class="line">         DataInputStream in = <span class="keyword">new</span> DataInputStream(inFromServer);</span><br><span class="line">         System.out.println(<span class="string">"服务器响应： "</span> + in.readUTF());</span><br><span class="line">         client.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="InetAddress-类的方法"><a href="#InetAddress-类的方法" class="headerlink" title="InetAddress 类的方法"></a>InetAddress 类的方法</h2><p>这个类表示互联网协议(IP)地址。下面列出了 Socket 编程时比较有用的方法：</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>方法描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>static InetAddress getByAddress(byte[] addr)</strong> 在给定原始 IP 地址的情况下，返回 InetAddress 对象。</td>
</tr>
<tr>
<td>2</td>
<td><strong>static InetAddress getByAddress(String host, byte[] addr)</strong> 根据提供的主机名和 IP 地址创建 InetAddress。</td>
</tr>
<tr>
<td>3</td>
<td><strong>static InetAddress getByName(String host)</strong> 在给定主机名的情况下确定主机的 IP 地址。</td>
</tr>
<tr>
<td>4</td>
<td><strong>String getHostAddress()</strong>  返回 IP 地址字符串（以文本表现形式）。</td>
</tr>
<tr>
<td>5</td>
<td><strong>String getHostName()</strong>   获取此 IP 地址的主机名。</td>
</tr>
<tr>
<td>6</td>
<td><strong>static InetAddress getLocalHost()</strong> 返回本地主机。</td>
</tr>
<tr>
<td>7</td>
<td><strong>String toString()</strong> 将此 IP 地址转换为 String。</td>
</tr>
</tbody>
</table>
<h3 id="Socket类的方法"><a href="#Socket类的方法" class="headerlink" title="Socket类的方法"></a>Socket类的方法</h3><p>Socket 类有五个构造方法.</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>方法描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>public Socket(String host, int port) throws UnknownHostException, IOException.</strong> 创建一个流套接字并将其连接到指定主机上的指定端口号。</td>
</tr>
<tr>
<td>2</td>
<td><strong>public Socket(InetAddress host, int port) throws IOException</strong> 创建一个流套接字并将其连接到指定 IP 地址的指定端口号。</td>
</tr>
<tr>
<td>3</td>
<td><strong>public Socket(String host, int port, InetAddress localAddress, int localPort) throws IOException.</strong> 创建一个套接字并将其连接到指定远程主机上的指定远程端口。</td>
</tr>
<tr>
<td>4</td>
<td><strong>public Socket(InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException.</strong> 创建一个套接字并将其连接到指定远程地址上的指定远程端口。</td>
</tr>
<tr>
<td>5</td>
<td><strong>public Socket()</strong> 通过系统默认类型的 SocketImpl 创建未连接套接字</td>
</tr>
</tbody>
</table>
<p>Socket类其他常用方法：</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>方法描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>public void connect(SocketAddress host, int timeout) throws IOException</strong> 将此套接字连接到服务器，并指定一个超时值。</td>
</tr>
<tr>
<td>2</td>
<td><strong>public InetAddress getInetAddress()</strong>  返回套接字连接的地址。</td>
</tr>
<tr>
<td>3</td>
<td><strong>public int getPort()</strong> 返回此套接字连接到的远程端口。</td>
</tr>
<tr>
<td>4</td>
<td><strong>public int getLocalPort()</strong> 返回此套接字绑定到的本地端口。</td>
</tr>
<tr>
<td>5</td>
<td><strong>public SocketAddress getRemoteSocketAddress()</strong> 返回此套接字连接的端点的地址，如果未连接则返回 null。</td>
</tr>
<tr>
<td>6</td>
<td><strong>public InputStream getInputStream() throws IOException</strong> 返回此套接字的输入流。</td>
</tr>
<tr>
<td>7</td>
<td><strong>public OutputStream getOutputStream() throws IOException</strong> 返回此套接字的输出流。</td>
</tr>
<tr>
<td>8</td>
<td><strong>public void close() throws IOException</strong> 关闭此套接字。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>IO</title>
    <url>/2019/05/26/IO/</url>
    <content><![CDATA[<h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><a id="more"></a>
<p><img src="IO流.png" alt="IO"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Collections</title>
    <url>/2019/05/26/collections/</url>
    <content><![CDATA[<h2 id="集合框架思维导图"><a href="#集合框架思维导图" class="headerlink" title="集合框架思维导图"></a>集合框架思维导图</h2><a id="more"></a>
<p><img src="集合框架.png" alt="集合框架"></p>
<h2 id="Java集合框架概览"><a href="#Java集合框架概览" class="headerlink" title="Java集合框架概览"></a>Java集合框架概览</h2><p><img src="1.gif" alt></p>
<h3 id="三种基本集合框架："><a href="#三种基本集合框架：" class="headerlink" title="三种基本集合框架："></a>三种基本集合框架：</h3><p><strong>1、List（有序、可重复）</strong><br>List里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。</p>
<p><strong>2、Set（无序、不能重复）</strong><br>Set里存放的对象是无序，不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。</p>
<p><strong>3、Map（键值对、键唯一、值不唯一）</strong><br>Map集合中存储的是键值对，键不能重复，值可以重复。根据键得到值，对map集合遍历时先得到键的set集合，对set集合进行遍历，得到相应的值。</p>
<h5 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h5><p><strong>Vector和ArrayList</strong><br>1，vector是线程同步的，所以它也是线程安全的，而arraylist是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用arraylist效率比较高。<br>2，如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%，而arraylist增长率为目前数组长度的50%。如果在集合中使用数据量比较大的数据，用vector有一定的优势。<br>3，如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，如果频繁的访问数据，这个时候使用vector和arraylist都可以。而如果移动一个指定位置会导致后面的元素都发生移动，这个时候就应该考虑到使用linklist,因为它移动一个指定位置的数据时其它元素不移动。<br>ArrayList 和Vector是采用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，都允许直接序号索引元素，但是插入数据要涉及到数组元素移动等内存操作，所以索引数据快，插入数据慢，Vector由于使用了synchronized方法（线程安全）所以性能上比ArrayList要差，LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或向后遍历，但是插入数据时只需要记录本项的前后项即可，所以插入数度较快。</p>
<p><strong>arraylist和linkedlist</strong><br>1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。<br>2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。<br>3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 这一点要看实际情况的。若只对单条数据插入或删除，ArrayList的速度反而优于LinkedList。但若是批量随机的插入删除数据，LinkedList的速度大大优于ArrayList. 因为ArrayList每插入一条数据，要移动插入点及之后的所有数据。</p>
<p><strong>HashMap与TreeMap</strong><br>1、 HashMap通过hashcode对其内容进行快速查找，而TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。<br>2、在Map 中插入、删除和定位元素，HashMap是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。使用HashMap要求添加的键类明确定义了hashCode()和 equals()的实现。<br>两个map中的元素一样，但顺序不一样，导致hashCode()不一样。<br>同样做测试：<br>在HashMap中，同样的值的map,顺序不同，equals时，false;<br>而在treeMap中，同样的值的map,顺序不同,equals时，true，说明，treeMap在equals()时是整理了顺序了的。</p>
<p><strong>HashTable与HashMap</strong><br>1、同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的。<br>2、HashMap允许存在一个为null的key，多个为null的value 。<br>3、hashtable的key和value都不允许为null。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>collections</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2019/05/22/MarkDown/</url>
    <content><![CDATA[<h3 id="Markdown使用"><a href="#Markdown使用" class="headerlink" title="Markdown使用"></a>Markdown使用</h3><a id="more"></a>​<br><br>使用工具为Typora(其实MP2和sublime3也可以，但没快捷键操作)<br><br>#### （1）标题<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<h4 id="（2）粗体、斜体、删除线和下划线"><a href="#（2）粗体、斜体、删除线和下划线" class="headerlink" title="（2）粗体、斜体、删除线和下划线"></a>（2）粗体、斜体、删除线和下划线</h4><p><strong>Markdown 语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>
<p>Typora 快捷键：</p>
<p>Ctrl+I：斜体</p>
<p>Ctrl+B：粗体</p>
<p>Ctrl+U：下划线</p>
<p>Alt+Shift+5：删除线</p>
<h4 id="（3）引用块"><a href="#（3）引用块" class="headerlink" title="（3）引用块"></a>（3）引用块</h4><p><strong>Markdown 语法：</strong><br><code>&gt; 文字引用</code></p>
<blockquote>
<p><strong>Typora 快捷键：</strong> Ctrl+Shift+Q</p>
</blockquote>
<h4 id="（4）代码块"><a href="#（4）代码块" class="headerlink" title="（4）代码块"></a>（4）代码块</h4><p><strong>Markdown 语法：</strong></p>
<p><code>行内代码</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多行代码</span><br><span class="line">多行代码</span><br></pre></td></tr></table></figure>
<p><strong>Typora 快捷键：</strong></p>
<p>行内代码：Ctrl+Shift+`</p>
<p>多行代码：Ctrl+Shift+K</p>
<h4 id="（5）公式块"><a href="#（5）公式块" class="headerlink" title="（5）公式块"></a>（5）公式块</h4><p><strong>Markdown 语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">数学公式</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>Typora 快捷键： Ctrl+Shift+M</p>
<h4 id="（6）分割线"><a href="#（6）分割线" class="headerlink" title="（6）分割线"></a>（6）分割线</h4><p><strong>Markdown 语法</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：---</span><br><span class="line"></span><br><span class="line">方法二：+++</span><br><span class="line"></span><br><span class="line">方法三：***</span><br></pre></td></tr></table></figure>
<h4 id="（7）列表"><a href="#（7）列表" class="headerlink" title="（7）列表"></a>（7）列表</h4><p><strong>Markdown 语法：</strong></p>
<ol>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.有序列表项</span><br><span class="line"></span><br><span class="line">* 无序列表项</span><br><span class="line"></span><br><span class="line">+ 无序列表项</span><br><span class="line"></span><br><span class="line">- 无序列表项</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>   <strong>Typora 快捷键：</strong></p>
<p>有序列表项：Ctrl+Shift+[</p>
<p>无序列表项：Ctrl+Shift+]</p>
<h4 id="（8）表格"><a href="#（8）表格" class="headerlink" title="（8）表格"></a>（8）表格</h4><p><strong>Markdown 语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头1|表头2</span><br><span class="line">-|-|-</span><br><span class="line">内容11|内容12</span><br><span class="line">内容21|内容22</span><br></pre></td></tr></table></figure>
<p><strong><em>e.g</em></strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>Tom</td>
</tr>
<tr>
<td>02</td>
<td>Jack</td>
</tr>
</tbody>
</table>
<p><strong>Typora 快捷键：</strong> Ctrl+T</p>
<h4 id="（9）超链接"><a href="#（9）超链接" class="headerlink" title="（9）超链接"></a>（9）超链接</h4><p><strong>Markdown语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：[链接文字](链接地址 &quot;链接描述&quot;)</span><br><span class="line">例如：[示例链接](https://www.example.com/ &quot;示例链接&quot;)</span><br><span class="line"></span><br><span class="line">方法二：&lt;链接地址&gt;</span><br><span class="line">例如：&lt;https://www.example.com/&gt;</span><br><span class="line"></span><br><span class="line">方法三：[链接文字]（标记）</span><br><span class="line">		标记=url</span><br></pre></td></tr></table></figure>
<p><strong>Typora快捷键：</strong> Ctrl+K</p>
<h4 id="（10）图片"><a href="#（10）图片" class="headerlink" title="（10）图片"></a>（10）图片</h4><p><strong>Markdown语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片文字](图片地址 &quot;图片描述&quot;)</span><br><span class="line">例如：![示例图片](https://www.example.com/example.PNG &quot;示例图片&quot;)</span><br></pre></td></tr></table></figure>
<p>Typora快捷键： Ctrl+Shift+I</p>
<p><strong><em>e.g:</em></strong></p>
<p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3249761993,448953672&amp;fm=27&amp;gp=0.jpg" alt="我"></p>
<p>说明：在 Hexo中 插入图片时，请按照以下的步骤进行设置</p>
<p>将 站点配置文件 中的 post_asset_folde 选项的值设置为 true</p>
<p>在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image –save 安装插件</p>
<p>这样，当使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与 title 同名的文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可</p>
<p>例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句 <code>![示例图片](title/example.PNG &quot;示例图片&quot;)</code> 添加图片</p>
<h4 id="（11）表情符号"><a href="#（11）表情符号" class="headerlink" title="（11）表情符号"></a>（11）表情符号</h4><blockquote>
<p>:表情单词:</p>
</blockquote>
<p><strong>e.g:</strong>  :call_me_hand:</p>
<p>:happy:</p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>在站点文件夹中打开 git bash，输入如下命令创建文章，其中 <code>title</code> 为文章的标题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;title&quot;</span><br></pre></td></tr></table></figure>
<p>当输入命令后，就会在 <code>source/_post</code> 文件夹下创建一个文件，命名为：<code>title.md</code></p>
<p>在站点文件夹中打开 git bash，输入如下命令部署和发布文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<p>1建议：在使用 hexo g 部署之后，可以先使用 hexo s 运行本地站点，然后在浏览器输入地址 <a href="http://lacolhost:4000/" target="_blank" rel="noopener">http://lacolhost:4000/</a> 查看运行结果，检查无误后再使用 hexo d 发布</p>
<h4 id="Latex公式学习："><a href="#Latex公式学习：" class="headerlink" title="Latex公式学习："></a>Latex公式学习：</h4><p>$$<br>\begin{matrix}<br>    1 &amp; x &amp; x^2\<br>    1 &amp; y &amp; y^2\<br>    1 &amp; z &amp; z^2\<br>    \end{matrix}</p>
<p>X=\left|<br>    \begin{matrix}<br>        x_{11} &amp; x_{12} &amp; \cdots &amp; x_{1d}\<br>        x_{21} &amp; x_{22} &amp; \cdots &amp; x_{2d}\<br>        \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>        x_{11} &amp; x_{12} &amp; \cdots &amp; x_{1d}\<br>    \end{matrix}<br>\right|<br>$$</p>
<p><a href="https://blog.csdn.net/happyday_d/article/details/83715440" target="_blank" rel="noopener">Typora使用Latex代码插入公式</a></p>
<p>$$<br>x^2 \ x_i \<br>\alpha \ \beta \pi \phi \sqrt5 \cdots<br>$$</p>
<p>$$<br>\int_1^n \dots lim_{x\to \infty} \frac{8}{4}<br>$$</p>
<p>$$</p>
<p>$$</p>
<h6 id="此文参考："><a href="#此文参考：" class="headerlink" title="此文参考："></a>此文参考：</h6><p><a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">Hexo系列（五）撰写文章</a></p>
<p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></p>
<p>这个只是用来对于写$x^2$博客的一个备忘</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/04/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<p> &lt;<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands.html</a> &gt;</p>
]]></content>
  </entry>
</search>
